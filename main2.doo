module main2


type[K, V] Map []{keys:K, values:V}


fn[K, V] {m:Map(K, V)} insert(key:()K, value:()V)
    for m[..] -> i
        if m.keys[i] == key{}
            m.values[i] = value{}
            return
    
    m++
    m.keys[len(m) - 1]   = key{}
    m.values[len(m) - 1] = value{}


fn[K, V] {m:Map(K, V)} find(key:()K) Maybe(()V)
    for m[..] -> i
        if m.keys[i] == key{}
            return Just( conv(m.values[i]) )
    return Nothing()


type Person {string, i32}

fn[T] {t:[]T} length() i64
    ${ return $t->len; }

fn[T] {t:[]T} push(elem:()T)
    t++
    t[t.length() - 1] = elem{}

fn[T] {t:[]T} pop() ()T
    data elem ()T
    elem{} = t[t.length() - 1]
    ${ $t->len--; }
    return elem


fn testTuple()
    let t1 = (1, true, "three"):(){i64, bool, string}
    let t2 = (2, false, "four"):(){i64, {bool, string}}

    type Person {name:string, age:i64}
    type MyType {person:Person, something:bool}
    type Index i64

    let t3 = ("jim", 50):()Person
    let 50    = t3.age
    let "jim" = t3.name

    let t4 = ("james", 32, 3):(){Person, Index}
    let "james" = t4.Person.name
    let {"james", 32} = t4.Person
    let 3             = t4.Index

    type BigType {Index, Person, bool, MyType}
    let t5 = (1, "two", 3, false, "five", 6, true):()BigType
    let "five" = t5.MyType.Person.name
    let "five" = t5.MyType.person.name
    let 3      = t5.Person.age

    print("testTuple passed")


fn testTable()
    data tab1 []i64
    tab1.push(3)
    let 1 = tab1.length()
    let 3 = tab1.pop()
    let 0 = tab1.length()

    data tab2 []()()i64
    tab2.push(65)
    let 65 = tab2.pop()

    data tab3 []{i64, bool}
    tab3.push( (1, true) )
    //let (1, true) = conv(tab3[0]):(i64, bool)
    let {1, true} = tab3[0]

    print("testTable passed")


fn testMap()
    data map1 Map(i64, string)

    map1.insert(3, "three")
    map1.insert(4, "four")
    map1.insert(5, "six")
    map1.insert(5, "five")

    let Just("five") = map1.find(5)
    let Just("three") = map1.find(3)
    let Nothing()     = map1.find(2)

    data map2 Map( {i64, string}, i8 )

    map2.insert( (1, "two"), 3 )
    map2.insert( (1, "tw0"), 2 )
    map2.insert( (1, "two"), 4 )

    let Just(4) = map2.find( (1, "two") )
    let Just(2) = map2.find( (1, "tw0") )
    let Nothing() = map2.find( (1, "Two") )

    data map3 Map ( (i64, string), i8 )

    map3.insert( (1, "two"), 3 )

    print("testMap passed")



type[T] Maybe (Nothing:null | Just:T)
type[T] Sparse (values:[]T, empty:[]i64)

fn[T] {s:Sparse(T)} insert(value:()T) i64
    if s.empty.length() > 0
        let key = s.empty.pop()
        s.values[key] = value{}
        return key

    s.values.push(value)
    return s.values.length() - 1


fn[T] {s:Sparse(T)} delete(key:i64)
    if key == s.values.length() - 1
        s.values.pop()
    else
        s.empty.push(key)


fn main()
    testTuple()
    testTable()
    testMap()
    print("main2 finished")

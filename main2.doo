module main2

import std/binaryTree
import std/unordered
import std/sparse
import std/maybe
import std/table
import std/map
import std/io


fn testUnordered()
    data u Unordered[String]

    let 0 = u.length()
    let 0 = u.insert("benis")
    let 1 = u.insert("bongis")
    let 2 = u.insert("bangis")
    let 3 = u.length()

    let {"benis"}  = u.atIndex(0)
    let {"bongis"} = u.atIndex(1)
    let {"bangis"} = u.atIndex(2)

    u.delete(1)

    let 2 = u.length()
    let {"benis"}  = u.atIndex(0)
    let {"bangis"} = u.atIndex(1)
    let 1 = u.insert("benghis")
    let 3 = u.length()
    let {"benis"}   = u.atIndex(0)
    let {"bangis"}  = u.atIndex(1)
    let {"benghis"} = u.atIndex(2)

    print("testUnordered passed")


fn testTree()
    data tree Tree[I64, Bool]
    tree.insert(10, true)
    tree.insert(19, false)
    tree.insert(3, true)
    tree.insert(433, false)
    tree.insert(2, true)
    let 5 = tree.length()
    let false = tree.contains(11)
    let true = tree.contains(10)
    tree.delete(10)
    let false = tree.contains(10)
    //tree.printTree()

    data tree2 Tree[String, I64]
    tree2.insert("benzhis", 1)
    tree2.insert("benis", 2)
    tree2.insert("beni", 3)
    tree2.insert("bongis", 4)
    tree2.insert("banghis", 5)
    tree2.insert("benghis", 6)
    let 6 = tree2.length()
    let true = tree2.contains("bongis")
    let false = tree2.contains("b0ngis")
    tree2.delete("bongis")
    let false = tree2.contains("bongis")
    let 5 = tree2.length()
    //tree2.printTree()

    data tree3 Tree[Person, Bool]
    tree3.insert( ("jorinz", 35), true )
    tree3.insert( ("joranz", 39), true )
    tree3.insert( ("jaranz", 50), true )
    tree3.insert( ("jaranz", 36), true )
    let 4 = tree3.length()
    tree3.delete( ("jorinz", 35) )
    let 3 = tree3.length()
    tree3.delete( ("joranz", 39) )
    tree3.delete( ("jaranz", 50) )
    tree3.delete( ("jaranz", 36) )
    let 0 = tree3.length()
    //tree3.printTree()

    data tree4 Tree[(Bool, Person), Bool]
    tree4.insert( (true, "jorinz", 35), true )
    tree4.insert( (true, "joranz", 39), true )
    tree4.insert( (true, "jaranz", 50), true )
    tree4.insert( (true, "jaranz", 36), true )
    let 4 = tree4.length()
    let true  = tree4.contains((true, "jaranz", 36))
    let false = tree4.contains((true, "jaranzz", 36))
    //tree4.printTree()

    print("testTree passed")


fn testTuple()
    let t1 = (1, true, "three"):(){I64, Bool, String}
    let t2 = (2, false, "four"):(I64, {Bool, String})

    type Person {name String, age I64}
    type MyType {person Person, something Bool}
    type Index I64

    let t3 = ("jim", 50):()Person
    let 50    = t3.age
    let "jim" = t3.name

    let t4 = ("james", 32, 3):(){Person, Index}
    let "james" = t4.Person.name
    let {"james", 32} = t4.Person
    let 3             = t4.Index

    type BigType {Index, Person, Bool, MyType}
    let t5 = (1, "two", 3, false, "five", 6, true):()BigType
    let "five" = t5.MyType.Person.name
    let "five" = t5.MyType.person.name
    let 3      = t5.Person.age

    let false = "jorinz" < "jorinz"
    let false = 35 < 35
    let false = ("jorinz", 35) < ("jorinz", 35)

    print("testTuple passed")


fn testTable()
    data tab1 Table[I64]
    {tab1}.push(3)
    let {3} = tab1.at(0)
    let 1 = tab1.length()
    let 3 = tab1.pop()
    let 0 = tab1.length()

    data tab2 Table[()()I64]
    tab2.push(65)
    let 65 = tab2.pop()

    data tab3 Table[{I64, Bool}]
    tab3.push( (1, true) )
    let {1, true} = tab3.at(0)

    data tab4 Table[sparse::Key[I64]]
    tab4.push(3)
    let 3:sparse::Key[I64] = tab4.pop()

    type[T] AnotherRecord {Bool, T}
    data tab5 Table[AnotherRecord[Person]]
    tab5.push( (true, "jorinz", 49) )
    let (true, "jorinz", 49) = tab5.pop()

    print("testTable passed")


fn testMap()
    data map1 Map[I64, String]

    map1.insert(3, "three")
    map1.insert(4, "four")
    map1.insert(5, "six")
    map1.insert(5, "five")

    let Just("five")  = map1.find(5)
    let Just("three") = map1.find(3)
    let Nothing()     = map1.find(2)

    data map2 Map[ {I64, String}, I8 ]

    map2.insert( (1, "two"), 3 )
    map2.insert( (1, "tw0"), 2 )
    map2.insert( (1, "two"), 4 )

    let Just(4) = map2.find( (1, "two") )
    let Just(2) = map2.find( (1, "tw0") )
    let Nothing() = map2.find( (1, "Two") )

    data map3 Map[ (I64, String), I8 ]

    map3.insert( (1, "two"), 3 )

    print("testMap passed")


fn testPatRecord()
    let x = 3
    if x{} -> {y}
        y = 4
    let 4 = x

    let x2 = (3, 4)
    if x2{} -> {a, b}
        b = 5
        a = 2
    let (2, 5) = x2

    data sparse Sparse[(I64, Bool)]
    let key = sparse.insert((1, true))
    let {1, true} = sparse.at(key)
    let {i, b} = sparse.at(key) in
        b = false
        i = i + 1
    let {2, false} = sparse.at(key)

    print("testPatRecord passed")


fn testSparse()
    data s1 Sparse[I64]
    let 0 = s1.insert(3)
    let 1 = s1.insert(4)
    let 2 = s1.insert(5)
    let 3 = s1.length()
    s1.delete(1)
    let 2 = s1.length()
    let 1 = s1.insert(6)
    let 3 = s1.insert(7)
    let 7 = s1.get(3)
    let 4 = s1.length()

    data s2 Sparse[Person]
    let key = s2.insert( ("jones", 44) )
    let ("jones", 44) = s2.get(key)

    print("testSparse passed")


fn {io Io} testFuncCalls()
    fn {n I64, b Bool} f() String
        n = n + 1
        b = !b
        return ""

    let n = 0
    let b = false
    let "" = {n, b}.f()
    let (1, true) = (n, b)

    fn {p Person} g() Bool
        return p.name == "john"
    let p:()Person
    let false = p{}.g()
    p.name = "john"
    let true = p{}.g()

    let (s0, n0) = ("benis", 5:I32)
    {s0, n0}.g()

    fn {b Bool, p Person, n I64} h()
        p.name = "james"
        b = false
        n = n + 1

    data tab1 Table[(Bool, Person, I64)]
    data tab2 Table[{Bool, Person, I64}]
    tab1.push( (true, "jim", 49, 2) )
    tab2.push( (true, "jim", 49, 2) )
    tab1.at(0).h()
    tab2.at(0).h()

    {b, tab1{0}.Person, n}.h()

    let "james" = tab1.at(0).Person.name
    let "james" = tab2.at(0).Person.name


    data tab3 Table[I64]
    tab3.push(4)
    fn {n I64} j()
        let n = 4
    tab3.at(0).j()

    io.putStrLn("testFuncCalls passed")


fn {io Io} testSubTable()
    data t Table[Person]
    t.push( ("john", 45) )
    t.push( ("jim", 32) )
    t.push( ("james", 24) )
    fn {t Table[String]} printNames()
        let {"john"} = t.at(0)
    t.name.printNames()

    data u Unordered[I64]

    let k0 = u.insert(46)
    let k1 = u.insert(92)
    let k2 = u.insert(1)

    fn {t Table[I64]} h()
        let {46} = t.at(0)
        let {1}  = t.at(2)

    let {t} = u.atValues() in
        t.h()
    u.atValues().h()

    io.putStrLn("testSubTable passed")


fn {io Io} main()
    testTuple()
    testTable()
    testMap()
    testSparse()
    testTree()
    testPatRecord()
    testUnordered()
    io.testFuncCalls()
    io.testSubTable()
    io.putStrLn("main2 finished")


type Person {name String, age I32}


module main2

type Person {string, i32}

fn[T] {t:[]T} length() i64
    ${ return $t->len; }

fn[T] {t:[]T} push(elem:()T)
    t++
    t[t.length() - 1] = elem{}

type[K, V] Map (keys:[]K, values:[]V)

fn[K, V] {m:Map(K, V)} insert(key:()K, value:()V)
    m.keys.push(key)
    m.values.push(value)
    return


fn[K, V] {m:Map(K, V)} find(key:()K) Maybe(()V)
    for m.keys[..] -> i
        if m.keys[i] == key{}
            return Just( conv(m.values[i]):()V )
    return Nothing(0:i8)


type[T] Maybe (Nothing:i8 | Just:T)


fn main()
    let t = ("benis", 12):()Person

    data tab []Person
    tab.push(t)

    data map Map(string, bool)
    data map2 Map({string, bool}, i64)
    data map3 Map((string, bool), string)

    map.insert("benis", true)
    map2.insert( ("bongis", false), 1 )
    //map3.insert( ("bongis", true),  "value" )

    for tab -> x
        print(x)

    for map2.keys -> x
        print(x)

    let z = map.find("benis")
    switch z
        Nothing(_); print("nothing")
        Just(x);    print("Just", x) 


    let Just(x) = map2.find( ("bongis", false) )
    //let Just(y) = map3.find( ("bongis", true) )
    print(x)

    print("main2 finished")





module main


type Map [keys any, values any]


fn(K any, V any, M Map(K, V)) {m M} find(key K) (null | V)
    for m -> (k, v)
        if k == key
            return conv(v)
    return null



fn(M map) find(key M:keys) (null | M:values)



fn(T table) {t T} len() i64

fn(E any) {t [E]} first() E
    


type Board [3 [3 bool]]

fn boardPrint(b Board)
    for b -> row
        for row[..] -> col
            return

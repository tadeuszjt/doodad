module main


type Person {string, i32}

type[T] Vec2 (T, T)

fn[T] {v:Vec2(T)} times2()
    let (x, y) = v
    v = (x * 2, y * 2)



fn[T] {t:[]T} length() i64
    ${ return $t->len; }


fn[T] {t:[]T} push(elem:()T)
    t++
    t[t.length() - 1] = elem[]


fn[T] {t:[]T} pop()
    ${ $t->len--; }


type[K, V] Map ([]K, []V)


fn[K, V] {m:Map(K, V)} find(key:K)
    return



fn main()
    let t = ("benis", 12):()Person
    let t2 = ("bongis", true):(string, bool)
    let v = (1, 2):Vec2(i32)

    v.times2()

    data tab []Person

    tab.push(t)
    tab.push(t)
    tab.pop()
    tab.pop()
    tab.push(("hello", 11))
    tab.push(("barg", 13))

    for tab -> p
        print(p)

    print(t, t2, v, tab.length(), tab[0])

    data map Map(string, bool)

    map.find("benis")


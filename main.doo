module main


type Person {string, i32}

type[T] Vec2 (){T, T}

fn[T] {v:Vec2(T)} times2()
    let (x, y) = v
    v = (x * 2, y * 2)



fn[T] {t:[]T} length() i64
    ${ return $t->len; }



fn[T] {t:[]T} append(elem:()T)
    t++
    t[t.lenght() - 1] = 

    elem[] [] // the record accessor?


fn main()
    let t = ("benis", 12):()Person
    let t2 = ("bongis", true):(){string, bool}
    let v = (1, 2):Vec2(i32)

    v.times2()


    data tab []Person

    tab.append(t)

    print(t, t2, v, tab.length())




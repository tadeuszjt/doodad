module main

import std/io
import qualified std/sfml/window  as sf
import qualified std/sfml/texture as sf
import std/rand
import std/sparse
import std/print
import std/option
import std/unordered
import std/time
import std/maths
import std/geometry
import std/stack

import builtin/all


include <SFML/Graphics.h>



tuple Grid {
    rect  Rect
    array Array{20, Array{20, Stack{16, Vec2}}}
}
derives Grid (destroy)


fn makeGrid(rect Rect) Grid
    let g
    g.rect = rect
    return g


fn getGridVecs(g &Grid, range Rect) Table{Vec2}
    let numRows = g.array.len
    let numCols = g.array[0].len

    let rowMin = ((range.min.x - g.rect.min.x) / (g.rect.max.x - g.rect.min.x) * numRows.convert).convert:I64
    let colMin = ((range.min.y - g.rect.min.y) / (g.rect.max.y - g.rect.min.y) * numCols.convert).convert:I64

    let rowMax = ((range.max.x - g.rect.min.x) / (g.rect.max.x - g.rect.min.x) * numRows.convert).convert:I64
    let colMax = ((range.max.y - g.rect.min.y) / (g.rect.max.y - g.rect.min.y) * numCols.convert).convert:I64

    let rMin = clamp(rowMin, 0, numRows - 1)
    let cMin = clamp(colMin, 0, numCols - 1)

    let rMax = clamp(rowMax, 0, numRows - 1)
    let cMax = clamp(colMax, 0, numCols - 1)

    data result Table{Vec2}

    for (rMin, rMax + 1) -> r
        for (cMin, cMax + 1) -> c
            for (0, g.array[r][c].len) -> i
                result.container::push(g.array[r][c][i])

    return result

fn addToGrid(g &Grid, v Vec2)
    let numRows = g.array.len
    let numCols = g.array[0].len

    let row = ((v.x - g.rect.min.x) / (g.rect.max.x - g.rect.min.x) * numRows.convert).convert:I64
    let col = ((v.y - g.rect.min.y) / (g.rect.max.y - g.rect.min.y) * numCols.convert).convert:I64

    let r = clamp(row, 0, numRows - 1)
    let c = clamp(col, 0, numCols - 1)

    g.array[r][c].stack::push(v)


tuple Blob {
    position   Vec2
    velocity   Vec2
    blobColour sf::Colour
    sprite     sf::Quad
    age        I64
}
derives    Blob (copy, destroy)
derives{P} Blob (print::print{P})


inst convert{sf::Vec2f, Vec2} (a); return (a.sf::x.convert, a.sf::y.convert)
inst convert{Vec2, sf::Vec2f} (a); return (a.x.convert, a.y.convert)
inst convert{Mat3, sf::Mat3f} (a)
    let b
    for (0, a.len) -> r
        for (0, a[0].len) -> c
            b[r][c] = a[r][c].convert
    return b
            

inst rand::uniform{Vec2} (rand&, min, max)
    return Vec2(
        rand.uniform(min.x, max.x)
        rand.uniform(min.y, max.y)
    )


inst rand::uniform{sf::Colour} (rand&, min, max)
    return (
        rand.uniform(min.sf::r, max.sf::r)
        rand.uniform(min.sf::g, max.sf::g)
        rand.uniform(min.sf::b, max.sf::b)
        rand.uniform(min.sf::a, max.sf::a)
    )


fn makeQuad(position sf::Vec2f, colour sf::Colour) sf::Quad
    let quad
    quad[0] = (position + (-10.0, -10.0), colour, (0.0, 0.0))
    quad[1] = (position + (10.0, -10.0),  colour, (640.0, 0.0))
    quad[2] = (position + (10.0, 10.0),   colour, (640.0, 640.0))
    quad[3] = (position + (-10.0, -10.0), colour, (0.0, 0.0))
    quad[4] = (position + (10.0, 10.0),   colour, (640.0, 640.0))
    quad[5] = (position + (-10.0, 10.0),  colour, (0.0, 640.0))
    return quad


fn containsBlob(table &Blob.Table, point Vec2) Bool
    for (0, table.len) -> i
        if (point - table.position[i]).geometry::length < 10.0
            return true

    return false


fn main(io Io, rand Rand, w sf::Window)
    io.stdout.printLn("blobs")
    w.sf::create(1000, 800, "blobs")
    let blobTexture = sf::textureFromFile("blob.png")

    let arena = Rect( (0.0, 0.0), (1000.0, 1000.0) )
    data blobs Blob.Table

    for (0, 100)
        let blob
        blob.blobColour = rand.uniform(sf::black(), sf::white())
        blob.position   = rand.uniform(arena.min, arena.max)
        blob.velocity   = rand.uniform( (-1.0, -1.0), (1.0, 1.0) )
        blobs.container::push(blob)


    let mousePos = Vec2(0.0, 0.0)
    let translation = mat3Translation(Vec2(250, 150))
    let translationInv = mat3Translation(Vec2(-250, -150))


    while w.sf::isOpen()
        let prevNs = time::getTimestampNs()

        while w.sf::pollEvent() -> some(event)
            switch event
                sf::closed()       ; w.sf::close()
                sf::mouseMove(x, y); mousePos = (x, y).convert


        let grid = makeGrid(arena)
        for (0, blobs.len) -> i
            grid.addToGrid(blobs.position[i])


        for (0, blobs.len) -> i
            if rand.uniform(0, 100) == 0
                let childPos = blobs.position[i] + Vec2(
                    rand.uniform(0, 40)
                    0
                ).rotate(rand.uniform(0, 2 * maths::pi()))

                if arena.contains(childPos)
                    let rect = Rect( childPos - (20, 20), childPos + (20, 20) )
                    let positions = grid.getGridVecs(rect)

                    let collides = false
                    for positions -> p | !collides
                        if (childPos - p).geometry::length < 20 
                            collides = true

                    if !collides
                        let child
                        child.position   = childPos
                        child.blobColour = rand.uniform(sf::black(), sf::white())
                        blobs.container::push(child)

        for (0, blobs.len) -> i
            blobs[i].sprite = makeQuad(blobs[i].position.convert, blobs[i].blobColour)

        
        let (width, height) = w.sf::getSize()
        w.sf::setViewFromRect(((0, 0), (width.convert, height.convert)))


        w.sf::clearWindow(sf::white())
        w.sf::drawQuads(blobs.sprite, &blobTexture, translation.convert)
        w.sf::display()

        let nextNs = time::getTimestampNs()
        let diff = nextNs - prevNs
        sleepNs(16 * 1000 * 1000 - diff)




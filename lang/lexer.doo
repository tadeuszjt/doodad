module lexer 

import ../std/io
import ../std/strings
import ../std/chars


type Idx i64

type Lexeme { 
    LexChar(char)
    LexIdent(Idx)
    LexInt(i64)
    LexFloat(Idx)
    LexKeyword(Idx)
    LexType(Idx)
    LexSym(char)
    LexDoubleSym(char, char) 
    LexNewline(Idx)
    LexCharLit(char)
    LexStringLit(Idx)
    LexImport(Idx)
    LexImportC(Idx)
    LexComment()
}


type Result { null | Success(Lexeme, Idx) }
type Stack string


fn {s Stack} at(idx Idx) {null | char}
    if s[..][idx] && s[idx] != '\0'
        return conv(s[idx])
    return null


fn {s Stack, str string} read(idx Idx)
    while s.at(idx) -> char(c)
        str.push(c)
        idx = idx + 1


fn {io Io, s Stack} write(idx Idx)
    while s.at(idx) -> char(c) 
        io.write(c)
        idx = idx + 1


fn {s Stack} popString() 
    while s.at(s.len() - 1) -> char(c)
        s.pop()


fn {s Stack} lexFloat(idx Idx) Result
    data chars string 
    while s.at(idx) -> char(c) | isDigit(c) 
        idx = idx + 1
        chars.push(c)
    if chars == ""; return null

    if s.at(idx) -> char('.')
        idx = idx + 1
        chars.push('.')
    else; return null

    let hasDigits = false
    while s.at(idx) -> char(c) | isDigit(c) 
        idx = idx + 1
        chars.push(c)
        hasDigits = true
    if !hasDigits; return null

    let id = s.push('\0') + 1
    for chars -> c; s.push(c)
    return Success(LexFloat(id), idx)
            


fn {s Stack} lexInt(idx Idx) Result 
    let start = idx
    let n = 0
    while s.at(idx) -> char(c) | isDigit(c)
        n = n*10 + i64(c - '0')
        idx = idx + 1

    if idx > start
        return Success(LexInt(n), idx)
    return null


fn {s Stack} lexIdent(idx Idx) Result
    if s.at(idx) -> char(c) | isAlpha(c)
        let id = s.push('\0') + 1

        while s.at(idx) -> char(c) | isAlpha(c) || isDigit(c) || c == '_'
            idx = idx + 1
            s.push(c)
        return Success(LexIdent(id), idx)
    return null


fn {s Stack} lexComment(idx Idx) Result
    if s.at(idx) -> char('/') 
        idx = idx + 1
        if s.at(idx) -> char('/')
            idx = idx + 1
            while s.at(idx) -> char(c) | c != '\n'
                idx = idx + 1
            return Success(LexComment(), idx)
    return null


fn {s Stack} lexImport(idx Idx) Result
    if s.lexIdent(idx) -> null; return null
    let Success(LexIdent(id), end) = s.lexIdent(idx)
    idx = end

    data importStr string
    {s, importStr}.read(id)
    s.popString()

    switch importStr
        "import";
        "import_c";
        _; return null

    let retId = s.push('\0') + 1

    while s.at(idx) -> char(c) | c == ' ' || c == '\t'
        idx = idx + 1

    while s.at(idx) -> char(c) | c != '\n' && c != ';'
        s.push(c)
        idx = idx + 1

    switch importStr
        "import";   return Success(LexImport(retId), idx)
        "import_c"; return Success(LexImportC(retId), idx)


fn {s Stack} lexType(idx Idx) Result
    if s.lexIdent(idx) -> Success(LexIdent(id), end) 
        data ident string 
        {s, ident}.read(id) 

        let match = true 
        switch ident 
            "i8";
            "i16";
            "i32";
            "i64";
            "f32";
            "f64";
            "bool";
            "char";
            "string";
            "sparse";
            "map";
            _; match = false

        if match; return Success(LexType(id), end)
        else; s.popString()

    return null


fn {s Stack} lexKeyword(idx Idx) Result
    if s.lexIdent(idx) -> Success(LexIdent(id), end)
        data ident string 
        {s, ident}.read(id)
        data keywords [string] { "fn", "type", "if", "else", "let", "while", "return", "switch", "true", "false", "module", "for", "null", "data" }
        for keywords[..] -> i
            if ident == keywords[i]
                return Success(LexKeyword(id), end)
        s.popString()

    return null


fn {s Stack} lexGraphic(idx Idx) Result
    data syms string "-/<>[]{}().,;:|=!?@#$%^&*()_+ "
    if s.at(idx) -> char(c)
        for syms -> sym 
            if sym == c; return Success(LexChar(c), idx + 1)
    return null


fn {s Stack} lexSym(idx Idx) Result
    data syms string "+-*/%<>[]{}().,;:|=_!"
    if s.at(idx) -> char(c)
        for syms -> sym 
            if sym == c; return Success(LexSym(c), idx + 1)
    return null


fn {s Stack} lexDoubleSym(idx Idx) Result
    data chars2 [2 char]
    if s.at(idx)     -> char(c); chars2[0] = c
    if s.at(idx + 1) -> char(c); chars2[1] = c
    switch chars2
        "==";
        "!=";
        ">=";
        "<=";
        "||";
        "&&";
        "..";
        "->";
        "::";
        _; return null
    return Success(LexDoubleSym(chars2[0], chars2[1]), idx + 2)


fn {s Stack} lexEscaped(idx Idx) Result 
    switch (s.at(idx), s.at(idx + 1))
        (char('\\'), char('n'));  return Success(LexChar('\n'), idx + 2)
        (char('\\'), char('t'));  return Success(LexChar('\t'), idx + 2)
        (char('\\'), char('0'));  return Success(LexChar('\0'), idx + 2)
        (char('\\'), char('\\')); return Success(LexChar('\\'), idx + 2)
        _; return null


fn {s Stack} lexCharLit(idx Idx) Result
    if s.at(idx) -> char('\'')
        idx = idx + 1
        let result = null
        if s.lexEscaped(idx)             -> Success(x, y); result = Success(x, y)
        else if (s.at(idx), s.at(idx+1)) -> (char('\\'), char('\''))
            result = Success(LexChar('\''), idx + 2)
        else if s.at(idx)                -> char(c) | isAlpha(c) || isDigit(c) || c == '"'
            result = Success(LexChar(c), idx + 1)
        else if s.lexGraphic(idx)        -> Success(x, y); result = Success(x, y)

        if result -> Success(LexChar(c), end)
            idx = end
            if s.at(idx) -> char('\'')
                return Success(LexCharLit(c), idx + 1)

    return null


fn {s Stack} lexStringLitChar(idx Idx) Result
    if (s.at(idx), s.at(idx+1)) -> (char('\\'), char('"'))
        return Success(LexChar('"'), idx + 2)
    if s.lexEscaped(idx) -> Success(a, b); return Success(a, b)

    if s.at(idx) -> char(c) | isAlpha(c) || isDigit(c) || c == '\'' || c == ' ' || c == '\t'
        return Success(LexChar(c), idx + 1)
    if s.lexGraphic(idx) -> Success(a, b); return Success(a, b)
    return null


fn {s Stack} lexStringLit(idx Idx) Result 
    if s.at(idx) -> char('"')
        idx = idx + 1
        let id = s.push('\0') + 1

        while s.lexStringLitChar(idx) -> Success(LexChar(c), end)
            data str string
            switch c 
                '\n'; str = "\\n"
                '\t'; str = "\\t"
                '\0'; str = "\\0"
                '"';  str = "\\\""
                '\\'; str = "\\\\"
                _; str.push(c)
            for str -> c; s.push(c)
            idx = end

        if s.at(idx) -> char('"')
            return Success(LexStringLit(id), idx + 1)
        s.popString()

    return null


fn {s Stack} lexNewline(idx Idx) Result
    data chars string 

    let loop = true
    while loop
        if s.at(idx) -> char(c) | c == ' ' || c == '\t' || c == '\n'
            idx = idx + 1
            chars.push(c)
        else if s.lexComment(idx) -> Success(_, end)
            idx = end
        else
            loop = false

    let lastNPos = -1
    for chars[..] -> i | chars.len() - i - 1 -> j | lastNPos == -1
        if chars[j] == '\n'; lastNPos = j
    if lastNPos == -1; return null

    let id = s.push('\0') + 1
    for chars[lastNPos + 1..] -> i; s.push(chars[i])
    return Success(LexNewline(id), idx)


fn {s Stack} lex(idx Idx) Result
    while s.at(idx) -> char(c) | c == ' ' || c == '\t'; idx = idx + 1
    if s.lexNewline(idx)   -> Success(l, end); return Success(l, end)
    if s.lexStringLit(idx) -> Success(l, end); return Success(l, end)
    if s.lexType(idx)      -> Success(l, end); return Success(l, end)
    if s.lexImport(idx)    -> Success(l, end); return Success(l, end)
    if s.lexKeyword(idx)   -> Success(l, end); return Success(l, end)
    if s.lexIdent(idx)     -> Success(l, end); return Success(l, end)
    if s.lexFloat(idx)     -> Success(l, end); return Success(l, end)
    if s.lexInt(idx)       -> Success(l, end); return Success(l, end)
    if s.lexDoubleSym(idx) -> Success(l, end); return Success(l, end)
    if s.lexSym(idx)       -> Success(l, end); return Success(l, end)
    if s.lexCharLit(idx)   -> Success(l, end); return Success(l, end)
    return null


fn {io Io, s Stack} writeLexeme(lexeme Lexeme)
    switch lexeme 
        LexChar(c)
            {io, "chr: "}.write()
            io.write(c)
        LexComment();
        LexSym(c)
            {io, "sym: "}.write()
            io.write(c)
        LexInt(n)
            {io, "int: "}.write()
            io.write(n)
        LexFloat(id)
            {io, "flt: "}.write()
            {io, s}.write(id)
        LexDoubleSym(a, b)
            {io, "sym: "}.write()
            io.write(a)
            io.write(b)
        LexImport(id)
            {io, "imp: "}.write()
            {io, s}.write(id)
        LexImportC(id)
            {io, "imc: "}.write()
            {io, s}.write(id)
        LexIdent(id)
            {io, "idt: "}.write()
            {io, s}.write(id)
        LexKeyword(id)
            {io, "kwd: "}.write()
            {io, s}.write(id)
        LexType(id)
            {io, "typ: "}.write()
            {io, s}.write(id)
        LexStringLit(id)
            {io, "str: "}.write()
            {io, s}.write(id)
        LexCharLit(c)
            {io, "chr: "}.write()
            io.write('\'')
            switch c
                '\t'; {io, "\\t"}.write()
                '\0'; {io, "\\0"}.write()
                '\n'; {io, "\\n"}.write()
                '\''; {io, "\\'"}.write()
                '\\'; {io, "\\\\"}.write()
                _;     io.write(c)
            io.write('\'')
        LexNewline(id)
            {io, "nln: "}.write()
            while s.at(id) -> char(c)
                switch c
                    '\n'; io.write('n')
                    '\t'; io.write('t')
                    ' '; io.write('s')
                id = id + 1
        _; print("<unknown lexeme>")


fn {io Io} writeTextPos(idx Idx, line i64, column i64)
    io.write(i64(idx))
    io.write(':')
    io.write(line)
    io.write(':')
    io.write(column)



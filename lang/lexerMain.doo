module lexerMain

import ../std/io
import ../std/strings

import lexer

fn {io Io} main() 
    data stack Stack 
    while io.read() -> char(c)
        stack.push(c)

    data indentStack [string]
    indentStack.push()

    let idx = 0
    let line = 1
    let column = 0
    while stack.lex(idx) -> Success(lexeme, end)
        for [idx .. end] -> i
            let char(c) = stack.at(i)
            column = column + 1
            if c == '\n'
                line = line + 1
                column = 0

        if      lexeme -> LexComment()
        else if lexeme -> LexNewline(id)
            data indent string 
            {stack, indent}.read(id)

            io.writeTextPos(idx, line, column)
            if indent == indentStack[indentStack.len() - 1]
                {io, "\tind: N"}.writeLn()
            else if {indent, indentStack[indentStack.len() - 1]}.isPrefix()
                {io, "\tind: I"}.writeLn()
                indentStack[indentStack.push()] = indent
            else 
                {io, "\tind: N"}.writeLn()
                while indent != indentStack[indentStack.len() - 1]
                    if indentStack.len() == 1
                        {io, "\tINDENT ERRROR"}.writeLn()
                        return

                    indentStack.pop()
                    io.writeTextPos(idx, line, column)
                    {io, "\tind: D"}.writeLn()
        else
            io.writeTextPos(idx, line, column)
            io.write('\t')
            {io, stack}.writeLexeme(lexeme)
            io.write('\n')

        idx = end

    if stack.at(idx) -> char(c) 
        print("lex error at ", column)




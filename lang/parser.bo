module parser

import lexer
import ../std/strings


type Operator {
    OpPlus()
    OpMinus()
    OpTimes()
    OpDivide()
    OpModulo()
    OpLT()
    OpGT()
    OpLTEq()
    OpGTEq()
    OpEqEq()
    OpOrOr()
    OpAndAnd()
    OpNotEq()
    OpNot()
}

fn string(op Operator) string
    switch op
        OpPlus  ; return "+"
        OpMinus ; return "-"
        OpTimes ; return "*"
        OpDivide; return "/"
        OpModulo; return "%"
        OpLT    ; return "<"
        OpGT    ; return ">"
        OpLTEq  ; return "<="
        OpGTEq  ; return ">="
        OpEqEq  ; return "=="
        OpOrOr  ; return "||"
        OpAndAnd; return "&&"
        OpNotEq ; return "!="
        OpNot   ; return "!"


type Expr {
    ExprIdent (string)
    ExprInt   (i64)
    ExprFloat (f64)
    ExprInfix (Operator, Expr, Expr)
}

fn string(e Expr) string
    switch e
        ExprIdent(str); return "ident: " + str
        ExprInt(n)    ; return "int: " + string(n)


type Node {
    NodeFail()
    NodeEmpty()
    NodeInt(i64)
    NodeExpr_(string, Node, Node)
    NodeExpr(i64, Node)
    NodeOp(string)
}

fn string(n Node) string
    switch(n)
        NodeFail();           return "NodeFail"
        NodeEmpty();          return "NodeEmpty"
        NodeInt(n);           return "(NodeInt " + string(n) + ")"
        NodeExpr(i, n);       return "(NodeExpr " + string(i) + " " + string(n) + ")"
        NodeExpr_(s, n1, n2); return "(NodeExpr_ " + s + " " + string(n1) + " " + string(n2) + ")"
        _; return "Node"


type ParseResult (Node, [Token])

fn string(p ParseResult) string
    switch p
        (NodeFail, _); return "Parse fail"
        (node, ts);    return "Parse: " + string(node)


fn parseEpsilon(tokens [Token]) ParseResult
    return ParseResult(NodeEmpty(), tokens)


fn parseSequence(tokens [Token], fns [ fn([Token])ParseResult ]) ([Node], [Token])
    let ns = :[Node]()

    for [i] fns
        switch fns[i](tokens)
            (NodeFail(), _); return ([], [])
            (n, ts)
                tokens = ts
                ns <- n

    return (ns, tokens)


fn parseInt(tokens [Token]) ParseResult
    switch tokens
        TokInt(n) -> ts; return (NodeInt(n), ts)
        _              ; return (NodeFail(), [])


fn parseOperator(tokens [Token]) ParseResult
    switch tokens
        TokOp(op) -> ts; return (NodeOp(op), ts)
        _              ; return (NodeFail(), [])


fn parseExpr_(tokens [Token]) ParseResult
    let (ns, ts) = parseSequence(tokens, [parseOperator, parseExpr, parseExpr_])
    if ns: NodeOp(s) -> nodeExpr -> nodeExpr_ -> []
        let n = NodeExpr_(s, nodeExpr, nodeExpr_)
        return ParseResult(n, ts)
    
    return parseEpsilon(tokens)


fn parseExpr(tokens [Token]) ParseResult
    let (ns, ts) = parseSequence(tokens, [parseInt, parseExpr_])
    if ns: NodeInt(n) -> nodeExpr_ -> []
        return ParseResult(NodeExpr(n, nodeExpr_), ts)

    return ParseResult(NodeFail(), :[Token]())



module lexer

import ../../std/io
import ../../std/strings
import ../../std/assert

type Pos (row i64, col i64)

type PosString (s string, pos Pos)

fn Drop(str PosString, num i64) PosString
    while str.s.at(0) -> *char(c) | num > 0
        if c == '\n'
            str.pos.col = 0
            str.pos.row = str.pos.row + 1
        else
            str.pos.col = str.pos.col + 1
        ${ $str.m0++; }
        num = num - 1
    return str

fn Take(str PosString, num i64) PosString
    str.s = take(str.s, num)
    return str

fn {str PosString} At(idx i64) (null | char)
    if idx >= 0 && idx < len(str.s)
        return conv(str.s[idx])
    return null


type Token (
    Ident(PosString)
    | Keyword(PosString)
    | Integer(PosString)
    | Floating(PosString)
    | Newline(PosString)
    | Symbol(PosString)
    | Char(PosString)
    | String(PosString)
    | CEmbed(PosString)
    | Import(PosString)
    | Include(PosString)
    | Link(PosString)
    | Comment()
)

type Result ( Fail() | Success(Token, PosString) )


fn lexIdent(str PosString) Result
    if str.At(0) -> *char(c) | isAlpha(c)
        let idx = 0
        while str.At(idx) -> *char(c) | isAlpha(c) || isDigit(c) || c == '_'
            idx = idx + 1
        return Success(
            Ident(Take(str, idx))
            Drop(str, idx)
        )
    return Fail()


fn lexImport(str PosString) Result
    if lexIdent(str) -> Success(Ident(ps), rest) | (ps:PosString).s == "import"
        str = rest
    else; return Fail()

    let idx = 0
    while str.At(idx) -> *char(c) | c != '\n'
        idx = idx + 1

    return Success(
        Import(Take(str, idx))
        Drop(str, idx)
    )


fn lexInclude(str PosString) Result
    if lexIdent(str) -> Success(Ident(ps), rest) | (ps:PosString).s == "include"
        str = rest
    else; return Fail()

    let idx = 0
    while str.At(idx) -> *char(c) | c != '\n'
        idx = idx + 1

    return Success(
        Include(Take(str, idx))
        Drop(str, idx)
    )

fn lexLink(str PosString) Result
    if lexIdent(str) -> Success(Ident(ps), rest) | (ps:PosString).s == "link"
        str = rest
    else; return Fail()

    let idx = 0
    while str.At(idx) -> *char(c) | c != '\n'
        idx = idx + 1

    return Success(
        Link(Take(str, idx))
        Drop(str, idx)
    )


fn lexComment(str PosString) Result
    if str.At(0) -> *char('/') | str.At(1) -> *char('/')
        while str.At(0) -> *char(c) | c != '\n'
            str = Drop(str, 1)
        return Success(Comment(), str)
    return Fail()


fn lexKeyword(str PosString) Result
    let keywords = [
        "module"
        "type"
        "fn"
        "for"
        "if"
        "else"
        "switch"
        "while"
        "return"
        "data"
        "const"
        "let"
        "null"
        "true"
        "false"
        "string"
        "bool"
        "char"
        "i8"
        "i16"
        "i32"
        "i64"
        "u8"
        "f32"
        "f64"
        "table"
        "integer"
    ]
    if lexIdent(str) -> Success(Ident(ps), rest)
        for keywords -> keyword
            if keyword == ps.s
                return Success(Keyword(ps), rest)
    return Fail()


fn lexSymbol(str PosString) Result
    let symbols = [ "..", "->", "==", "!=", "<=", ">=", "+=", "||", "&&", "::"]
    let singles = "[]{}()<>|.,=+-*/%_:;!"
    for symbols -> symbol
        let x = Take(str, len(symbol))
        if x.s == symbol
            return Success(Symbol(x), Drop(str, len(symbol)))
    for singles -> symbol
        if str.At(0) -> *char(c) | c == symbol
            return Success(Symbol(Take(str, 1)), Drop(str, 1))
    return Fail()


fn lexInteger(str PosString) Result
    if str.At(0) -> *char(c) | isDigit(c)
        let idx = 0
        while str.At(idx) -> *char(c) | isDigit(c)
            idx = idx + 1
        return Success(Integer(Take(str, idx)), Drop(str, idx))
    return Fail()


fn lexFloating(str PosString) Result
    if str.At(0) -> *char(c) | isDigit(c)
    else; return Fail()

    let idx = 0
    let dot = false
    while str.At(idx) -> *char(c) | isDigit(c) || c == '.' && !dot
        idx = idx + 1
        if c == '.'; dot = true
    if str.At(idx) -> *char('.'); return Fail()

    if dot
        return Success(Floating(Take(str, idx)), Drop(str, idx))
    return Fail()



fn lexNewline(str PosString) Result
    fn lexComment(str PosString, idx i64) (null | i64)
        if str.At(idx) -> *char('/') | str.At(idx + 1) -> *char('/')
            idx = idx + 2
        else; return null
        while str.At(idx) -> *char(c) | c != '\n'
            idx = idx + 1
        return conv(idx)

    fn lexSpaceChar(str PosString, idx i64) (null | i64)
        if str.At(idx) -> *char(c) | c == '\n' || c == '\t' || c == ' '
            return conv(idx + 1)
        return null

    fn lex(str PosString, idx i64) (null | i64)
        if lexComment(str, idx) -> *i64(i); return conv(i)
        if lexSpaceChar(str, idx) -> *i64(i); return conv(i)
        return null

    if str.At(0) -> *char('\n')
    else; return Fail()

    let idx = 0
    while lex(str, idx) -> *i64(i)
        idx = i

    let spaces = Take(str, idx)
    let lastNewline = -1
    for spaces.s[..] -> i
        if spaces.s[i] == '\n'; lastNewline = i
    assert(lastNewline > -1)

    return Success(
        Newline(Drop(spaces, lastNewline + 1))
        Drop(str, idx)
    )


fn lexCEmbed(str PosString) Result
    if str.At(0) -> *char('$') | str.At(1) -> *char('{')
    else; return Fail() 

    str = Drop(str, 1)
    
    let idx = 1
    let level = 1
    while str.At(idx) -> *char(c) | level > 0
        switch c
            '{'; level = level + 1
            '}'; level = level - 1
            _;
        idx = idx + 1
    if level != 0
        return Fail()

    data result [char]
    for Take(str, idx).s -> c
        switch c
            '\n'; result += [char(31)]
            _   ; result += [c]

    let str2 = str
    str2.s = string(result)

    return Success(
        CEmbed(str2)
        Drop(str, idx)
    )




fn lexCharLiteral(str PosString) Result
    if Take(str, 4).s -> ['\'', '\\', c, '\'']
        switch c
            'n'; return Success(Char(Take(str, 4)), Drop(str, 4))
            't'; return Success(Char(Take(str, 4)), Drop(str, 4))
            '0'; return Success(Char(Take(str, 4)), Drop(str, 4))
            '\\'; return Success(Char(Take(str, 4)), Drop(str, 4))
            '\''; return Success(Char(Take(str, 4)), Drop(str, 4))
            _;

    switch Take(str, 3).s
        ['\'', '\'', '\''];
        ['\'', c, '\'']; return Success(Char(Take(str, 3)), Drop(str, 3))
        _;
        
    return Fail()


fn lexStringLiteral(str PosString) Result
    if str.At(0) -> *char('"')
        let idx = 1
        while str.At(idx) -> *char(c) | c != '"' && c != '\n' // comment
            idx = idx + 1

        switch str.At(idx)
            null;               return Fail()
            *char(c) | c != '"'; return Fail()
            _;

        return Success(
            String(Drop(Take(str, idx), 1))
            Drop(str, idx + 1)
        )
    
    return Fail()

    

fn lex(str PosString) Result
    while str.At(0) -> *char(c) | c == ' ' || c == '\t'
        str = Drop(str, 1)

    if lexNewline(str)       -> Success(token, rest); return Success(token, rest)
    if lexImport(str)        -> Success(token, rest); return Success(token, rest)
    if lexInclude(str)       -> Success(token, rest); return Success(token, rest)
    if lexLink(str)          -> Success(token, rest); return Success(token, rest)
    if lexCharLiteral(str)   -> Success(token, rest); return Success(token, rest)
    if lexStringLiteral(str) -> Success(token, rest); return Success(token, rest)
    if lexFloating(str)      -> Success(token, rest); return Success(token, rest)
    if lexInteger(str)       -> Success(token, rest); return Success(token, rest)
    if lexKeyword(str)       -> Success(token, rest); return Success(token, rest)
    if lexIdent(str)         -> Success(token, rest); return Success(token, rest)
    if lexComment(str)       -> Success(token, rest); return Success(token, rest)
    if lexSymbol(str)        -> Success(token, rest); return Success(token, rest)
    if lexCEmbed(str)        -> Success(token, rest); return Success(token, rest)
    return Fail()



fn {t [string]} pop()
    ${
        $t->len--;
    }
        


fn {io Io, stack [string]} indent(key FileKey, str PosString)
    assert(len(stack) > 0)
    let entry = stack[len(stack) - 1]
    let minLen = len(entry)
    if len(str.s) < minLen
        minLen = len(str.s)
    assert(take(str.s, minLen) == take(entry, minLen))

    let posStr = string(str.pos.row) + ":" + string(str.pos.col) + ":"

    if str.s == entry
        io.fPutStrLn(key, posStr + "newline:")
    else if len(str.s) > len(entry)
        stack += [str.s]
        io.fPutStrLn(key, posStr + "indent:")
    else if len(entry) > len(str.s)
        io.fPutStrLn(key, posStr + "newline:")

        while len(entry) > len(str.s)
            io.fPutStrLn(key, posStr + "dedent:")
            stack.pop()
            assert(len(stack) > 0)
            entry = stack[len(stack) - 1]

        assert(str.s == entry)


fn lexFile(fileNameIn string, fileNameOut string)
    data io Io

    let key = io.openFile(fileNameOut)

    let str = PosString(io.readFile(fileNameIn), Pos(1, 1))

    data indentStack [string]
    indentStack += [""]

    while lex(str) -> Success(token, rest)
        switch token
            Ident(s);    io.fPutStrLn(key, string(s.pos.row) + ":" + string(s.pos.col) + ":ident: " + s.s)
            Keyword(s);  io.fPutStrLn(key, string(s.pos.row) + ":" + string(s.pos.col) + ":keyword: " + s.s)
            Integer(s);  io.fPutStrLn(key, string(s.pos.row) + ":" + string(s.pos.col) + ":integer: " + s.s)
            Floating(s); io.fPutStrLn(key, string(s.pos.row) + ":" + string(s.pos.col) + ":floating: " + s.s)
            Symbol(s);   io.fPutStrLn(key, string(s.pos.row) + ":" + string(s.pos.col) + ":symbol: " + s.s)
            Char(s);     io.fPutStrLn(key, string(s.pos.row) + ":" + string(s.pos.col) + ":char: " + s.s)
            String(s);   io.fPutStrLn(key, string(s.pos.row) + ":" + string(s.pos.col) + ":string: " + s.s)
            CEmbed(s);   io.fPutStrLn(key, string(s.pos.row) + ":" + string(s.pos.col) + ":cembed: " + s.s)
            Import(s);   io.fPutStrLn(key, string(s.pos.row) + ":" + string(s.pos.col) + ":import: " + s.s)
            Link(s);     io.fPutStrLn(key, string(s.pos.row) + ":" + string(s.pos.col) + ":link:"     + s.s)
            Include(s);  io.fPutStrLn(key, string(s.pos.row) + ":" + string(s.pos.col) + ":include: " + s.s)
            Newline(s);  {io, indentStack}.indent(key, s)
            Comment(); 

        str = rest

    io.closeFile(key)



fn main()
    lexFile("lang/lexer/lexer.doo", "lexer_out")
    

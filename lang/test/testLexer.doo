module testLexer 

import ../lexer


fn {s Stack, str string} checkStr(id Idx)
    data result string 
    {s, result}.read(id)
    let true = str == result


fn testLexInt()
    data s Stack "test2 123"
    let null = s.lexInt(0)
    let Success(LexInt(2), 5) = s.lexInt(4)


fn testLexIdent()
    data s Stack " test2 123"
    let null = s.lexIdent(0)
    let Success(LexIdent(n), 6)  = s.lexIdent(1)

    data result string
    {s, result}.read(n)
    let "test2" = result


fn testLexKeyword()
    data s Stack " return 2 for123"

    let null = s.lexKeyword(0)
    let Success(LexKeyword(id), 7) = s.lexKeyword(1)
    let null = s.lexKeyword(10)

    data result string
    {s, result}.read(id)
    let "return" = result

fn testLexSym()
    data s Stack " /ret?urn+35- % "
    let null = s.lexSym(0)
    let Success(LexSym('/'), 2) = s.lexSym(1)
    let null = s.lexSym(4)
    let Success(LexSym('+'), 10) = s.lexSym(9)


fn testLexDoubleSym() 
    data s Stack " ->ret..urn+35 ->% "

    let null = s.lexDoubleSym(0)
    let Success(LexDoubleSym('-', '>'), 3) = s.lexDoubleSym(1)
    let null = s.lexDoubleSym(7)
    let null = s.lexDoubleSym(5)
    let Success(LexDoubleSym('.', '.'), 8) = s.lexDoubleSym(6)


fn testLexNewline()
    data s Stack "stuff \n  moreStuff\n\t\t"
    let null = s.lexNewline(0)
    let Success(LexNewline(id0), 9)  = s.lexNewline(6)
    let null = s.lexNewline(7)
    let Success(LexNewline(id1), 21)  = s.lexNewline(18)

    {s, "  "}.checkStr(id0)
    {s, "\t\t"}.checkStr(id1)



fn testLexCharLit()
    data s Stack "stuff '\\n' more'\\0'na'j'df"
    let null = s.lexCharLit(0)
    let Success(LexCharLit('\n'), 10) = s.lexCharLit(6)
    let null = s.lexCharLit(14)
    let Success(LexCharLit('\0'), 19) = s.lexCharLit(15)
    let null = s.lexCharLit(16)
    let Success(LexCharLit('j'), 24) = s.lexCharLit(21)


fn testLexStringLit()
    data s Stack "s\"str+ 123\"\t more"
    let null = s.lexStringLit(0)
    let Success(LexStringLit(id0), _) = s.lexStringLit(1)
    let null = s.lexStringLit(6)
    {s, "str+ 123"}.checkStr(id0)


fn testLexEscaped()
    data s Stack "s\\n+ 13\\\\more"
    let null = s.lexEscaped(0)
    let Success(LexChar('\n'), 3) = s.lexEscaped(1)
    let null = s.lexEscaped(2)
    let Success(LexChar('\\'), 9) = s.lexEscaped(7)
    let null = s.lexEscaped(6)


fn testLexImport()
    data s Stack " import ../someDir/someFile; someNonsense"
    let null = s.lexImport(0)
    let Success(LexImport(id), 27) = s.lexImport(1)
    let null = s.lexImport(2)
    {s, "../someDir/someFile"}.checkStr(id)


fn testLexFunnyString()
    data s Stack "\"abStr98.<?\""
    let Success(x, y) = s.lexStringLit(0)


    data s2 Stack "\"stuff '\\n' more'\\0'na'j'df\""
    let Success(_, _) = s2.lexStringLit(0)

fn main() 
    testLexInt()
    testLexIdent()
    testLexKeyword()
    testLexSym()
    testLexDoubleSym() 
    testLexNewline()
    testLexCharLit()
    testLexStringLit()
    testLexEscaped()
    testLexImport()
    testLexFunnyString()
    print("testLexer passed")


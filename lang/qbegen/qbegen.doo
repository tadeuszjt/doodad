module qbegen

import ../../std/io

type StrId i64
type BodyId i64

type Name {
    Local(i64)
    Global(i64)
    Aggregate(i64)
    Block(i64)
}

type Type {
    Long()
    Word()
    Single()
    Double()
    Named(i64)
    Opaque(i64)
    StructId(i64)
    ArrayId(i64)
}

type Types (
    structTypes sparse[[Type]]
    arrayTypes  sparse[(i64, Type)]
)


type Stmt {
    StmtAdd(Name, Type, Name, Name)
    StmtCopy(Name, Type, i64)
    StmtCallVoid(StrId)
}

type Terminator {
    Ret(Name)
    RetVoid()
    Hlt()
}


fn {io Io} writeType(typ Type)
    switch typ
        Long(); io.write('l')
        Word(); io.write('w')
        Single(); io.write('s')
        Double(); io.write('d')


fn {io Io} writeName(name Name)
    switch name
        Local(id); io.write("%l", id)
        Global(id); io.write("$g", id)
        Block(id); io.write("@b", id)


fn {io Io} writeTerminator(terminator Terminator)
    io.write('\t')
    switch terminator
        Ret(name)
            io.write("ret ")
            io.writeName(name)
        RetVoid(); io.write("ret")
    io.write('\n')


fn {io Io, strings sparse[string]} writeStmt(stmt Stmt)
    io.write('\t')
    switch stmt
        StmtAdd(n1, t1, n2, n3)
            io.writeName(n1)
            io.write(" =")
            io.writeType(t1)
            io.write(" add ")
            io.writeName(n2)
            io.write(", ")
            io.writeName(n3)
        StmtCopy(name, typ, int)
            io.writeName(name)
            io.write(" =")
            io.writeType(typ)
            io.write(" copy ", int)
        StmtCallVoid(nameId)
            io.write("call $")
            io.write(strings[nameId])
            io.write("(sb 42)")
    io.write('\n')


fn {io Io} writeBlock(name Name)
    let Block(_) = name
    io.writeName(name)
    io.write('\n')


fn {io Io} writeFuncStart(retty Type)
    io.write("export\n")
    io.write("function ")
    io.writeType(retty)
    io.write(" $main() {\n")


fn {io Io} writeFuncEnd()
    io.write("}\n")


fn {io Io, types Types} writeTypeDef(typ Type)
    io.write("type :fourFLoats = ")
    io.writeType(typ)
    io.write('\n')


fn {io Io} main()
    data strings sparse[string]
    let putcharId = strings.push()
    strings[putcharId] = "putchar"

    data types Types
    let structId = types.structTypes.push()
    for [0..3]; types.structTypes[structId].push()

    io.writeFuncStart(Word())
    io.writeBlock(Block(0))

    {io, strings}.writeStmt(StmtCopy(Local(0), Word(), 1))
    {io, strings}.writeStmt(StmtCopy(Local(1), Word(), 2))
    {io, strings}.writeStmt(StmtAdd(Local(2), Word(), Local(0), Local(1)))
    {io, strings}.writeStmt(StmtCallVoid(putcharId))
    {io, strings}.writeStmt(StmtCallVoid(putcharId))
    {io, strings}.writeStmt(StmtCallVoid(putcharId))
    {io, strings}.writeStmt(StmtCallVoid(putcharId))
    {io, strings}.writeStmt(StmtCallVoid(putcharId))
    {io, strings}.writeStmt(StmtCallVoid(putcharId))

    {io, strings}.writeStmt(StmtCopy(Local(5), Word(), 0))
    io.writeTerminator(Ret(Local(5)))
    io.writeFuncEnd()



module qbegen

import ../../std/io

type Name {
    Local(@string)
    Global(i64)
    Aggregate(i64)
    Block(@string)
}

type Type {
    Long()
    Word()
    Single()
    Double()
    Named(i64)
    Opaque(i64)
    Struct(@[Type])
}

type Stmt {
    StmtAdd(Name, Type, Name, Name)
    StmtCopy(Name, Type, i64)
    StmtCallVoid(@string)
}

type Terminator {
    Ret(Name)
    RetVoid()
    Hlt()
}


fn {io Io} writeType(typ Type)
    switch typ
        Long(); io.write('l')
        Word(); io.write('w')
        Single(); io.write('s')
        Double(); io.write('d')


fn {io Io, strings sparse[string]} writeName(name Name)
    switch name
        Local(key); io.write("%", strings[key])
        Global(key); io.write("$", strings[key])
        Block(key); io.write("@", strings[key])


fn {io Io, strings sparse[string]} writeTerminator(terminator Terminator)
    io.write('\t')
    switch terminator
        Ret(name)
            io.write("ret ")
            {io, strings}.writeName(name)
        RetVoid(); io.write("ret")
    io.write('\n')


fn {io Io, strings sparse[string]} writeStmt(stmt Stmt)
    io.write('\t')
    switch stmt
        StmtAdd(n1, t1, n2, n3)
            {io, strings}.writeName(n1)
            io.write(" =")
            io.writeType(t1)
            io.write(" add ")
            {io, strings}.writeName(n2)
            io.write(", ")
            {io, strings}.writeName(n3)
        StmtCopy(name, typ, int)
            {io, strings}.writeName(name)
            io.write(" =")
            io.writeType(typ)
            io.write(" copy ", int)
        StmtCallVoid(nameId)
            io.write("call $")
            io.write(strings[nameId])
            io.write("(sb 42)")
    io.write('\n')


fn {io Io, strings sparse[string]} writeBlock(name Name)
    let Block(_) = name
    {io, strings}.writeName(name)
    io.write('\n')


fn {io Io} writeFuncStart(retty Type)
    io.write("export\n")
    io.write("function ")
    io.writeType(retty)
    io.write(" $main() {\n")


fn {io Io} writeFuncEnd()
    io.write("}\n")


fn {io Io} writeTypeDef(typ Type)
    io.write("type :fourFLoats = ")
    io.writeType(typ)
    io.write('\n')


fn {io Io} main()
    data strings sparse[string]
    let putcharId = strings.push("putchar")
    let blockId   = Block(strings.push("start"))
    let local0    = Local(strings.push("a"))
    let local1    = Local(strings.push("b"))
    let local2    = Local(strings.push("c"))
    let local5    = Local(strings.push("x"))

    io.writeFuncStart(Word())
    {io, strings}.writeBlock(blockId)

    {io, strings}.writeStmt(StmtCopy(local0, Word(), 1))
    {io, strings}.writeStmt(StmtCopy(local1, Word(), 2))
    {io, strings}.writeStmt(StmtAdd(local2, Word(), local0, local1))
    {io, strings}.writeStmt(StmtCallVoid(putcharId))
    {io, strings}.writeStmt(StmtCallVoid(putcharId))
    {io, strings}.writeStmt(StmtCallVoid(putcharId))

    {io, strings}.writeStmt(StmtCopy(local5, Word(), 0))
    {io, strings}.writeTerminator(Ret(local5))
    io.writeFuncEnd()



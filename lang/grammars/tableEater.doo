module tableEater


import ../../std/io
import ../../std/strings
import ../../std/chars
import ../../std/assert


fn {line string} readSpacesThenComma(start i64) i64
    let spaceCount = 0
    for line[start..] -> i | isSpace(line[i])
        spaceCount = spaceCount + 1
    return line.read(start + spaceCount, ',')

fn {line string} readReduceThenComma(start i64) (i64, i64)
    if line.read(start, 'r') -> n | n > start
        let (num, n2 | n2 > n) = line.read(n)
        let n3 | n3 > n2 = line.read(n2, ',')
        return (num, n3)
    return (0, 0)

fn {line string} readShiftThenComma(start i64) (i64, i64)
    if line.read(start, 's') -> n | n > start
        let (num, n2 | n2 > n) = line.read(n)
        let n3 | n3 > n2 = line.read(n2, ',')
        return (num, n3)
    return (0, 0)


fn {line string} readNumThenComma(start i64) (i64, i64)
    if line.read(start) -> (num, end) | end > start
        let end2 | end2 > end = line.read(end, ',')
        return (num, end2)
    return (0, 0)

fn {line string} readAccThenComma(start i64) i64
    let spaceCount = 0
    for line[start..] -> i | isSpace(line[i])
        spaceCount = spaceCount + 1

    if line.at(start + spaceCount) -> char('a')
        let char('a') = line.at(start + spaceCount + 0)
        let char('c') = line.at(start + spaceCount + 1)
        let char('c') = line.at(start + spaceCount + 2)

        for line[start + spaceCount + 3..] -> i | isSpace(line[i])
            spaceCount = spaceCount + 1
        let char(',') = line.at(start + spaceCount + 3)
        
        return start + spaceCount + 4

    return 0


fn {io Io} main()
    data line string

    while {io, line}.readLn()
        let n0 | n0 > 0         = line.read(0, ',')
        let (num, n1 | n1 > n0) = line.read(n0)
        let n2 | n2 > n1        = line.read(n1, ',')

        let idx = n2

        let spaceCount = 7

        io.write('[')

        while line[..][idx]
            if line.readSpacesThenComma(idx) -> end | end > idx
                let n0 = {io, "e()"}.write()
                for [n0 ..spaceCount]
                    io.write(' ')
                idx = end
            else if line.readReduceThenComma(idx) -> (num, end) | end > idx
                let n0 = {io, "r("}.write()
                let n1 = io.write(num)
                let n2 = {io, ")"}.write()
                for [n0 + n1 + n2..spaceCount]
                    io.write(' ')
                idx = end
            else if line.readShiftThenComma(idx) -> (num, end) | end > idx
                let n0 = {io, "s("}.write()
                let n1 = io.write(num)
                let n2 = {io, ")"}.write()
                for [n0 + n1 + n2..spaceCount]
                    io.write(' ')
                idx = end
            else if line.readNumThenComma(idx) -> (num, end) | end > idx
                let n0 = {io, "g("}.write()
                let n1 = io.write(num)
                let n2 = {io, ")"}.write()
                for [n0 + n1 + n2..spaceCount]
                    io.write(' ')
                idx = end
            else if line.readAccThenComma(idx) -> end | end > idx
                let n0 = {io, "a() "}.write()
                for [n0 ..spaceCount]
                    io.write(' ')
                idx = end
            else
                {"don't know"}.assert(false)

            if line[..][idx]; {io, ","}.write()

        {io, "]"}.writeLn()

        line.clear()


    print("table eater")

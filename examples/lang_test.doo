module langTest

import std/builtin
import std/store
import std/arithmetic
import std/compare
import std/tuple
import std/container
import std/assert
import std/sparse
import std/for
import std/print
import std/io
import std/option
import std/unordered


fn testArithmetic()
    let x = 1 + 2
    let 3 = x
    return

fn testFloats()
    let x = 1.0 + 2.0
    let 3.0 = x
    let 4.0 = 16.0 / 4.0


fn testIf()
    let x = 3
    if x == 3
        let true = true
    else
        let false = true


fn testSwitch()
    let x = 0
    switch 10
        x | x == 0; let true = false
        y | y == 10; x = 1
        _; let true = false

    let 1 = x


fn testTuple()
    let x = (1, true)
    let (1, true) = x
    if x -> (1, false)
        let true = false
    let (3, 4, 5) = (1, 2, 3) + (2, 2, 2)


fn testFnWithRef()
    fn f(a &I64)
        a = a + 1
    let x = 1
    f(&x)
    let 2 = x

    fn g(a &I64) &I64
        a = a + 1
        return &a
    let y = 34
    g(&y)
    let 35 = y
    g(&y) = 0
    let 0 = y

    fn h(a &(I64, I64))
        a = (1, 2)
    let z = (0, 0)
    h(&z)
    let (1, 2) = z


fn testTable()
    data table I64.Table

    let 0 = table.len
    table.push(1)
    table.push(2)
    table.push(3)

    let 3 = table.len
    let 1 = table.at(0)

    let 2 = table.at(1)
    builtin::builtinTableAt(&table, 1) = 3
    let 3 = builtin::builtinTableAt(&table, 1)

    let 3 = table.pop
    let 3 = table.pop
    let 1 = table.pop
    let 0 = table.len

    type Person (I64, Bool)
    //derives Person (store::store)
    acquires store{ Person } (a&, b)
        a.0 = b.0
        a.1 = b.1

    acquires first{ Person, I64 } (p&) -> &; return &p.0
    acquires second{ Person, Bool } (p&) -> &; return &p.1

    fn person(a I64, b Bool) Person
        let p : Person
        p.first = a
        p.second = b
        return p

    data t2 Person.Table

    t2.push( person(1, true) )
    t2.push( person(2, false) : Person )

    let 2 = t2.len

    t2.at(1) = person(3, true)
    let (3, true) = t2.pop

    data m3 I64.Table.Table
    let 0 = m3.len
    m3.grow
    m3[0].grow
    let 1 = m3[0].len


fn testSparse()
    data s1 I64.Sparse

    let 0 = s1.len
    let k1 = s1.sparse::insertZero
    let k2 = s1.sparse::insertZero
    let k3 = s1.sparse::insertZero
    let 3 = s1.len

    s1.at(k1) = 1
    s1.at(k2) = 2

    let k4 = s1.sparse::insert(4)

    s1.at(k3) = 3

    let 1 = s1.at(k1)
    let 2 = s1.at(k2)
    let 3 = s1.at(k3)
    let 4 = s1[k4]

    s1.sparse::delete(k2)
    let 3 = s1.len
    let 1 = s1.at(k1)
    let 3 = s1.at(k3)

    s1.sparse::delete(k3)
    let 2 = s1.len
    let 1 = s1.at(k1)


fn testPrint()
    data str Char.Table

    str.print('b')

    let 1 = str.len
    let 'b' = str[0]

    str.print("enis")

    let 5 = str.len

    data tupStr Char.Table


    fn{A, B} makeTuple2(a A, b B) Tuple{A, B}
        let t : Tuple{A, B}
        t.0 = a
        t.1 = b
        return t


    tupStr.print( makeTuple2(0, true) )

    ${ printf("%s\n", $tupStr.r0); }

    data table Tuple{I64, Bool}.Table

    table.push( (10, true) )
    table.push( (2, false) )
    table.push( (38-243, true) )
    table.push( (0, true) )

    data io Io
    io.stdout.print( &table )
    io.stdout.print('\n')


fn testUnordered()
    data u1 I64.Unordered

    let 0  = u1.len
    let k1 = u1.unordered::insert(1)
    let k2 = u1.unordered::insert(2)
    let k3 = u1.unordered::insert(3)

    let 3 = u1.len
    let 1 = u1.index(0)
    let 2 = u1.index(1)
    let 3 = u1.index(2)
    let 1 = u1[k1]
    let 2 = u1[k2]
    let 3 = u1[k3]

    u1.unordered::delete(k1)

    let 2 = u1.len
    let 3 = u1.index(0)
    let 2 = u1.index(1)
    let 2 = u1.at(k2)
    let 3 = u1.at(k3)

    data u2 I64.Table.Unordered

    let 0 = u2.len

    let key0 = u2.unordered::insertZero
    let key1 = u2.unordered::insertZero

    let 2 = u2.len

    u2[key0].push(23)
    u2[key0].push(24)

    let 2 = u2[key0].len
    let 0 = u2[key1].len

    data io Io
    io.stdout.print( &u2 )
    io.stdout.print('\n')



fn testOption()
    let o : I64.Option
    switch o
        none(); let true = true
        some(); let false = true
    let false = o.isSome()

    o = some(3)


    switch o
        x | x.isNone()
            let false = true

        some(3); let true = true
        _; ${ puts("didn't work"); }

    let true = o.isSome()

    o.fromSome = 4
    let 4 = o.fromSome
    let false = o.isNone

    let o1 = some(3)
    let o2 = some(4)
    let false = o1 == o2
    o2 = some(3)
    let true = o1 == o2
    o1 = none()
    let false = o1 == o2
    o2 = none()
    let true = o1 == o2


//fn testTree()
//    data t binaryTree::Tree{I64, Bool}
//    let 0 = t.len()
//    t.insert(1, true)
//    t.insert(2, false)
//    let 2 = t.Len::len()
//
//    let true = t.at(1)
//    let false = t.at(2)
//
//    let true = t.contains(1)
//    let true = t.contains(2)
//    let false = t.contains(3)
//
//    t.delete(1)
//    let 1 = t.len
//
//    let false = t.contains(1)
//    let true = t.contains(2)
//    let false = t.contains(3)
//
//    t.insert(3, true)
//    t.insert(1, true)
//
//    let true = t.contains(1)
//    let true = t.contains(2)
//    let true = t.contains(3)
//
//
//fn testMap()
//    data m Map{I64, Bool}
//    m.insert(1, true)
//    m.insert(2, false)
//    m.insert(3, true)
//
//    let 3 = m.len
//
//    let true = m[1]
//    let false = m[2]
//
//    let false = m.contains(0)
//
//
//fn testSlice()
//    data s Char.Table
//    s.push("a string") 
//
//
//fn testIo(io &Io)
//    io.stdout.push("success", '\n', (1, true):(I64, Bool), " ")
//
//    data table Tuple{I64, I64}.Table
//
//    for (0, 10) -> i
//        table.push((i * 2, i * 3))
//
//    io.stdout.push(&table)
//    return
//
//
//fn testArrayPattern()
//    data t1 I64.Table
//    t1.push(1, 2, 3)
//
//    let [1, x, 3] = t1
//    let 2 = x
//
//    if t1 -> [_, _]
//        let true = false
//
//    data t2 Char.Table
//    t2.push("abc")
//
//    let ['a', 'b', y] = t2
//    let 'c' = y
//
//    let ['a', 'b', 'c'] = "abc"
//    let ['a', 'b', 'c'] = t2.slice(0, t2.len)
//
//
//fn testArrayExpr()
//    data t1 Tuple{I64, Bool}.Table
//    t1 = [
//        (1, true)
//        (2, false)
//        (3, true)
//    ]
//
//    let 1 = t1[0].0
//    let false = t1[1].1
//
//    t1 = [
//        (4, false)
//        (5, false)
//    ]
//
//    let 2 = t1.len
//    let 5 = t1[1].0
//
//
//
//fn testBoolConditions()
//    let bool = true
//    if bool
//        let true = true
//    else
//        let false = true
//
//    type AlwaysTrue Tuple{}
//
//    let always : AlwaysTrue
//    fn Construct::construct(a AlwaysTrue) Bool
//        return true
//
//    if always
//        let true = true
//    else
//        let false = false
//
//    type OnlyThrice I64
//    fn Construct::construct(a I64) OnlyThrice
//        let b : OnlyThrice
//        ${ $b = $a; }
//        return b
//
//    fn Compare::equal(a OnlyThrice, b OnlyThrice) Bool
//        let c : Bool
//        ${ $c = $a == $b; }
//        return c
//
//    fn Store::store(a &OnlyThrice, b OnlyThrice)
//        ${ *$a = $b; }
//
//    fn Arithmetic::add(a OnlyThrice, b OnlyThrice) OnlyThrice
//        let c : OnlyThrice
//        ${ $c = $a + $b; }
//        return c
//
//    fn Construct::construct(a &OnlyThrice) Bool
//        if a == 3
//            return false
//        else
//            a = a + 1
//            return true
//
//    let count = 0
//    let onlyThrice : OnlyThrice
//    while &onlyThrice
//        count = count + 1
//    let 3 = count
//        
//
//
//fn testCharType()
//    let a = 'c'
//    let 'c' = a
//
//    type MyChar Char.Tuple
//
//    fn Store::store(a &MyChar, b MyChar); a.0 = b.0
//    fn Construct::construct(a Char) MyChar
//        let b : MyChar
//        b.0 = a
//        return b
//    fn Compare::equal(a MyChar, b MyChar) Bool; return a.0 == b.0
//
//    let m : MyChar = 'm'
//    let 'm':MyChar = m
//    if m -> 'n'
//        let true = false
//
//
fn testEnum()
    enum Enum {
        one
        two
        three
    }

    let e : Enum

    switch e
        _ | e.isOne; let true = true
        _ | e.isTwo; let false = true

    e.builtin::builtinSumReset(1)

    switch e
        _ | e.isOne; let true = false
        _ | e.isTwo; let true = true

    let true = three().isThree()

    enum Enum2 {
        en2One(I64)
        en2Two(I64, I64)
    }

    let true = en2Two(1, 2).isEn2Two
    let false = en2Two(1, 2).isEn2One
    let 1 = en2Two(1, 2). 1 . 0


fn testMacroTuple()
    tuple{T} MyTuple {
        one I64
        two T
    }

    let t : Bool.MyTuple
    t.one = 23

    let 23 = t.one

    let false = t.two
    t.two = true
    let true = t.two



fn testArrayAt()
    let array : Array{5, I64}
    array[2] = 3
    let 5 = array.len
    let 0 = array[1]
    let 3 = array[2]


fn main()
    testArithmetic()
    testFloats()
    testIf()
    testSwitch()
    testTuple()
    testFnWithRef()
    testTable()
    testSparse()
    testPrint()
//    testSumType()
    testArrayAt()
    testOption()
    testUnordered()
//    testTree()
//    testMap()
//    testSlice()
//    testArrayPattern()
//    testArrayExpr()
//    testBoolConditions()
//    testCharType()
    testEnum()
    testMacroTuple()

//    data io Io
//    testIo(&io)
    ${ puts("langTest success"); }
    return

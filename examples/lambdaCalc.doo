module lambdaCalc

import builtin/all
import std/io
import std/print
import std/sparse
import std/stack
import std/option
import std/char
import std/set



//Grammar
//
//    0 $accept: program $end
//
//    1 program: expr
//
//    2 expr: LAM VAR DOT expr
//    3     | app_expr
//
//    4 app_expr: simple_expr
//    5         | app_expr simple_expr
//
//    6 simple_expr: VAR
//    7            | '(' expr ')'
//
//
//Terminals, with rules where they appear
//
//    $end (0) 0
//    '(' (40) 7
//    ')' (41) 7
//    error (256)
//    VAR (258) 2 6
//    LAM (259) 2
//    DOT (260) 2
//
//
//Nonterminals, with rules where they appear
//
//    $accept (8)
//        on left: 0
//    program (9)
//        on left: 1
//        on right: 0
//    expr (10)
//        on left: 2 3
//        on right: 1 2 7
//    app_expr (11)
//        on left: 4 5
//        on right: 3 5
//    simple_expr (12)
//        on left: 6 7
//        on right: 4 5
//
//

//State 0
//
//    0 $accept: • program $end
//
//    VAR  shift, and go to state 1
//    LAM  shift, and go to state 2
//    '('  shift, and go to state 3
//
//    program      go to state 4
//    expr         go to state 5
//    app_expr     go to state 6
//    simple_expr  go to state 7
//
//
//State 1
//
//    6 simple_expr: VAR •
//
//    $default  reduce using rule 6 (simple_expr)
//
//
//State 2
//
//    2 expr: LAM • VAR DOT expr
//
//    VAR  shift, and go to state 8
//
//
//State 3
//
//    7 simple_expr: '(' • expr ')'
//
//    VAR  shift, and go to state 1
//    LAM  shift, and go to state 2
//    '('  shift, and go to state 3
//
//    expr         go to state 9
//    app_expr     go to state 6
//    simple_expr  go to state 7
//
//
//State 4
//
//    0 $accept: program • $end
//
//    $end  shift, and go to state 10
//
//
//State 5
//
//    1 program: expr •
//
//    $default  reduce using rule 1 (program)
//
//
//State 6
//
//    3 expr: app_expr •
//    5 app_expr: app_expr • simple_expr
//
//    VAR  shift, and go to state 1
//    '('  shift, and go to state 3
//
//    $default  reduce using rule 3 (expr)
//
//    simple_expr  go to state 11
//
//
//State 7
//
//    4 app_expr: simple_expr •
//
//    $default  reduce using rule 4 (app_expr)
//
//
//State 8
//
//    2 expr: LAM VAR • DOT expr
//
//    DOT  shift, and go to state 12
//
//
//State 9
//
//    7 simple_expr: '(' expr • ')'
//
//    ')'  shift, and go to state 13
//
//
//State 10
//
//    0 $accept: program $end •
//
//    $default  accept
//
//
//State 11
//
//    5 app_expr: app_expr simple_expr •
//
//    $default  reduce using rule 5 (app_expr)
//
//
//State 12
//
//    2 expr: LAM VAR DOT • expr
//
//    VAR  shift, and go to state 1
//    LAM  shift, and go to state 2
//    '('  shift, and go to state 3
//
//    expr         go to state 14
//    app_expr     go to state 6
//    simple_expr  go to state 7
//
//
//State 13
//
//    7 simple_expr: '(' expr ')' •
//
//    $default  reduce using rule 7 (simple_expr)
//
//
//State 14
//
//    2 expr: LAM VAR DOT expr •
//
//    $default  reduce using rule 2 (expr)

type String Char.Stack{16}
derives String (copy, destroy, push{Char}, makeSlice{Char}, len, pop{Char}, equal, compare,
    at{I64, Char}, forEnd, forAt{Char})


inst{P} print{P, String} (p&, str)
    p.print('"')
    for (0, str.len) -> i
        p.print(str[i])

    p.print('"')


enum Cell {
    accept(),
    shift(I64),
    reduce(I64),
    goto(I64),
    empty(),
}
derives Cell (builtin::destroy, builtin::copy)


enum Token {
    tokSym(Char),
    tokIdent(String),
    tokEnd(),
}
derives Token (builtin::copy, builtin::destroy, equal)


enum Calc {
    lam(String, Calc.Key),
    var(String),
    app(Calc.Key, Calc.Key),
}
derives Calc (copy, destroy)


enum Item {
    itemToken(Token),
    itemProg(Calc.Key),
    itemExpr(Calc.Key),
    itemAppExpr(Calc.Key),
    itemSimpExpr(Calc.Key),
    itemState(I64)
}
derives Item (copy, destroy)


inst{P} print{P, Cell} (p&, cell)
    switch cell
        accept();  p.print("accept")
        shift(n);  p.print3("shift(", n, ')')
        reduce(n); p.print3("reduce(", n, ')')
        goto(n);   p.print3("goto(", n, ')')
        empty();   p.print("empty")


inst{P} print::print{P, Token} (p&, token)
    switch token
        tokSym(c)  ; p.print3("tokSym(", c, ')')
        tokEnd(str); p.print("tokEnd()")
        tokIdent(str)
            p.print("tokIdent(")
            for str -> c
                p.print(c)
            p.print(')')


inst{P, K} print::print{P, Calc} (p&, calc)
    switch calc
        var(s); p.print3("var(", s, ')')
        app(k1, k2)
            p.print3("app(", k1, ", ")
            p.print2(k2, ')')
        lam(s, k)
            p.print("lam(")
            p.print(s) // TODO slice
            p.print(", ")
            p.print(k)
            p.print(')')


inst{P, K} print{P, Item} (p&, item)
    switch item
        itemToken(token); p.print3("itemToken(", token, ')')
        itemProg(k)     ; p.print3("itemProg(", k, ')')
        itemExpr(k)     ; p.print3("itemExpr(", k, ')')
        itemAppExpr(k)  ; p.print3("itemAppExpr(", k, ')')
        itemSimpExpr(k) ; p.print3("itemSimpExpr(", k, ')')
        itemState(k)    ; p.print3("itemState(", k, ')')


fn lexChar(str Char.Slice, idx I64) Char.Option
    if idx >= 0 && idx < str.len
        return some(str[idx])
    return none()


fn lexSym(str Char.Slice, idx I64) (Token, I64).Option
    if str.lexChar(idx) -> some(c)
        switch c
            '.';
            '\\';
            '(';
            ')';
            _; return none()

        return some( (tokSym(c), 1) )

    return none()


fn lexVar(str Char.Slice, idx I64) (Token, I64).Option
    if str.lexChar(idx) -> some(c) | isAlpha(c)
    else; return none()

    let tab : String

    while str.lexChar(idx) -> some(c) | isAlpha(c) || isDigit(c)
        idx = idx + 1
        tab.push(c)

    return (tokIdent(tab), tab.len).some


fn lex(str Char.Slice, idx I64) (Token, I64).Option
    let spacesLen = 0
    while str.lexChar(idx) -> some(c) | isSpace(c)
        idx = idx + 1
        spacesLen = spacesLen + 1

    if str.lexSym(idx) -> some(tok, len)
        return some( (tok, spacesLen + len) )
    if str.lexVar(idx) -> some(tok, len)
        return some( (tok, spacesLen + len) )
    return none()


fn{K} isRule(item Item) Bool
    switch item
        itemProg(_); return true
        itemExpr(_); return true
        itemAppExpr(_); return true
        itemSimpExpr(_); return true
        _; return false

// ┌────┬─────┬────┬────┬─────┬─────┬─────┬─────┬────┬────┬────────┬─────────┐
// │    │$end │VAR │LAM │'('  │')'  │err  │DOT  │prog│expr│app_expr│simp_expr│
// ├────┼─────┼────┼────┼─────┼─────┼─────┼─────┼────┼────┼────────┼─────────┤
// │ 0  │     │s1  │s2  │s3   │     │     │     │4   │5   │6       │7        │
// │ 1  │r6   │r6  │r6  │r6   │r6   │r6   │r6   │    │    │        │         │
// │ 2  │     │s8  │    │     │     │     │     │    │    │        │         │
// │ 3  │     │s1  │s2  │s3   │     │     │     │    │9   │6       │7        │
// │ 4  │s10  │    │    │     │     │     │     │    │    │        │         │
// │ 5  │r1   │r1  │r1  │r1   │r1   │r1   │r1   │    │    │        │         │
// │ 6  │r3   │s1  │r3  │s3   │r3   │r3   │r3   │    │    │        │11       │
// │ 7  │r4   │r4  │r4  │r4   │r4   │r4   │r4   │    │    │        │         │
// │ 8  │     │    │    │     │     │     │s12  │    │    │        │         │
// │ 9  │     │    │    │     │s13  │     │     │    │    │        │         │
// │ 10 │acc  │acc │acc │acc  │acc  │acc  │acc  │    │    │        │         │
// │ 11 │r5   │r5  │r5  │r5   │r5   │r5   │r5   │    │    │        │         │
// │ 12 │     │s1  │s2  │s3   │     │     │     │    │14  │6       │7        │
// │ 13 │r7   │r7  │r7  │r7   │r7   │r7   │r7   │    │    │        │         │
// │ 14 │r2   │r2  │r2  │r2   │r2   │r2   │r2   │    │    │        │         │
// └────┴─────┴────┴────┴─────┴─────┴─────┴─────┴────┴────┴────────┴─────────┘

fn{K} lookupCell(state I64, item Item) Cell
    let array = [
        [empty(),   shift(1),  shift(2),  shift(3),  empty(),   empty(),   empty(),   goto(4), goto(5),  goto(6), goto(7)],
        [reduce(6), reduce(6), reduce(6), reduce(6), reduce(6), reduce(6), reduce(6), empty(), empty(),  empty(), empty()],
        [empty(),   shift(8),  empty(),   empty(),   empty(),   empty(),   empty(),   empty(), empty(),  empty(), empty()],
        [empty(),   shift(1),  shift(2),  shift(3),  empty(),   empty(),   empty(),   empty(), goto(9),  goto(6), goto(7)],
        [shift(10), empty(),   empty(),   empty(),   empty(),   empty(),   empty(),   empty(), empty(),  empty(), empty()],
        [reduce(1), reduce(1), reduce(1), reduce(1), reduce(1), reduce(1), reduce(1), empty(), empty(),  empty(), empty()],
        [reduce(3), shift(1),  reduce(3), shift(3),  reduce(3), reduce(3), reduce(3), empty(), empty(),  empty(), goto(11)],
        [reduce(4), reduce(4), reduce(4), reduce(4), reduce(4), reduce(4), reduce(4), empty(), empty(),  empty(), empty()],
        [empty(),   empty(),   empty(),   empty(),   empty(),   empty(),   shift(12), empty(), empty(),  empty(), empty()],
        [empty(),   empty(),   empty(),   empty(),   shift(13), empty(),   empty(),   empty(), empty(),  empty(), empty()],
        [accept(),  accept(),  accept(),  accept(),  accept(),  accept(),  accept(),  empty(), empty(),  empty(), empty()],
        [reduce(5), reduce(5), reduce(5), reduce(5), reduce(5), reduce(5), reduce(5), empty(), empty(),  empty(), empty()],
        [empty(),   shift(1),  shift(2),  shift(3),  empty(),   empty(),   empty(),   empty(), goto(14), goto(6), goto(7)],
        [reduce(7), reduce(7), reduce(7), reduce(7), reduce(7), reduce(7), reduce(7), empty(), empty(),  empty(), empty()],
        [reduce(2), reduce(2), reduce(2), reduce(2), reduce(2), reduce(2), reduce(2), empty(), empty(),  empty(), empty()],
    ] : Cell.Array{11}.Array{15}

    let col = 0
    switch item:Item
        itemToken(tokEnd())    ; col = 0
        itemToken(tokIdent(_)) ; col = 1
        itemToken(tokSym('\\')); col = 2
        itemToken(tokSym('(')) ; col = 3
        itemToken(tokSym(')')) ; col = 4

        itemToken(tokSym('.')) ; col = 6
        itemProg(_)            ; col = 7
        itemExpr(_)            ; col = 8
        itemAppExpr(_)         ; col = 9
        itemSimpExpr(_)        ; col = 10

    return array[state][col]


fn{K} getItem(stack &Item.Table) Item
    let itemState(_) = stack.container::pop
    return stack.container::pop


fn reduceStack(ast &Sparse{Calc}, stack &Item.Table, production I64)
    let io : Io
    switch production
        0 // $accept: program $end
            assert(false) // unused

        1 // program: expr
            //io.stdout.printLn("-- program: expr")
            let itemExpr(key) = stack.getItem
            stack.container::push(itemProg(key))

        2 // expr: LAM VAR DOT expr
            //io.stdout.printLn("-- expr: LAM VAR DOT expr")
            let itemExpr(key)         = stack.getItem
            let itemToken(tokSym('.')) = stack.getItem
            let itemToken(tokIdent(s)) = stack.getItem
            let itemToken(tokSym('\\')) = stack.getItem

            let key2 = ast.sparse::insert(lam(s, key))
            stack.container::push(itemExpr(key2))
            
        3 // expr: app_expr
            //io.stdout.printLn("-- expr: app_expr")
            let itemAppExpr(key) = stack.getItem
            stack.container::push(itemExpr(key))

        4 // app_expr: simple_expr
            //io.stdout.printLn("-- app_expr: simple_expr")
            let itemSimpExpr(key) = stack.getItem
            stack.container::push(itemAppExpr(key))

        5 // app_expr: app_expr simple_expr
            //io.stdout.printLn("-- app_expr: app_expr simple_expr")
            let itemSimpExpr(k1) = stack.getItem
            let itemAppExpr(k2)  = stack.getItem

            let key = ast.sparse::insert(app(k2, k1))
            stack.container::push(itemAppExpr(key))

        6 // simple_expr: VAR
            //io.stdout.printLn("-- simple_expr: VAR")
            let itemToken(tokIdent(s)) = stack.getItem
            let key = ast.sparse::insert(var(s))
            stack.container::push(itemSimpExpr(key))

        7 // simple_expr: '(' expr ')'
            //io.stdout.printLn("-- simple_expr: '(' expr ')'")
            let itemToken(tokSym(')')) = stack.getItem
            let itemExpr(key)         = stack.getItem
            let itemToken(tokSym('(')) = stack.getItem
            stack.container::push(itemSimpExpr(key))


fn parse(ast &Sparse{Calc}, str Char.Slice) Calc.Key

    let tokens : Token.Table
    let idx = 0

    while str.slice(0, str.len).lex(idx) -> some(token, len)
        idx = idx + len
        tokens.container::push(token)

    tokens.container::push(tokEnd())

    let io : Io

    let stack : Item.Table = [itemState(0)]
    let tokIdx = 0

    //io.stdout.printLn("Starting parse")

    while true
        let cell : Cell

        //io.stdout.print3("stack: ", stack, '\n')

        switch stack[stack.len - 1]
            // lookup in the state table
            itemState(s)
                //io.stdout.print3("Reading a token: ", tokens[tokIdx], '\n')
                cell = lookupCell(s, itemToken(tokens[tokIdx]))

            // the stack has a rule which means we just reduced
            x | isRule(x)
                let itemState(s) = stack[stack.len - 2]
                cell = lookupCell(s, x)

        switch cell
            shift(s) // Push token onto stack, increase tokenIdx, push next state
                //io.stdout.print3("Shifting token ", tokens[tokIdx], '\n')
                stack.container::push(itemToken(tokens[tokIdx]))

                //io.stdout.print3("Entering state ", s, '\n')
                stack.container::push(itemState(s))
                tokIdx = tokIdx + 1
                if tokIdx >= tokens.len
                    tokIdx = tokens.len - 1

            reduce(production) // pop state, replace RHS of production with LHS
                //io.stdout.print3("reduce: ", production, '\n')
                ast.reduceStack(&stack, production)

            goto(s) // push next state
                //io.stdout.print3("Entering state ", s, '\n')
                stack.container::push(itemState(s))

            accept()
                io.stdout.printLn("accept")
                let itemToken(tokEnd()) = stack.getItem
                let itemProg(expr)      = stack.getItem
                return expr

            empty()
                ${ printf("parse error\n"); }
                assert(false)


fn freshVar(str String, used String.Set) String
    let s = str
    s.push('\'')
    while used.contains(s)
        s.push('\'')
    return s


fn freeVars(termKey Calc.Key) String.Set
    switch @Sparse{Calc}[termKey]
        var(s)     ; return [s]
        app(k1, k2); return k1.freeVars + k2.freeVars
        lam(s, k)  ; return k.freeVars - [s]


fn newExpr(expr Calc) Calc.Key
    return @Sparse{Calc}.sparse::insert(expr)


fn copyExpr(termKey Calc.Key) Calc.Key
    switch @Sparse{Calc}[termKey]
        var(s)     ; return newExpr(var(s))
        app(k1, k2); return newExpr(app(k1.copyExpr, k2.copyExpr))
        lam(s, k)  ; return newExpr(lam(s, k.copyExpr))


fn deleteExpr(termKey Calc.Key) Calc.Key
    switch @Sparse{Calc}[termKey]
        var(s);
        app(k1, k2)
            deleteExpr(k1)
            deleteExpr(k2)
        lam(s, k)
            deleteExpr(k)

    @Sparse{Calc}.sparse::delete(termKey)


fn{P} printExpr(p &P, termKey Calc.Key)
    switch @Sparse{Calc}[termKey]
        var(s)
            for s -> c
                p.print(c)
        app(k1, k2)
            switch @Sparse{Calc}[k1]
                var(s); p.printExpr(k1)
                app(k2, k3)
                    p.printExpr(k2)
                    p.print(' ')
                    p.printExpr(k3)
                lam(_, _)
                    p.print('(')
                    p.printExpr(k1)
                    p.print(')')

            p.print(' ')

            switch @Sparse{Calc}[k2]
                var(s); p.printExpr(k2)
                _
                    p.print('(')
                    p.printExpr(k2)
                    p.print(')')


        lam(s, k)
            p.print('(')
            p.print('\\')
            for s -> c; p.print(c)
            p.print('.')

            switch @Sparse{Calc}[k]
                lam(s2, k2)
                    p.print('\\')
                    for s2 -> c; p.print(c)
                    p.print('.')
                    p.printExpr(k2)
                _
                    p.printExpr(k)
                    
            p.print(')')


fn alphaConvert(termKey Calc.Key, old String, new String) Calc.Key
    switch @Sparse{Calc}[termKey]
        var(s) | s == old   ; return newExpr(var(new))
        var(s)              ; return newExpr(var(s))
        lam(s, k) | s == old; return newExpr(lam(new, alphaConvert(k, old, new)))
        lam(s, k)           ; return newExpr(lam(s,   alphaConvert(k, old, new)))
        app(k1, k2)         ; return newExpr(app(
                alphaConvert(k1, old, new),
                alphaConvert(k2, old, new)
            ))


fn substitute(termKey Calc.Key, str String, expr Calc.Key) Calc.Key
    switch @Sparse{Calc}[termKey]
        var(s) | s == str; return copyExpr(expr)
        var(s)           ; return newExpr(var(s))
        app(k1, k2)      ; return newExpr(app(substitute(k1, str, expr), substitute(k2, str, expr)))
        lam(s, k) | s == str
            return copyExpr(termKey)
        lam(s, k) | expr.freeVars.contains(s)
            let newVar = freshVar(s, k.freeVars + expr.freeVars)
            return newExpr(lam(newVar, substitute(termKey, str, alphaConvert(k, s, newVar))))
        lam(s, k)
            return newExpr(lam(s, substitute(k, str, expr)))


fn betaReduce(termKey Calc.Key) Calc.Key
    switch @Sparse{Calc}[termKey]
        app(k1, k2)
            switch @Sparse{Calc}[k1]
                lam(s, k); return substitute(k, s, k2)
                _        ; return newExpr(app(k1.betaReduce, k2.betaReduce))
        lam(s, k); return newExpr(lam(s, k.betaReduce))
        var(s)   ; return newExpr(var(s))


fn fullReduce(termKey Calc.Key) Calc.Key
    let expr = copyExpr(termKey)
    for (0, 7)
        let expr2 = expr.betaReduce
        expr.deleteExpr
        expr = expr2

    return expr

                
fn main(io Io)
    io.stdout.printLn("lambdaCalc")

    let ast : Sparse{Calc}
    let expr1 = ast.parse("(\x.\y.x y) (\a.\b.a) (\c.c)")

    with(&ast)
        let expr2 = fullReduce(betaReduce(expr1))

        io.stdout.printExpr(expr1)
        io.stdout.print('\n')
        io.stdout.printExpr(expr2)
        io.stdout.print('\n')

        deleteExpr(expr1)
        deleteExpr(expr2)
        io.stdout.printLn(@Sparse{Calc})

module graphicsTest

import std/io
import std/sfml/sfml
import std/rand
import std/sparse
import std/print
import std/option
import std/store
import std/builtin
import std/for
import std/assert
import std/arithmetic
import std/tuple
import std/container
import std/unordered
import std/convert


tuple Blob {
    position Vec2f
    velocity Vec2f
    quadKey  unordered::Key{Quad}
}
derives Blob (store)


fn setQuadPosition(quads &Quad.Unordered, key unordered::Key{Quad}, position Vec2f)
    quads[key][0] = (position + (-10.0, -10.0), black(), (0.0, 0.0))
    quads[key][1] = (position + (10.0, -10.0),  black(), (0.0, 0.0))
    quads[key][2] = (position + (10.0, 10.0),   black(), (0.0, 0.0))
    quads[key][3] = (position + (-10.0, -10.0), black(), (0.0, 0.0))
    quads[key][4] = (position + (10.0, 10.0),   black(), (0.0, 0.0))
    quads[key][5] = (position + (-10.0, 10.0),  black(), (0.0, 0.0))


fn main()
    data io Io
    io.stdout.print("graphics test\n")

    let rand:Rand
    let w:Window

    w.create()


//    data triangles Triangles
    data blobs Blob.Table
    data quads Quad.Unordered

    for (0, 1)
        let blob:Blob
        //blob.position = rand.vec2f()
        blob.position = (50.0, 50.0)
        blob.quadKey = quads.unordered::insertZero
        quads.setQuadPosition(blob.quadKey, blob.position)
        blobs.push(blob)

    io.stdout.print(quads)


    while w.isOpen()
//        let prevNs = time::getTimestampNs()
//
        while w.pollEvent() -> some(event)
            switch event
                closed(); w.close()
                //none();
                _;

        for (0, blobs.len) -> i
            blobs[i].position = blobs[i].position + blobs[i].velocity


//        let nextNs = time::getTimestampNs()
//
//        print("process time:", nextNs - prevNs)
//
//        let diff = nextNs - prevNs
//        //sleepNs(15600000 - diff)
//        
//
//        prevNs = time::getTimestampNs()
//
//        let (width, height) = w.getSize()
//        w.setViewFromRect(((0, 0), (conv(width), conv(height))))
        w.clearWindow(white())
        w.drawQuads(quads.Unordered::values)
        w.display()
//
//        nextNs = time::getTimestampNs()
//        print("render time: ", nextNs - prevNs)
//
    w.destroy()




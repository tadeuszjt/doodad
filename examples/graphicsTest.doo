module graphicsTest

// TODO need to sort this out
include <SFML/Graphics.h>

import std/io
import std/sfml/window
import std/sfml/texture
import std/rand
import std/sparse
import std/print
import std/option
import builtin/builtin
import builtin/for
import builtin/assert
import builtin/arithmetic
import builtin/tuple
import builtin/container
import std/unordered
import builtin/convert
import std/time
import builtin/destroy


tuple Blob {
    sprite     Quad,
    position   Vec2f,
    velocity   Vec2f,
    blobColour Colour
}
derives Blob (copy, builtin::destroy)
derives{P} Blob (print::print{P})


fn vec2f(rand &Rand, rect Rectf) Vec2f
    return (
        rand.uniform(rect.min.x, rect.max.x),
        rand.uniform(rect.min.y, rect.max.y)
    )

fn colour(rand &Rand) Colour
    return (
        convert(rand.uniform(0, 255)),
        convert(rand.uniform(0, 255)),
        convert(rand.uniform(0, 255)),
        255
    )


fn makeQuad(position Vec2f, colour Colour) Quad
    return [
        (position + (-10.0, -10.0), colour, (0.0, 0.0)),
        (position + (10.0, -10.0),  colour, (0.0, 0.0)),
        (position + (10.0, 10.0),   colour, (0.0, 0.0)),
        (position + (-10.0, -10.0), colour, (0.0, 0.0)),
        (position + (10.0, 10.0),   colour, (0.0, 0.0)),
        (position + (-10.0, 10.0),  colour, (0.0, 0.0))
    ]


fn main(io Io, rand Rand, w Window)
    io.stdout.print("graphics test\n")
    w.create(640, 480, "graphics test")

    let texture : Texture
    let blobs : Blob.Table

    for (0, 100)
        let blob:Blob
        blob.position = rand.vec2f( ( (0.0, 0.0), (500.0, 500.0) ) )
        blob.velocity = rand.vec2f( ( (-1.0, -1.0), (1.0, 1.0) ) )
        blob.blobColour   = rand.colour
        blobs.push(blob)

    let m
    m[0][0] = 1
    m[1][1] = 1
    m[2][2] = 1

    while w.isOpen()
        let prevNs = time::getTimestampNs()

        while w.pollEvent() -> some(event)
            switch event
                closed(); w.close()
                _;

        for (0, blobs.len) -> i
            blobs[i].position = blobs[i].position + blobs[i].velocity
            blobs[i].sprite   = makeQuad(blobs[i].position, blobs[i].blobColour)


        let (width, height) = w.getSize()
        w.setViewFromRect(((0.0, 0.0), (convert(width), convert(height))))
        w.clearWindow(white())

        w.drawQuads(blobs.sprite, &texture, m)
        w.display()

        let nextNs = time::getTimestampNs()
        let diff = nextNs - prevNs
        sleepNs(16 * 1000 * 1000 - diff)

    blobs.builtin::destroy
    w.destroy()




module graphicsTest

//import std/io
//import std/sfml/sfml
//import std/rand
//import std/table
//import std/sparse
//import std/time


//type Blob {
//    position    Vec2f
//    velocity    Vec2f
//    triangleKey Key[I64]
//}
//
//type Triangles (
//    vertexKeys Sparse[I64]
//    vertexes   Table[Vertex]
//)
//
//fn {t Triangles} addTriangle(position Vec2f) Key[I64]
//    let key = t.vertexes.len()
//    t.vertexes.push( (position + (0, -10),  green(),   (0, 0)) )
//    t.vertexes.push( (position + (-10, 10), green(), (0, 0)) )
//    t.vertexes.push( (position + (10, 10),  green(),  (0, 0)) )
//    return t.vertexKeys.insert(key)
//
//
//fn {t Triangles} setTrianglePosition(key Key[I64], pos Vec2f)
//    let index = t.vertexKeys.get(key)
//    let {p, _, _} = t.vertexes.at(index + 0) in; p = pos + (0, -10)
//    let {p, _, _} = t.vertexes.at(index + 1) in; p = pos + (-10, 10)
//    let {p, _, _} = t.vertexes.at(index + 2) in; p = pos + (10, 10)
//
//
//fn {rand Rand} vec2f() Vec2f
//    return (rand.f32(0, 5000), rand.f32(0, 5000))
//
//fn {rand Rand} vec2f(min Vec2f, max Vec2f) Vec2f
//    return (rand.f32(min.x, max.x), rand.f32(min.y, max.y))
//
//
fn main()
    data io Io
    return
//    let rand:Rand
//    let w:Window
//
//    w.create()
//
//    data triangles Triangles
//    data blobs     Table[Blob]
//
//    for (0, 100000)
//        let blob:()Blob
//        blob.position    = rand.vec2f()
//        blob.velocity    = rand.vec2f( (-0.5, -0.5), (0.5, 0.5) )
//        blob.triangleKey = triangles.addTriangle( blob.position )
//        blobs.push(blob)
//
//
//    while w.isOpen()
//
//        let prevNs = time::getTimestampNs()
//
//        while w.pollEvent() -> Just(event)
//            switch event
//                Closed(); w.close()
//                None();
//
//        for blobs -> {p, v, k}
//            p = p + v
//            triangles.setTrianglePosition(k, p)
//
//        let nextNs = time::getTimestampNs()
//
//        print("process time:", nextNs - prevNs)
//
//        let diff = nextNs - prevNs
//        //sleepNs(15600000 - diff)
//        
//
//        prevNs = time::getTimestampNs()
//
//        let (width, height) = w.getSize()
//        w.setViewFromRect(((0, 0), (conv(width), conv(height))))
//        w.clearWindow(white())
//        {w, triangles.vertexes}.drawPrimitives()
//        w.display()
//
//        nextNs = time::getTimestampNs()
//        print("render time: ", nextNs - prevNs)
//
//    w.destroy()
//


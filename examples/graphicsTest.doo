module graphicsTest

// TODO need to sort this out
include <SFML/Graphics.h>

import builtin/all
import std/io
import std/sfml/window
import std/sfml/texture
import std/rand
import std/sparse
import std/print
import std/option
import std/unordered
import std/time


tuple Blob {
    sprite     Quad,
    position   Vec2f,
    velocity   Vec2f,
    blobColour Colour
}
derives Blob (copy, builtin::destroy)
derives{P} Blob (print::print{P})


fn randColour() Colour
    return @Rand.uniform((0, 0, 0, 255), (255, 255, 255, 255))


fn makeQuad(position Vec2f, colour Colour) Quad
    return [
        (position + (-10.0, -10.0), colour, (0.0, 0.0)),
        (position + (10.0, -10.0),  colour, (0.0, 0.0)),
        (position + (10.0, 10.0),   colour, (0.0, 0.0)),
        (position + (-10.0, -10.0), colour, (0.0, 0.0)),
        (position + (10.0, 10.0),   colour, (0.0, 0.0)),
        (position + (-10.0, 10.0),  colour, (0.0, 0.0))
    ]


fn main(io Io, rand Rand, w Window)
    with(&io, &rand)
        @Io.print("graphics test\n")

        w.create(640, 480, "graphics test")

        let texture : Texture
        let blobs : Blob.Table

        for (0, 100)
            let blob:Blob
            blob.position    = @Rand.uniform( (0.0, 0.0), (500.0, 500.0) )
            blob.velocity    = @Rand.uniform( (-1.0, -1.0), (1.0, 1.0) )
            blob.blobColour  = randColour()
            blobs.push(blob)

        let m = [
            [1, 0, 0],
            [0, 1, 0],
            [0, 0, 1],
        ]

        while w.isOpen()
            let prevNs = time::getTimestampNs()

            while w.pollEvent() -> some(event)
                switch event
                    closed(); w.close()
                    _;

            for (0, blobs.len) -> i
                blobs[i].position = blobs[i].position + blobs[i].velocity
                blobs[i].sprite   = makeQuad(blobs[i].position, blobs[i].blobColour)


            let (width, height) = w.getSize()
            w.setViewFromRect(((0.0, 0.0), (width, height).convert))
            w.clearWindow(white())

            w.drawQuads(blobs.sprite, &texture, m)
            w.display()

            let nextNs = time::getTimestampNs()
            let diff = nextNs - prevNs
            sleepNs(16 * 1000 * 1000 - diff)

        blobs.builtin::destroy
        w.destroy()




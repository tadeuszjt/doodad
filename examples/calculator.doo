module calculator

import builtin/all
import std/io
import std/print
import std/option
import std/char

// Parsing mode: LALR1_BY_SLR(1).
// 
// Grammar:
// 
//      0. $accept -> E
//     -----------------
//      1. E -> E '+' T
//      2.    | E '-' T
//      3.    | T
//      4. T -> T '*' D
//      5.    | D
//      6. D -> D '/' F
//      7.    | F
//      8. F -> NUMBER
//      9.    | '(' E ')'
// 
// LALR1_BY_SLR(1) parsing table:
// 
// ┌────┬─────┬─────┬─────┬─────┬─────┬─────┬────────┬─────┬────┬────┬────┬────┐
// │    │ '+' │ '-' │ '*' │ '/' │ '(' │ ')' │ NUMBER │ $   │ E  │ T  │ D  │ F  │
// ├────┼─────┼─────┼─────┼─────┼─────┼─────┼────────┼─────┼────┼────┼────┼────┤
// │ 0  │     │     │     │     │ s6  │     │ s5     │     │ 1  │ 2  │ 3  │ 4  │
// │ 1  │ s7  │ s8  │     │     │     │     │        │ acc │    │    │    │    │
// │ 2  │ r3  │ r3  │ s10 │     │     │ r3  │        │ r3  │    │    │    │    │
// │ 3  │ r5  │ r5  │ r5  │ s12 │     │ r5  │        │ r5  │    │    │    │    │
// │ 4  │ r7  │ r7  │ r7  │ r7  │     │ r7  │        │ r7  │    │    │    │    │
// │ 5  │ r8  │ r8  │ r8  │ r8  │     │ r8  │        │ r8  │    │    │    │    │
// │ 6  │     │     │     │     │ s6  │     │ s5     │     │ 14 │ 2  │ 3  │ 4  │
// │ 7  │     │     │     │     │ s6  │     │ s5     │     │    │ 9  │ 3  │ 4  │
// │ 8  │     │     │     │     │ s6  │     │ s5     │     │    │ 16 │ 3  │ 4  │
// │ 9  │ r1  │ r1  │ s10 │     │     │ r1  │        │ r1  │    │    │    │    │
// │ 10 │     │     │     │     │ s6  │     │ s5     │     │    │    │ 11 │ 4  │
// │ 11 │ r4  │ r4  │ r4  │ s12 │     │ r4  │        │ r4  │    │    │    │    │
// │ 12 │     │     │     │     │ s6  │     │ s5     │     │    │    │    │ 13 │
// │ 13 │ r6  │ r6  │ r6  │ r6  │     │ r6  │        │ r6  │    │    │    │    │
// │ 14 │ s7  │ s8  │     │     │     │ s15 │        │     │    │    │    │    │
// │ 15 │ r9  │ r9  │ r9  │ r9  │     │ r9  │        │ r9  │    │    │    │    │
// │ 16 │ r2  │ r2  │ s10 │     │     │ r2  │        │ r2  │    │    │    │    │
// └────┴─────┴─────┴─────┴─────┴─────┴─────┴────────┴─────┴────┴────┴────┴────┘

enum Cell {
    accept(),
    shift(I64),
    reduce(I64),
    goto(I64),
    empty(),
}
derives Cell (builtin::destroy, builtin::copy)


inst{P} print{P, Cell} (p&, cell)
    switch cell
        accept(); p.print("accept")
        shift(n)
            p.print("shift(")
            p.print(n)
            p.print(")")
        reduce(n)
            p.print("reduce(")
            p.print(n)
            p.print(")")
        goto(n)
            p.print("goto(")
            p.print(n)
            p.print(")")
        empty(); p.print("empty")

enum Item {
    tokInt(I64),
    tokSym(Char),
    tokEnd(),
    state(I64),
    e_(I64),
    e(I64),
    t(I64),
    d(I64),
    f(I64),
}
derives Item (destroy, copy)

inst{P} print{P, Item} (p&, item)
    switch item
        tokInt(n)
            p.print("tokInt(")
            p.print(n)
            p.print(")")
        tokSym(c)
            p.print("tokSym(")
            p.print(c)
            p.print(")")
        tokEnd()
            p.print("tokEnd()")
        state(n)
            p.print("state(")
            p.print(n)
            p.print(")")
        e_(n)
            p.print("e_(")
            p.print(n)
            p.print(")")
        e(n)
            p.print("e(")
            p.print(n)
            p.print(")")
        t(n)
            p.print("t(")
            p.print(n)
            p.print(")")
        d(n)
            p.print("d(")
            p.print(n)
            p.print(")")
        f(n)
            p.print("f(")
            p.print(n)
            p.print(")")

fn lookupCell(state I64, item Item) Cell
    let array = [
        [empty(), empty()  , empty()  , empty()  , shift(6), empty()  , shift(5), empty()  , goto(1) , goto(2) , goto(3) , goto(4) ],
        [shift(7), shift(8) , empty()  , empty()  , empty() , empty()  , empty() , accept() , empty() , empty() , empty() , empty() ],
        [reduce(3), reduce(3), shift(10), empty()  , empty() , reduce(3), empty() , reduce(3), empty() , empty() , empty() , empty() ],
        [reduce(5), reduce(5), reduce(5), shift(12), empty() , reduce(5), empty() , reduce(5), empty() , empty() , empty() , empty() ],
        [reduce(7), reduce(7), reduce(7), reduce(7), empty() , reduce(7), empty() , reduce(7), empty() , empty() , empty() , empty() ],
        [reduce(8), reduce(8), reduce(8), reduce(8), empty() , reduce(8), empty() , reduce(8), empty() , empty() , empty() , empty() ],
        [empty()  , empty()  , empty()  , empty()  , shift(6), empty()  , shift(5), empty()  , goto(14), goto(2) , goto(3) , goto(4) ],
        [empty()  , empty()  , empty()  , empty()  , shift(6), empty()  , shift(5), empty()  , empty() , goto(9) , goto(3) , goto(4) ],
        [empty()  , empty()  , empty()  , empty()  , shift(6), empty()  , shift(5), empty()  , empty() , goto(16), goto(3) , goto(4) ],
        [reduce(1), reduce(1), shift(10), empty()  , empty() , reduce(1), empty() , reduce(1), empty() , empty() , empty() , empty() ],
        [empty()  , empty()  , empty()  , empty()  , shift(6), empty()  , shift(5), empty()  , empty() , empty() , goto(11), goto(4) ],
        [reduce(4), reduce(4), reduce(4), shift(12), empty() , reduce(4), empty() , reduce(4), empty() , empty() , empty() , empty() ],
        [empty()  , empty()  , empty()  , empty()  , shift(6), empty()  , shift(5), empty()  , empty() , empty() , empty() , goto(13)],
        [reduce(6), reduce(6), reduce(6), reduce(6), empty() , reduce(6), empty() , reduce(6), empty() , empty() , empty() , empty() ],
        [shift(7) , shift(8) , empty()  , empty()  , empty() , shift(15), empty() , empty()  , empty() , empty() , empty() , empty() ],
        [reduce(9), reduce(9), reduce(9), reduce(9), empty() , reduce(9), empty() , reduce(9), empty() , empty() , empty() , empty() ],
        [reduce(2), reduce(2), shift(10), empty()  , empty() , reduce(2), empty() , reduce(2), empty() , empty() , empty() , empty() ]
    ] : Array{17, Array{12, Cell}}

    let col = 0
    switch item:Item
        tokSym('+'); col = 0
        tokSym('-'); col = 1
        tokSym('*'); col = 2
        tokSym('/'); col = 3
        tokSym('('); col = 4
        tokSym(')'); col = 5
        tokInt(n)  ; col = 6
        tokEnd()   ; col = 7
        e(_)       ; col = 8
        t(_)       ; col = 9
        d(_)       ; col = 10
        f(_)       ; col = 11
        _; assert(false)
            

    return array[state][col]


fn isRule(item Item) Bool
    switch item
        e_(_); return true
        e(_); return true
        t(_); return true
        d(_); return true
        f(_); return true
        _; return false


fn getItem(stack &Item.Table) Item
    let state(_) = stack.pop
    return stack.pop


fn reduceStack(stack &Item.Table, production I64)
    switch production
        1 // E -> E '+' T
            let t(n1)       = stack.getItem()
            let tokSym('+') = stack.getItem()
            let e(n2)       = stack.getItem()
            stack.push(e(n2 + n1))

        2 // E -> E '-' T
            let t(n1)       = stack.getItem()
            let tokSym('-') = stack.getItem()
            let e(n2)       = stack.getItem()
            stack.push(e(n2 - n1))

        3 // E -> T
            let t(n1)       = stack.getItem()
            stack.push(e(n1))

        4 // T -> T '*' D
            let d(n1)       = stack.getItem()
            let tokSym('*') = stack.getItem()
            let t(n2)       = stack.getItem()
            stack.push(t(n2 * n1))

        5 // T -> D
            let d(n1)       = stack.getItem()
            stack.push(t(n1))

        6 // D -> D '/' F
            let f(n1)       = stack.getItem()
            let tokSym('/') = stack.getItem()
            let d(n2)       = stack.getItem()
            stack.push(d(n2 / n1))

        7 // D -> F
            let f(n1)       = stack.getItem()
            stack.push(d(n1))

        8 // F -> NUMBER
            let tokInt(n)   = stack.getItem()
            stack.push(f(n))

        9 // F -> '(' E ')'
            let tokSym(')') = stack.getItem()
            let e(n)        = stack.getItem()
            let tokSym('(') = stack.getItem()
            stack.push(f(n))


fn main(io Io)
    io.stdout.printLn("calculator4")

    let line : Table{Char}
    line.print("10")

    let tokens : Table{Item}

    tokens = line.lexTokens
    io.stdout.printLn(tokens)

    let stack : Item.Table

    stack.push(state(0))


    let loop = true
    let tokIdx = 0
    while loop
        io.stdout.printLn("looping")
        io.stdout.printLn(stack[stack.len - 1])

        let item = tokens[tokIdx]
        let st = 0

        switch stack[stack.len - 1]
            state(s : I64)
                st = s
                item = tokens[tokIdx]
                io.stdout.printLn("here?")

            x | isRule(x)
                item = x
                let state(s) = stack[stack.len - 2]
                st = s
            _
                io.stdout.printLn("wrong thing on stack")
                assert(false)

        io.stdout.print("looking up: ")
        io.stdout.printLn( (st, item) )

        switch lookupCell(st, item)
            shift(s) // Push token onto stack, increase tokenIdx, push next state
                io.stdout.printLn("-- shifting")
                stack.push(tokens[tokIdx])
                stack.push(state(s))
                tokIdx = tokIdx + 1

            reduce(production) // pop state, replace RHS of production with LHS
                io.stdout.printLn("-- reducing ")
                stack.reduceStack(production)

            goto(s) // push next state
                io.stdout.printLn("-- goto ")
                stack.push(state(s))

            accept()
                io.stdout.printLn("-- accept")
                let tokEnd() = tokens[tokIdx]
                loop = false

            _
                io.stdout.printLn("what")
                loop = false

    io.stdout.printLn(stack)


fn atm(str &Char.Table, idx I64) Char.Option
    if idx >= 0 && idx < str.len
        return some(str[idx])
    return none()


fn lexInt(str &Char.Table, idx I64) (Item, I64).Option
    if str.atm(idx) -> some(c) | isDigit(c)

        let n : I64 = 0
        while str.atm(idx) -> some(c) | isDigit(c)
            n = n * 10 + (c - '0').convert
            idx = idx + 1

        return some( (tokInt(n), idx) )
    
    else
        return none()


fn lexSym(str &Char.Table, idx I64) (Item, I64).Option
    if str.atm(idx) -> some(c) | c == '+' || c == '-' || c == '*' || c == '/' || c == '(' || c == ')'
        return some( (tokSym(c), idx + 1) )
    return none()


fn lex(str &Char.Table, idx I64) (Item, I64).Option
    while str.atm(idx) -> some(c) | c.isSpace
        idx = idx + 1

    if str.lexInt(idx) -> some(x)
        return some(x)
    if str.lexSym(idx) -> some(x)
        return some(x)
    return none()


fn lexTokens(str &Char.Table) Item.Table
    let items : Item.Table

    let idx = 0
    while str.lex(idx) -> some( (item, nextIdx) )
        idx = nextIdx
        items.push(item)

    if idx == str.len
        return items
    return []


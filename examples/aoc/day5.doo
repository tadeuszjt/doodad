module day5

import ../../std/strings
import ../../std/assert


fn main()
    data stack [4 String]
    stack[1].Append("ZN")
    stack[2].Append("MCD")
    stack[3].Append("P")

    data moves [4 string] {
        "move 1 from 2 to 1",
        "move 3 from 1 to 3",
        "move 2 from 2 to 1",
        "move 1 from 1 to 2"
    }


    print(stack)

    for moves -> move
        data str String
        for move -> c; str.push(c)

        let (_, n0 | n0 > 0)     = str.ReadString("move", 0)
        let (num, n1 | n1 > 0)   = str.ReadI64(n0)
        let (_, n2 | n2 > 0)     = str.ReadString("from", n0 + n1)
        let (start, n3 | n3 > 0) = str.ReadI64(n0 + n1 + n2)
        let (_, n4 | n4 > 0)     = str.ReadString("to", n0 + n1 + n2 + n3)
        let (end, n5 | n5 > 0)   = str.ReadI64(n0 + n1 + n2 + n3 + n4)

        print(num, start, end)

        assert(stack[..][start] && stack[..][end], "invalid start/end")

        for [..num]
            stack[end].push(stack[start].pop())

    print(stack) 

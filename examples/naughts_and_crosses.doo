module ox

import std/io
import std/builtin
import std/container
import std/print
import std/for
import std/store
import std/assert
import std/compare
import std/arithmetic
import std/boolean
import std/tuple
import std/read
import std/option


enum Square {
    empty
    naught
    cross
}

enum Input {
    move(I64, I64)
    quit()
    error()
}



type Board Array{3, Array{3, Square}}


fn arr(b &Board) &Array{3, Array{3, Square}}
    return b.pretend



acquires{P} print{ P, Square } (p&, square)
    switch square
        empty(); p.print('_')
        naught(); p.print('O')
        cross(); p.print('X')


acquires store{ Square } (a&, b)
    store(
        &a.pretend:Sum{Tuple{}, Tuple{}, Tuple{}}
        &b.pretend:Sum{Tuple{}, Tuple{}, Tuple{}}
    )


acquires equal{ Square } (a, b)
    return builtinSumEnum(a) == builtinSumEnum(b)


acquires{P} print{ P, Board } (p&, board)
    for board.arr -> row
        p.print(row)
        p.print('\n')


//fn Store::store(a &Input, b Input)
//    Store::store(
//        &pretend(&a):Sum{Tuple{I64, I64}, Tuple{}, Tuple{}}
//        pretend(&b):Sum{Tuple{I64, I64}, Tuple{}, Tuple{}}
//    )
//
//
//

fn winner(board Board) Square
    // check for horizontal lines
    for board.arr -> row
        let match = true
        for row -> square
            if square != row[0]
                match = false
        if match && row[0] != empty()
            return row[0]


    // check for vertical lines
    for (0, board.arr[0].len) -> col
        let match = true
        for (0, board.arr.len) -> row
            if board.arr[row][col] != board.arr[0][col]
                match = false

        if match && board.arr[0][col] != empty()
            return board.arr[0][col]


    // check diagonals
    let match = true
    for (0, board.arr.len) -> i | match
        if board.arr[i][i] != board.arr[0][0]
            match = false
    if match && board.arr[0][0] != empty()
        return board.arr[0][0]

    match = true
    for (0, board.arr.len) -> i | match
        let row = board.arr.len - 1 - i
        if board.arr[row][i] != board.arr[board.arr.len - 1][0]
            match = false
    if match && board.arr[board.arr.len - 1][0] != empty()
        return board.arr[board.arr.len - 1][0]

    return empty()


fn getPlayerInput(io &Io) Input
    io.stdout.print("Please enter move: <row> <col>\n")
    
    data line Char.Table

    if io.stdin.getLine(&line) == false
        return quit()

    let row = 0
    let col = 0
    let idx = 0

//    if readI64(line.slice(idx, line.len)) -> just(n, num)
//        row = n
//        idx = idx + num
//    else
//        return error()
//
//    if readI64(line.slice(idx, line.len)) -> just(n, num)
//        col = n
//        idx = idx + num
//    else
//        return error()
//
//    return move(row, col)
//
//
//fn cpuMove(io &Io, board &Board)
//    io.stdout.push("cpu moving ...", '\n')
//
//    // find all empty squares
//    data empty (I64, I64).Table
//    for (0, board.len) -> row
//        for (0, board[row].len) -> col
//            if board[row][col] == empty()
//                empty.push( (row, col) )
//
//    if empty.len == 0
//        io.stdout.push("cpu can't move\n")
//        return
//
//    // find move that wins
//    for empty -> (row, col)
//        board[row][col] = cross()
//        if winner(board) == cross()
//            return
//        board[row][col] = empty()
//
//    // find move that opponent wins
//    for empty -> (row, col)
//        board[row][col] = naught()
//        if winner(board) == naught()
//            board[row][col] = cross()
//            return
//        else
//            board[row][col] = empty()
//
//    // choose random move
//    data rand Rand
//    let i = rand.i64(0, empty.len)
//    let (row, col) = empty[i]
//    board[row][col] = cross()
//

fn main()
    data io Io
    io.stdout.print("naughts and crosses\n")

    let board : Board
    io.stdout.print(board)

    data table Char.Table
    table.print("1234")

//    let some(x : I64, _) = table.read(0)
//
//    while winner(board).isEmpty
//        let moved = false
//        while !moved
//            switch io.getPlayerInput()
//                quit(); return
//                error()
//                    io.stdout.push("parse error", '\n')
//
//                move(row, col) | row < 0 || row > (board.len - 1)
//                    io.stdout.push("row not in range\n")
//
//                move(row, col) | col < 0 || col > (board.len - 1)
//                    io.stdout.push("col not in range\n")
//
//                move(row, col)
//                    io.stdout.push("moving ", row, ", ", col, '\n')
//                    board[row][col] = naught()
//                    moved = true
//
//                _; assert(false)
//
//        io.cpuMove(&board)
//        io.printBoard(board)
//
//    io.stdout.push("winner: ", winner(board), '\n')
//

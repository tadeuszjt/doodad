module ox

import std/io
import std/builtin
import std/container
import std/print
import std/for
import std/store
import std/assert
import std/compare
import std/arithmetic
import std/boolean
import std/tuple
import std/read
import std/option
import std/rand
import std/convert


enum Square {
    empty
    naught
    cross
}

enum Input {
    move(I64, I64)
    quit()
    error()
}

derives Square (store)
derives Square (equal)


type Board Array{3, Array{3, Square}}

fn arr(b &Board) &Array{3, Array{3, Square}}
    return b.pretend


acquires{P} print{ P, Square } (p&, square)
    switch square
        empty(); p.print('_')
        naught(); p.print('O')
        cross(); p.print('X')

acquires{P} print{ P, Board } (p&, board)
    for board.arr -> row
        p.print(row)
        p.print('\n')


fn winner(board Board) Square
    // check for horizontal lines
    for board.arr -> row
        let match = true
        for row -> square
            if square != row[0]
                match = false
        if match && row[0] != empty()
            return row[0]


    // check for vertical lines
    for (0, board.arr[0].len) -> col
        let match = true
        for (0, board.arr.len) -> row
            if board.arr[row][col] != board.arr[0][col]
                match = false

        if match && board.arr[0][col] != empty()
            return board.arr[0][col]


    // check diagonals
    let match = true
    for (0, board.arr.len) -> i | match
        if board.arr[i][i] != board.arr[0][0]
            match = false
    if match && board.arr[0][0] != empty()
        return board.arr[0][0]

    match = true
    for (0, board.arr.len) -> i | match
        let row = board.arr.len - 1 - i
        if board.arr[row][i] != board.arr[board.arr.len - 1][0]
            match = false
    if match && board.arr[board.arr.len - 1][0] != empty()
        return board.arr[board.arr.len - 1][0]

    return empty()


fn getPlayerInput(io &Io) Input
    io.stdout.print("Please enter move: <row> <col>\n")
    
    data line Char.Table

    if io.stdin.getLine(&line) == false
        return quit()

    let row = 0
    let col = 0
    let idx = 0

    if line.read(idx) -> some(n : I64, num)
        row = n
        idx = idx + num
    else
        return error()

    if line.read(idx) -> some(n : I64, num)
        col = n
        idx = idx + num
    else
        return error()

    return move(row, col)


fn cpuMove(io &Io, board &Board)
    io.stdout.print("cpu moving ...\n")

    // find all empty squares
    data empty (I64, I64).Table
    for (0, board.arr.len) -> row
        for (0, board.arr[row].len) -> col
            if board.arr[row][col] == empty()
                empty.push( (row, col) )

    if empty.len == 0
        io.stdout.print("cpu can't move\n")
        return

    // find move that wins
    for empty -> (row, col)
        board.arr[row][col] = cross()
        if winner(board) == cross()
            return
        board.arr[row][col] = empty()

    // find move that opponent wins
    for empty -> (row, col)
        board.arr[row][col] = naught()
        if winner(board) == naught()
            board.arr[row][col] = cross()
            return
        else
            board.arr[row][col] = empty()

    // choose random move
    data rand Rand
    let i = rand.i64(0, empty.len)
    let (row, col) = empty[i]
    board.arr[row][col] = cross()


fn main()
    data io Io
    io.stdout.print("naughts and crosses\n")

    data board Board
    io.stdout.print(board)

    while winner(board).isEmpty
        let moved = false
        while !moved
            switch io.getPlayerInput()
                quit(); return
                error()
                    io.stdout.print("parse error\n")

                move(row, col) | row < 0 || row > (board.arr.len - 1)
                    io.stdout.print("row not in range\n")

                move(row, col) | col < 0 || col > (board.arr.len - 1)
                    io.stdout.print("col not in range\n")

                move(row, col)
                    io.stdout.print("moving: ")
                    io.stdout.print(row)
                    io.stdout.print(", ")
                    io.stdout.print(col)
                    io.stdout.print('\n')
                    board.arr[row][col] = naught()
                    moved = true

                _; io.stdout.print("something")

        io.cpuMove(&board)
        io.stdout.print(board)
//
//    io.stdout.push("winner: ", winner(board), '\n')
//

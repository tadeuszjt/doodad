module tictactoe

import ../std/io
import ../std/strings
import ../std/rand


type Square { Empty() | Naught() | Cross() }


data board [3 [3 Square]]


fn printBoard()
    for board -> row
        putStr("[")
        for row[..] -> r
            switch row[r]
                Empty();  putChar(' ')
                Naught(); putChar('0')
                Cross();  putChar('X')
            if r < (len(row) - 1); putChar(',')
        putStrLn("]")


type playerMoveReturn { Success() | Error() | Quit() }
fn playerMove() playerMoveReturn
    putStrLn("Make a move")


    data line String
    line.GetStrLn()
    if line.ReadChar(0) -> ('q', _)
        return Quit()
    print("got here")

    let (row, n) = line.ReadI64(0)
    let (col, n2) = line.ReadI64(n)

    let noParse = n == 0 || n2 == 0
    let rowInvalid = row < 0 || row >= len(board)
    let colInvalid = col < 0 || col >= len(board[0])
    if noParse || rowInvalid || colInvalid
        print("invalid move")
        return Error()

    if board[row][col] != Empty()
        print("board[row][col] is not empty")
        return Error()

    board[row][col] = Naught()
    return Success()



fn cpuMove()
    print("cpu moving")

    for board[..] -> r
        for board[r][..] -> c
            return


    return

fn winner() Square
    for board -> row
        let same = true
        for row -> sq
            same = same && sq == row[0]
        if same && row[0] != Empty(); return row[0]

    for board[0][..] -> c
        let same = true
        for board[..] -> r
            same = same && board[r][c] == board[0][c]
        if same && board[0][c] != Empty(); return board[0][c]

    if board[0][0] != Empty()
        let same = true
        for board[..] -> r
            same = same && board[r][r] == board[0][0]
        if same; return board[0][0]
        
    if true
        let same = true
        let end = len(board[0]) - 1
        for board[..] -> r
            same = same && board[r][end - r] == board[0][end]
        if same && board[end][0] != Empty(); return board[end][0]

    return Empty()


fn playerMoveLoop() playerMoveReturn
    while true
        switch playerMove()
            Quit();    return Quit()
            Success(); return Success()
            Error();   return playerMoveLoop()


fn main()
    while winner() == Empty()
        let res = playerMoveLoop()
        if res == Quit()
            return
        printBoard()
        cpuMove()
        printBoard()



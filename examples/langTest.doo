module langTest

import builtin/all
import std/sparse
import std/print
import std/unordered
import std/io
import std/option
import std/read
import std/binaryTree

fn testArithmetic()
    let x = 1 + 2
    let 3 = x
    return

fn testFloats()
    let x = 1.0 + 2.0
    let 3.0 = x
    let 4.0 = 16.0 / 4.0


fn testIf()
    let x = 3
    if x == 3
        let true = true
    else
        assert(false)

    if x -> 3 | x -> y
        let 3 = y

    if x -> y | y -> z | z == 3
        assert(true)

    if x -> y | y -> z | z == 4
        assert(false)


fn testFor()
    let table : Char.Table
    for (0, 5) -> i
        table.push('a' + i.convert)

    let 5 = table.len

    let table2 : Char.Table

    for table -> c | c != 'd'
        table2.push(c)

    let 3 = table2.len


fn testSwitch()
    let x = 0
    switch 10
        x | x == 0; assert(false)
        y | y == 10; x = 1
        _; assert(false)

    let 1 = x

    switch 3
        3
            assert(true)
        x
            assert(false)
        _
            assert(false)


fn testTuple()
    let x = (1, true)
    let (1, true) = x
    if x -> (1, false)
        let true = false
    let (3, 4, 5) = (1, 2, 3) + (2, 2, 2)


type Person (I64, Bool)
derives Person (copy, destroy, make2{I64, Bool}, tuplePattern{I64, 2, 0}, tuplePattern{Bool, 2, 1})

fn person(n I64, b Bool) Person
    return (n, b)

fn testTable()
    let table : I64.Table

    let 0 = table.len
    table.push(1)
    table.push(2)
    table.push(3)

    let 3 = table.len

    let 1 = table.at(0)

    let x = table.at(1)
    let 2 = table.at(1)
    builtin::builtinTableAt(&table, 1) = 3
    let 3 = builtin::builtinTableAt(&table, 1)

    let 3 = table.pop
    let 3 = table.pop
    let 1 = table.pop
    let 0 = table.len

    let t2 : Person.Table

    t2.push( person(1, true) )
    t2.push( person(2, false) : Person )

    let 2 = t2.len

    t2.at(1) = person(3, true)
    let (3, true) = t2.pop

    let m3 : I64.Table.Table
    let 0 = m3.len
    m3.grow
    m3[0].grow
    let 1 = m3[0].len


fn testSparse()
    let s1 : I64.Sparse

    let 0 = s1.len
    let k1 = s1.sparse::insertZero
    let k2 = s1.sparse::insertZero
    let k3 = s1.sparse::insertZero
    let 3 = s1.len

    s1.at(k1) = 1
    s1.at(k2) = 2

    let k4 = s1.sparse::insert(4)

    s1.at(k3) = 3

    let 1 = s1.at(k1)
    let 2 = s1.at(k2)
    let 3 = s1.at(k3)
    let 4 = s1[k4]

    s1.sparse::delete(k2)
    let 3 = s1.len
    let 1 = s1.at(k1)
    let 3 = s1.at(k3)

    s1.sparse::delete(k3)
    let 2 = s1.len
    let 1 = s1.at(k1)


fn testRead()
    let str : Char.Table = ['1', ' ', '1']

    //let some( ('1', 1) ) = str.read(0)
    //let some( (' ', 1) ) = str.read(1) : (Char, I64).Option
    //let some( ('1', 1) ) = str.read(2)
    //let none()           = str.read(3) : (Char, I64).Option

    //let some( (1, 1) ) = str.read(0)
    //let some( (1, 2) ) = str.read(1)
    //let some( (1, 1) ) = str.read(2)
    //let none()         = str.read(3) : (I64, I64).Option
    

fn testPrint()
    let str : Char.Table

    str.print('b')

    let 1 = str.len
    let 'b' = str[0]

    str.print("enis")

    let 5 = str.len

    let tupStr : Char.Table

    tupStr.print( (0, true) )

    ${ printf("%s\n", $tupStr.r0); }

    let table : Tuple{I64, Bool}.Table

    table.push( (10, true) )
    table.push( (2, false) )
    table.push( (38-243, true) )
    table.push( (0, true) )

    tupStr.destroy

    tupStr.print(table)

    ${ printf("%s\n", $tupStr.r0); }


fn testUnordered()
    let u1 : I64.Unordered

    let 0  = u1.len
    let k1 = u1.unordered::insert(1)
    let k2 = u1.unordered::insert(2)
    let k3 = u1.unordered::insert(3)

    let 3 = u1.len
    let 1 = u1.index(0)
    let 2 = u1.index(1)
    let 3 = u1.index(2)
    let 1 = u1[k1]
    let 2 = u1[k2]
    let 3 = u1[k3]

    u1.unordered::delete(k1)

    let 2 = u1.len
    let 3 = u1.index(0)
    let 2 = u1.index(1)
    let 2 = u1.at(k2)
    let 3 = u1.at(k3)

    let u2 : I64.Table.Unordered

    let 0 = u2.len

    let key0 = u2.unordered::insertZero
    let key1 = u2.unordered::insertZero

    let 2 = u2.len

    u2[key0].push(23)
    u2[key0].push(24)

    let 2 = u2[key0].len
    let 0 = u2[key1].len

    let io : Io
    io.stdout.print( &u2 )
    io.stdout.print('\n')



fn testOption()
    let o : I64.Option
    switch o
        none(); assert(true)
        some(x); assert(false)
        _; assert(false)
    //let false = o.isSome()

    o = some(3)


    switch o
        none()
            assert(false)

        some(3); let true = true
        _
            ${ puts("didn't work"); }
            assert(false)

    //let true = o.isSome()

    //o.fromSome = 4
    //let 4 = o.fromSome
    //let false = o.isNone

    let o1 = some(3)
    let o2 = some(4)
    let false = o1 == o2
    o2 = some(3)
    let true = o1 == o2
    o1 = none()
    let false = o1 == o2
    o2 = none()
    let true = o1 == o2

    let x = some( [1, 2, 3] : I64.Table )
    //let 3 = x.fromSome.len
    //let 2 = x.fromSome[1]

    switch x
        none(); assert(false)
        some(z)
            assert(true)
            let 3 = z.len
        _; assert(false)


    let y = some(34)
    switch y
        some(z); let 34 = z
        _; assert(false)


fn testTree()
    let t : binaryTree::Tree{I64, Bool}
    let 0 = t.len()
    t.binaryTree::insert(1, true)
    t.binaryTree::insert(2, false)
    let 2 = t.len

    let true = t[1]
    let false = t.at(2)

    let true = t.contains(1)
    let true = t.contains(2)
    let false = t.contains(3)

    t.binaryTree::delete(1)
    let 1 = t.len

    let false = t.contains(1)
    let true = t.contains(2)
    let false = t.contains(3)

    t.binaryTree::insert(3, true)
    t.binaryTree::insert(1, true)

    let true = t.contains(1)
    let true = t.contains(2)
    let true = t.contains(3)


//fn testMap()
//    data m Map{I64, Bool}
//    m.insert(1, true)
//    m.insert(2, false)
//    m.insert(3, true)
//
//    let 3 = m.len
//
//    let true = m[1]
//    let false = m[2]
//
//    let false = m.contains(0)
//
//
fn testArrayPattern()
    let t1 : I64.Table = [1, 2, 3]

    //let [1, x, 3] = t1
    //let 2 = x

    //if t1 -> [_, _]
    //    let true = false

    //let t2 : Char.Table
    //t2.push("abc")

    //let ['a', 'b', y] = t2
    //let 'c' = y

    //let ['a', 'b', 'c'] = "abc"
    //let ['a', 'b', 'c'] = t2.slice(0, t2.len)


fn testArrayExpr()
    let t1 : Tuple{I64, Bool}.Table = [
        (1, true),
        (2, false),
        (3, true)
    ]

    let 1 = t1[0].0
    let false = t1[1].1

    t1 = [
        (4, false),
        (5, false)
    ]

    let 2 = t1.len
    let 5 = t1[1].0


enum Enum {
    one,
    two,
    three,
}
derives Enum (copy, destroy)
enum Enum2 {
    en2One(I64),
    en2Two(I64, I64),
}
derives Enum2 (copy, destroy)

fn testEnum()
    let e : Enum

    switch e
        one(); let true = true
        two(); let false = true

    e.builtin::builtinSumReset(1)

    switch e
        one(); let true = false
        two(); let true = true

    //let true = three().isThree()

    //let true = en2Two(1, 2).isEn2Two
    //let false = en2Two(1, 2).isEn2One
    //let 1 = en2Two(1, 2).1 .0


tuple{T} MyTuple {
    myOne I64,
    myTwo T
}
derives{T} MyTuple{T} (destroy)
fn testMacroTuple()
    let t : Bool.MyTuple
    t.myOne = 23

    let 23 = t.myOne

    let false = t.myTwo
    t.myTwo = true
    let true = t.myTwo



fn testArrayAt()
    let array : Array{5, I64}
    array[2] = 3
    let 5 = array.len
    let 0 = array[1]
    let 3 = array[2]

fn testFunctionalDependency()
    let table : Tuple{I64, Bool}.Table
    table.grow
    let x = table[0]


type MyTup Tuple{Bool, U8}
derives MyTup (copy, destroy, make2{Bool, U8})

fn testMake2()
    let tup = make2(1, true):Tuple{I64, Bool}
    let myTup : MyTup
    myTup = make2(true, 3)


fn testTableRows()
    let table : (I32, (Bool, I64)).Table

    table.push( (1, (true, 11)) )
    table.push( (2, (false , 12)) )
    table.push( (3, (true , 13)) )

    let 3 = table.0 .len
    let 3 = table.1 .len

    let (true, 11) = table.1[0]
    let (false, 12) = table.1[1]
    let (true, 13) = table.1[2]


fn main()
    testArithmetic()
    testFloats()
    testIf()
    testFor()
    testSwitch()
    testTuple()
    testTable()
    testSparse()
    testPrint()
    testRead()
    testUnordered()
    testArrayAt()
    testOption()
    testTree()
////    testMap()
    testArrayPattern()
    testArrayExpr()
    testEnum()
    testMacroTuple()
    testFunctionalDependency()
    testMake2()
    testTableRows()

    ${ puts("langTest success"); }
    return

module tictactoe

import ../std/io
import ../std/strings
import ../std/rand




type Square { Empty() | Naught() | Cross() }

fn string(sq Square)
    switch sq
        Empty();  return " "
        Naught(); return "0"
        Cross();  return "X"


let board = [
    [Empty(), Empty(), Empty()],
    [Empty(), Empty(), Empty()],
    [Empty(), Empty(), Empty()]
]:[3 [3 Square]]


fn printBoard()
    for [row] board
        print(board[row])
    print()


fn playerMove() bool
    putStrLn("Please enter <row> <column> to move")

    let s = getStrLn()
    if s == "\0"
        return false

    let (row, l) = strings::read(s):(i64, i64)
    if l == 0
        putStrLn("invalid string: " + s)
        return false
    s = s[l..]

    let (col, cl) = strings::read(s):(i64, i64)
    if cl == 0
        putStrLn("invalid string: " + s)
        return false

    if row < 0 || row > len(board) || col < 0 || col > len(board[row])
        putStrLn("invalid move: " + string(row) + " " + string(col))
        return false
    else if board[row][col] != Empty()
        putStrLn("invalid move: " + string(row) + " " + string(col))
        return false

    putStrLn("moving: row " + string(row) + ", col " + string(col))
    board[row][col] = Naught()
    return true


fn cpuMove()
    let cpuWords = ["kssssksk", "beep", "click-click", "ka-chunk", "ding", "bzztzt"]
    let cpuStr = "cpu moving."
    let cpuNumWords = (rand::I64() % 5) + 1
    for [i] | i < cpuNumWords
        cpuStr <- " " <- cpuWords[rand::I64() % len(cpuWords)]
    cpuStr <- "."
    print(cpuStr)

    let emptySquares = []
    
    for [row] board
        for [col] board[row]
            if board[row][col] == Empty()
                emptySquares <- [(row, col)]

    if len(emptySquares) == 0
        return

    let i = rand::I64() % len(emptySquares)
    let (row, col) = emptySquares[i]
    board[row][col] = Cross()


fn winner() Square
    if len(board) < 1 || len(board[0]) < 1
        return Empty()

    for [row] board
        let same = true
        for [col] board[row]
            if board[row][col] == Empty() || board[row][col] != board[row][0]
                same = false
        if same; return board[row][0]

    for [col] board[0]
        let same = true
        for [row] board
            if board[row][col] == Empty() || board[row][col] != board[0][col]
                same = false
        if same; return board[0][col]

    let same = true
    for [i] | i < len(board) && i < len(board[0])
        if board[i][i] == Empty() || board[i][i] != board[0][0]
            same = false
    if same; return board[0][0]
    
    return Empty()


fn main()
    print("tictactoe")
    printBoard()

    for [i] | i < 10
        let win = winner()
        if win != Empty()
            putStrLn("winner is: " + string(win))
            return
        
        while !playerMove();
        cpuMove()
        printBoard()




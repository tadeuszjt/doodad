module builtin


fn{T, G} pretend(a &T) &G; return a.builtinPretend

func{T, G | G -> T} makeSlice(Slice{T}) G

// destroy func
func{T} destroy(T)
inst destroy{Char} (c&);      return
inst destroy{Bool} (c&);      return
inst destroy{F32} (c&);       return
inst destroy{F64} (c&);       return
inst destroy{I64} (c&);       return
inst destroy{I32} (c&);       return
inst destroy{Tuple{}} (tup&); return


// field func
func{N, G, T | N -> G} field(T) G


inst{A} field{0, A, Sum{A}} (sum&) -> &; return sum.builtinField{0, A, Sum{A}}

inst{A, B} field{0, A, Sum{A, B}} (sum&) -> &; return sum.builtinField{0, A, Sum{A, B}}
inst{A, B} field{1, B, Sum{A, B}} (sum&) -> &; return sum.builtinField{1, B, Sum{A, B}}

inst{A, B, C} field{0, A, Sum{A, B, C}} (sum&) -> &; return sum.builtinField{0, A, Sum{A, B, C}}
inst{A, B, C} field{1, B, Sum{A, B, C}} (sum&) -> &; return sum.builtinField{1, B, Sum{A, B, C}}
inst{A, B, C} field{2, C, Sum{A, B, C}} (sum&) -> &; return sum.builtinField{2, C, Sum{A, B, C}}

inst{A, B, C, D} field{0, A, Sum{A, B, C, D}} (sum&) -> &; return sum.builtinField{0, A, Sum{A, B, C, D}}
inst{A, B, C, D} field{1, B, Sum{A, B, C, D}} (sum&) -> &; return sum.builtinField{1, B, Sum{A, B, C, D}}
inst{A, B, C, D} field{2, C, Sum{A, B, C, D}} (sum&) -> &; return sum.builtinField{2, C, Sum{A, B, C, D}}
inst{A, B, C, D} field{3, D, Sum{A, B, C, D}} (sum&) -> &; return sum.builtinField{3, D, Sum{A, B, C, D}}

inst{A, B, C, D, E} field{0, A, Sum{A, B, C, D, E}} (sum&) -> &; return sum.builtinField{0, A, Sum{A, B, C, D, E}}
inst{A, B, C, D, E} field{1, B, Sum{A, B, C, D, E}} (sum&) -> &; return sum.builtinField{1, B, Sum{A, B, C, D, E}}
inst{A, B, C, D, E} field{2, C, Sum{A, B, C, D, E}} (sum&) -> &; return sum.builtinField{2, C, Sum{A, B, C, D, E}}
inst{A, B, C, D, E} field{3, D, Sum{A, B, C, D, E}} (sum&) -> &; return sum.builtinField{3, D, Sum{A, B, C, D, E}}
inst{A, B, C, D, E} field{4, E, Sum{A, B, C, D, E}} (sum&) -> &; return sum.builtinField{4, E, Sum{A, B, C, D, E}}

inst{A, B, C, D, E, F} field{0, A, Sum{A, B, C, D, E, F}} (sum&) -> &; return sum.builtinField{0, A, Sum{A, B, C, D, E, F}}
inst{A, B, C, D, E, F} field{1, B, Sum{A, B, C, D, E, F}} (sum&) -> &; return sum.builtinField{1, B, Sum{A, B, C, D, E, F}}
inst{A, B, C, D, E, F} field{2, C, Sum{A, B, C, D, E, F}} (sum&) -> &; return sum.builtinField{2, C, Sum{A, B, C, D, E, F}}
inst{A, B, C, D, E, F} field{3, D, Sum{A, B, C, D, E, F}} (sum&) -> &; return sum.builtinField{3, D, Sum{A, B, C, D, E, F}}
inst{A, B, C, D, E, F} field{4, E, Sum{A, B, C, D, E, F}} (sum&) -> &; return sum.builtinField{4, E, Sum{A, B, C, D, E, F}}
inst{A, B, C, D, E, F} field{5, F, Sum{A, B, C, D, E, F}} (sum&) -> &; return sum.builtinField{5, F, Sum{A, B, C, D, E, F}}

inst{A, B, C, D, E, F, G, H, I} field{0, A, Sum{A, B, C, D, E, F, G, H, I}} (sum&) -> &; return sum.builtinField{0, A, Sum{A, B, C, D, E, F, G, H, I}}
inst{A, B, C, D, E, F, G, H, I} field{1, B, Sum{A, B, C, D, E, F, G, H, I}} (sum&) -> &; return sum.builtinField{1, B, Sum{A, B, C, D, E, F, G, H, I}}
inst{A, B, C, D, E, F, G, H, I} field{2, C, Sum{A, B, C, D, E, F, G, H, I}} (sum&) -> &; return sum.builtinField{2, C, Sum{A, B, C, D, E, F, G, H, I}}
inst{A, B, C, D, E, F, G, H, I} field{3, D, Sum{A, B, C, D, E, F, G, H, I}} (sum&) -> &; return sum.builtinField{3, D, Sum{A, B, C, D, E, F, G, H, I}}
inst{A, B, C, D, E, F, G, H, I} field{4, E, Sum{A, B, C, D, E, F, G, H, I}} (sum&) -> &; return sum.builtinField{4, E, Sum{A, B, C, D, E, F, G, H, I}}
inst{A, B, C, D, E, F, G, H, I} field{5, F, Sum{A, B, C, D, E, F, G, H, I}} (sum&) -> &; return sum.builtinField{5, F, Sum{A, B, C, D, E, F, G, H, I}}
inst{A, B, C, D, E, F, G, H, I} field{6, G, Sum{A, B, C, D, E, F, G, H, I}} (sum&) -> &; return sum.builtinField{6, G, Sum{A, B, C, D, E, F, G, H, I}}
inst{A, B, C, D, E, F, G, H, I} field{7, H, Sum{A, B, C, D, E, F, G, H, I}} (sum&) -> &; return sum.builtinField{7, H, Sum{A, B, C, D, E, F, G, H, I}}
inst{A, B, C, D, E, F, G, H, I} field{8, I, Sum{A, B, C, D, E, F, G, H, I}} (sum&) -> &; return sum.builtinField{8, I, Sum{A, B, C, D, E, F, G, H, I}}


func{T} store(T, T)
inst{T} store{T} (a&, b)
    a.destroy
    a.builtinStore(b)


// args
func{T} copy(T) T
inst copy{I32} (a); return a
inst copy{I64} (a); return a
inst copy{F64} (a); return a
inst copy{F32} (a); return a
inst copy{U8} (a); return a
inst copy{Bool} (a); return a
inst copy{Char} (a); return a


// misc
fn{T}       builtinStore(a &T, b T); ${ assert(false); }
fn{I, G, T} builtinField(t &T) &G;   ${ assert(false); }
fn{T, G}    builtinConvert(a T) G;   ${ assert(false); }
fn{T, G}    builtinPretend(a &T) &G; ${ assert(false); }
//fn{T}       builtinSwap(a &T, b &T); ${ assert(false); }


// arithmetic
fn{T} builtinAdd(a T, b T) T;      ${ assert(false); }
fn{T} builtinSubtract(a T, b T) T; ${ assert(false); }
fn{T} builtinMultiply(a T, b T) T; ${ assert(false); }
fn{T} builtinDivide(a T, b T) T;   ${ assert(false); }
fn{T} builtinModulo(a T, b T) T;   ${ assert(false); }


// boolean
fn{T} builtinEqual(a T, b T)       Bool; ${ assert(false); }
fn{T} builtinLessThan(a T, b T)    Bool; ${ assert(false); }
fn{T} builtinGreaterThan(a T, b T) Bool; ${ assert(false); }
fn{T} builtinAnd(a T, b T) T;            ${ assert(false); }
fn{T} builtinOr(a T, b T)  T;            ${ assert(false); }
fn{T} builtinNot(a T)      T;            ${ assert(false); }


// container
fn{T} builtinTableLen(a &T.Table) I64;               ${ assert(false); }
fn{T} builtinTableAppend(a &T.Table);                ${ assert(false); }
fn{T} builtinTableAt(a &T.Table, b I64) &T;          ${ assert(false); }

fn{T, S} builtinArrayLen(a &Array{S, T}) I64;        ${ assert(false); }
fn{T, S} builtinArrayAt(a &Array{S, T}, idx I64) &T; ${ assert(false); }

fn{T} builtinSliceLen(a T.Slice) I64;                ${ assert(false); }
fn{T} builtinSliceAt(a  T.Slice, b I64) &T;          ${ assert(false); }

// sum
fn{T} builtinSumEnum(t &T) I64;      ${ assert(false); }
fn{T} builtinSumReset(t &T, en I64); ${ assert(false); }

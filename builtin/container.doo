module container

import builtin/builtin
import builtin/arithmetic
import builtin/assert
import builtin/convert
import builtin/compare


func{K, V, T | T->V, T->K } at(T, K) V
func{T}                     len(T) I64
func{T, V | T -> V}         index(T, I64) V
func{T, V | T -> V}         contains(T, V) Bool


inst{V} len{ Table{V} }        (t&);           return t.builtinTableLen()
inst{T} index{ Table{T}, T }   (t&, idx) -> &; return t.builtinTableAt(idx)
inst{T} at{ I64, T, Table{T} } (t&, idx) -> &; return t.builtinTableAt(idx)


inst{T} len{ T.Slice }         (s);           return builtinSliceLen(&s)
inst{T} index{ Slice{T}, T}    (s, idx) -> &; return builtinSliceAt(&s, idx)
inst{T} at{ I64, T, Slice{T} } (s, idx) -> &; return builtinSliceAt(&s, idx)


inst{T, S} at{ I64, T, Array{S, T} } (arr&, idx) -> &; return builtinArrayAt(&arr, idx)
inst{T, S} len{ Array{S, T} }        (arr&);           return builtinArrayLen(&arr)

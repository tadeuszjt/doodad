module container

import builtin/builtin
import builtin/arithmetic
import builtin/assert
import builtin/convert
import builtin/compare
import builtin/boolean

// basic container
func{T}                    len(T) I64
func{V, T | T -> V}        contains(T, V) Bool

// index
func{K, V, T | T->V, T->K} at(T, K) V
func{T, V | T->V}          index(T, I64) V

// stack
func{V, T | T->V}          push(T, V)
func{V, T | T->V}          pop(T) V

// iterate
func{T}                    forEnd(T) I64
func{V, T | T -> V}        forAt( T, I64 ) V


// for (start, end) -> i
inst forEnd{Tuple{I64, I64}} (t)
    return t.1 - t.0


inst forAt{I64, Tuple{I64, I64}} (t, idx)
    return idx + t.0



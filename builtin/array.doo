module array

import builtin/arithmetic
import builtin/tuple
import builtin/convert
import builtin/container
import builtin/builtin
import builtin/compare
import builtin/assert
import builtin/boolean
import builtin/slice
import builtin/limits


inst{T, G, S} convert{Array{S, T}, Array{S, G}} (a)
    let b
    for (0, a.len) -> i
        b[i] = a[i].convert

    return b


inst{T, S} len{Array{S, T}} (arr&)
    return builtinArrayLen(&arr)


inst{T, S} at{ I64, T, Array{S, T} } (arr&, idx) -> &
    assert(idx >= 0 && idx < arr.len)
    return builtinArrayAt(&arr, idx)


inst{T, S} forEnd{Array{S, T}} (a&)
    return a.len


inst{T, S} forAt{T, Array{S, T}} (a&, idx) -> &
    return a[idx]


inst{S, T} makeSlice{ T, Array{S, T} } (slice)
    let array
    assert(array.len == slice.len)

    for (0, slice.len) -> i
        array[i] = slice[i]

    return array


inst{S, T} slice{T, Array{S, T}} (arr&, start, end)
    if start < 0
        start = 0
    if start > arr.len
        start = arr.len
    if end < start
        end = start
    if end > arr.len
        end = arr.len

    return builtinSlice(&arr, start, end)


inst{S, T} destroy{Array{S, T}} (arr&)
    for (0, arr.len) -> i
        arr[i].destroy
    

inst{S, T} copy{Array{S, T}} (a)
    return a[..].makeSlice


inst{S, T} compare{Array{S, T}} (a, b)
    return compare(a[..], b[..])


inst{S, T} equal{Array{S, T}} (a, b)
    return compare(a, b) == eq()


inst{S, T} add{Array{S, T}} (a, b)
    let c
    for (0, c.len) -> i
        c[i] = a[i] + b[i]
    return c


inst{S, T} subtract{Array{S, T}} (a, b)
    let c
    for (0, c.len) -> i
        c[i] = a[i] - b[i]
    return c


inst{S, T} multiply{Array{S, T}} (a, b)
    let c
    for (0, c.len) -> i
        c[i] = a[i] * b[i]
    return c


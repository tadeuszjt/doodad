module array

import builtin/arithmetic
import builtin/tuple
import builtin/convert
import builtin/container
import builtin/builtin
import builtin/for
import builtin/compare
import builtin/destroy
import builtin/assert


inst{S, T} slice{Array{S, T}, T} (arr&)
    return builtinSlice(&arr)


inst{S, T} add{ Array{S, T} } (a, b)
    let c
    for (0, c.len) -> i
        c[i] = a[i] + b[i]
    return c

inst{S, T} subtract{ Array{S, T} } (a, b)
    let c
    for (0, c.len) -> i
        c[i] = a[i] - b[i]
    return c

inst{S, T} multiply{ Array{S, T} } (a, b)
    let c
    for (0, c.len) -> i
        c[i] = a[i] * b[i]
    return c


inst{S, T} destroy{ Array{S, T} } (arr&)
    for (0, arr.len) -> i
        arr[i].destroy
    

inst{S, T} copy{ Array{S, T} } (a)
    let b
    for (0, a.len) -> i
        b[i] = a[i]

    return b


inst{S, T} equal{ Array{S, T} } (a, b)
    for (0, a.len) -> i
        if a[i] != b[i]
            return false
    return true


inst{S, T} makeSlice{ T, Array{S, T} } (slice)
    let arr
    assert(arr.len == slice.len)

    for (0, slice.len) -> i
        arr[i] = slice[i]

    return arr

module destroy

import builtin/tuple
import builtin/convert
import builtin/container
import builtin/builtin
import builtin/for
import builtin/store
import builtin/compare


//func{T} destroy(T)

inst destroy{ U8 } (n&); return
//inst destroy{ I64 } (n&); return
//inst destroy{ F32 } (n&); return
//inst destroy{ F64 } (n&); return


inst{T} destroy{ Slice{T} } (slice&); return



inst{T} destroy{ T.Table } (t&)
    for (0, t.len) -> i
        t[i].destroy
    ${
        //printf("destroying table:%p\n", $t->r0);
        if ($t->r0) free($t->r0);
        $t->r0 = NULL;
        $t->len = 0;
        $t->cap = 0;
    }


inst{A} destroy{Sum{A}} (sum&)
    sum.0 .destroy
    ${ memset($sum, 0, sizeof(*$sum)); }


inst{A, B} destroy{Sum{A, B}} (sum&)
    switch sum.builtinSumEnum
        0; sum.0 .destroy
        1; sum.1 .destroy

    ${ memset($sum, 0, sizeof(*$sum)); }


inst{A, B, C} destroy{ Sum{A, B, C} } (sum&)
    switch sum.builtinSumEnum
        0; sum.0 .destroy
        1; sum.1 .destroy
        2; sum.2 .destroy

    ${ memset($sum, 0, sizeof(*$sum)); }


module compare

import builtin/builtin
import builtin/store
import builtin/assert
import builtin/convert


func{T} equal(T, T) Bool
func{T} greaterThan(T, T) Bool
func{T} lessThan(T, T) Bool


inst equal{ I64 }  (a, b); return builtinEqual(a, b)
inst equal{ F64 }  (a, b); return builtinEqual(a, b)
inst equal{ F32 }  (a, b); return builtinEqual(a, b)
inst equal{ Bool } (a, b); return builtinEqual(a, b)
inst equal{ Char } (a, b); return builtinEqual(a, b)
inst equal{ Tuple{} } (a, b); return true

inst{A, B} equal{ Sum{A, B} } (a, b)
    let enA = a.builtin::builtinSumEnum
    let enB = b.builtin::builtinSumEnum

    if enA != enB
        return false

    switch enA
        0; return a.0 == b.0
        1; return a.1 == b.1

inst{A, B, C} equal{ Sum{A, B, C} } (a, b)
    let enA = a.builtin::builtinSumEnum
    let enB = b.builtin::builtinSumEnum

    if enA != enB
        return false

    switch enA
        0; return a.0 == b.0
        1; return a.1 == b.1
        2; return a.2 == b.2


fn{T} notEqualTo(a T, b T) Bool
    let c = true
    if equal(a, b)
        c = false
    return c


inst greaterThan{ I64 } (a, b); return builtinGreaterThan(a, b)

inst lessThan{ I64 }    (a, b); return builtinLessThan(a, b)
inst lessThan{ F32 }    (a, b); return builtinLessThan(a, b)
inst lessThan{ F64 }    (a, b); return builtinLessThan(a, b)

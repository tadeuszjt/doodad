module slice

import builtin/compare
import builtin/tuple
import builtin/builtin
import builtin/convert
import builtin/container
import builtin/assert
import builtin/boolean

func{G, T | T->G} slice(T, I64, I64) Slice{G}
func{T, S | S->T} makeSlice(Slice{T}) S


fn{T} start(slice T.Slice) I64
    let start
    ${ $start = $slice.start; }
    return start


fn{T} end(slice T.Slice) I64
    let end
    ${ $end = $slice.end; }
    return end


inst{T} makeSlice{T, Slice{T}} (slice)
    return slice


inst{T} slice{T, Slice{T}} (slice, start, end)
    if start < 0        ; start = 0
    if start > slice.end; start = slice.end
    if end < start      ; end = start
    if end > slice.end  ; end = slice.end
    return slice.builtinSlice(start, end)


inst{T} len{T.Slice} (s)
    return builtinSliceLen(&s)


inst{T} at{I64, T, Slice{T}} (s, idx) -> &
    assert(idx >= 0 && idx < s.len)
    return s.builtinSliceAt(idx)


inst{T} contains{T, Slice{T}} (s, e)
    for (0, s.len) -> i
        if s[i] == e
            return true
    return false


inst{T} forEnd{T.Slice} (s)
    return s.len


inst{T} forAt{T, T.Slice} (s, idx) -> &
    return s.at(idx)


inst{T} compare::compare{Slice{T}} (a, b)
    for (0, a.len) -> i | i < b.len
        switch compare(a[i], b[i])
            lt(); return lt()
            gt(); return gt()
            eq();

    return compare(a.len, b.len)


inst{T} compare::equal{Slice{T}} (a, b)
    return compare(a, b) == eq()


inst{T} destroy{Slice{T}} (slice&)
    return




module store

import builtin/builtin
import builtin/assert
import builtin/convert


feature{T} store(T, T)


acquires store{ U8 }   (a&, b); builtinStore(&a, b)
acquires store{ I64 }  (a&, b); builtinStore(&a, b)
acquires store{ I32 }  (a&, b); builtinStore(&a, b)
acquires store{ F64 }  (a&, b); builtinStore(&a, b)
acquires store{ F32 }  (a&, b); builtinStore(&a, b)
acquires store{ Bool } (a&, b); builtinStore(&a, b)
acquires store{ Char } (a&, b); builtinStore(&a, b)


acquires store{ Tuple{} } (a&, b)
    return

acquires{A} store{ Tuple{A} } (a&, b)
    a.0 = b.0

acquires{A, B} store{ Tuple{A, B} } (a&, b)
    a.0 = b.0
    a.1 = b.1

acquires{A, B, C} store{ Tuple{A, B, C} } (a&, b)
    a.0 = b.0
    a.1 = b.1
    a.2 = b.2

acquires{A, B, C, D} store{ Tuple{A, B, C, D} } (a&, b)
    a.0 = b.0
    a.1 = b.1
    a.2 = b.2
    a.3 = b.3

acquires{A} store{ Sum{A} } (a&, b)
    a.0 = b.0

acquires{A, B} store{ Sum{A, B} } (a&, b)
    let en = b.builtinSumEnum
    a.builtinSumReset(en)

    if builtin::builtinEqual(en, 0)
        a.0 = b.0
    else if builtin::builtinEqual(en, 1)
        a.1 = b.1

acquires{A, B, C} store{ Sum{A, B, C} } (a&, b)
    let en = b.builtinSumEnum
    a.builtinSumReset(en)
    if builtin::builtinEqual(en, 0)
        a.0 = b.0
    else if builtin::builtinEqual(en, 1)
        a.1 = b.1
    else if builtin::builtinEqual(en, 2)
        a.2 = b.2


acquires{T, S} store{ Array{S, T} } (a&, b)
    let idx = 0
    while builtin::builtinLessThan(idx, b.builtinArrayLen)
        a.builtinArrayAt(idx) = b.builtinArrayAt(idx)
        idx = builtinAdd(idx, 1)

module store

import builtin/builtin
import builtin/assert
import builtin/convert


func{T} store(T, T)


inst store{ U8 }   (a&, b); builtinStore(&a, b)
inst store{ I64 }  (a&, b); builtinStore(&a, b)
inst store{ I32 }  (a&, b); builtinStore(&a, b)
inst store{ F64 }  (a&, b); builtinStore(&a, b)
inst store{ F32 }  (a&, b); builtinStore(&a, b)
inst store{ Bool } (a&, b); builtinStore(&a, b)
inst store{ Char } (a&, b); builtinStore(&a, b)

inst{A} store{ Sum{A} } (a&, b)
    a.0 = b.0

inst{A, B} store{ Sum{A, B} } (a&, b)
    let en = b.builtinSumEnum
    a.builtinSumReset(en)

    if builtin::builtinEqual(en, 0)
        a.0 = b.0
    else if builtin::builtinEqual(en, 1)
        a.1 = b.1

inst{A, B, C} store{ Sum{A, B, C} } (a&, b)
    let en = b.builtinSumEnum
    a.builtinSumReset(en)
    if builtin::builtinEqual(en, 0)
        a.0 = b.0
    else if builtin::builtinEqual(en, 1)
        a.1 = b.1
    else if builtin::builtinEqual(en, 2)
        a.2 = b.2



module for

import builtin/container
import builtin/convert
import builtin/builtin


func{T}             forBegin(T) I64
func{T}             forEnd(T) I64
func{V, T | T -> V} forAt( T, I64 ) V

inst{T} forBegin{ T.Slice } (s&);         return 0
inst{T} forEnd{ T.Slice } (s&);           return s.len
inst{T} forAt{ T, T.Slice} (s&, idx) -> &; return s.at(idx)

inst forBegin{ Tuple{I64, I64} } (t);      return t.0
inst forEnd{   Tuple{I64, I64} } (t);      return t.1
inst forAt{    I64, Tuple{I64, I64} } (t, idx); return idx


inst{T} forBegin{ T.Table } (s&);         return 0
inst{T} forEnd{ T.Table } (s&);           return s.len
inst{T} forAt{ T, T.Table } (s&, idx) -> &; return s[idx]


inst{T, S} forBegin{ Array{S, T} } (a&);        return 0
inst{T, S} forEnd{ Array{S, T} }   (a&);        return a.len
inst{T, S} forAt{ T, Array{S, T} } (a&, idx) -> &; return a[idx]

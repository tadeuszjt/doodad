module table

import builtin/builtin
import builtin/container
import builtin/for
import builtin/tuple
import builtin/convert


inst{T} copy{Table{T}} (a)
    let b
    for (0, a.len) -> i
        b.push(a[i])

    return b


inst{T} makeSlice{ T, Table{T} } (slice)
    let table
    for (0, slice.len) -> i
        table.push(slice[i])
    return table


inst{A, B} builtin::field{0, Slice{A}, Table{Tuple{A, B}}} (table&)
    return builtin::builtinField{0, Slice{A}, Table{Tuple{A, B}}}(&table)
inst{A, B} builtin::field{1, Slice{B}, Table{Tuple{A, B}}} (table&)
    return builtin::builtinField{1, Slice{B}, Table{Tuple{A, B}}}(&table)

inst{A, B, C} builtin::field{0, Slice{A}, Table{Tuple{A, B, C}}} (table&)
    return builtin::builtinField{0, Slice{A}, Table{Tuple{A, B, C}}}(&table)
inst{A, B, C} builtin::field{1, Slice{B}, Table{Tuple{A, B, C}}} (table&)
    return builtin::builtinField{1, Slice{B}, Table{Tuple{A, B, C}}}(&table)
inst{A, B, C} builtin::field{2, Slice{C}, Table{Tuple{A, B, C}}} (table&)
    return builtin::builtinField{2, Slice{C}, Table{Tuple{A, B, C}}}(&table)

module table

import builtin/builtin
import builtin/container
import builtin/tuple
import builtin/convert
import builtin/arithmetic
import builtin/assert
import builtin/compare
import builtin/slice
import builtin/boolean
import builtin/limits


inst{V} len{ Table{V} } (t&)
    return t.builtinTableLen()


inst{T} index{ Table{T}, T } (t&, idx) -> &
    return t.builtinTableAt(idx)


inst{T} at{ I64, T, Table{T} } (t&, idx) -> &
    assert(idx >= 0 && idx < t.len)
    return t.builtinTableAt(idx)


inst{T} forEnd{T.Table}   (s&);           return s.len
inst{T} forAt{T, T.Table }(s&, idx) -> &; return s[idx]


fn{T} grow(t& T.Table)
    builtinTableAppend(&t)


inst{T} slice{T, Table{T}} (t&, start, end)
    if start < 0
        start = 0
    if start > t.len
        start = t.len
    if end < start
        end = start
    if end > t.len
        end = t.len
    return builtinSlice(&t, start, end)


inst{T} makeSlice{T, Table{T}} (slice)
    let table
    for (0, slice.len) -> i
        table.push(slice[i])
    return table


inst{T} copy{Table{T}} (a)
    return a[..].makeSlice


inst{T} container::push{T, Table{T}} (t&, e)
    builtinTableAppend(&t)
    t[t.len - 1] = e


inst{T} container::pop{T, Table{T}} (t&)
    assert(t.len > 0)
    let e = t[t.len - 1]
    t[t.len - 1].destroy
    ${ $t->len--; }
    return e


inst{T} compare{Table{T}} (a, b)
    return compare(a[..], b[..])


inst{T} equal{Table{T}} (a, b)
    return compare(a, b) == eq()


inst{T} destroy{ T.Table } (t&)
    for (0, t.len) -> i
        t[i].destroy
    ${
        //printf("destroying table:%p\n", $t->r0);
        if ($t->r0) free($t->r0);
        $t->r0 = NULL;
        $t->len = 0;
        $t->cap = 0;
    }


inst{A, B} builtin::field{0, Slice{A}, Table{Tuple{A, B}}} (table&)
    return builtin::builtinField{0, Slice{A}, Table{Tuple{A, B}}}(&table)
inst{A, B} builtin::field{1, Slice{B}, Table{Tuple{A, B}}} (table&)
    return builtin::builtinField{1, Slice{B}, Table{Tuple{A, B}}}(&table)


inst{A, B, C} builtin::field{0, Slice{A}, Table{Tuple{A, B, C}}} (table&)
    return builtin::builtinField{0, Slice{A}, Table{Tuple{A, B, C}}}(&table)
inst{A, B, C} builtin::field{1, Slice{B}, Table{Tuple{A, B, C}}} (table&)
    return builtin::builtinField{1, Slice{B}, Table{Tuple{A, B, C}}}(&table)
inst{A, B, C} builtin::field{2, Slice{C}, Table{Tuple{A, B, C}}} (table&)
    return builtin::builtinField{2, Slice{C}, Table{Tuple{A, B, C}}}(&table)

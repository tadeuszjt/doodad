module blobs

import std/io
import qualified std/sfml/window  as sf
import qualified std/sfml/texture as sf
import std/rand
import std/sparse
import std/print
import std/option
import std/unordered
import std/time
import std/maths
import std/geom

import builtin/all


include <SFML/Graphics.h>

tuple Blob {
    position   Vec2
    velocity   Vec2
    blobColour sf::Colour
    sprite     sf::Quad
}
derives Blob (store, destroy)
derives{P} Blob (print::print{P})


inst convert{sf::Vec2f, Vec2} (a); return (a.sf::x.convert, a.sf::y.convert)
inst convert{Vec2, sf::Vec2f} (a); return (a.x.convert, a.y.convert)


fn vec2(rand &Rand, rect Rect) Vec2
    return Vec2(
        rand.f64(rect.min.x, rect.max.x)
        rand.f64(rect.min.y, rect.max.y)
    )


fn colour(rand &Rand) sf::Colour
    return (
        rand.i64(0, 255).convert
        rand.i64(0, 255).convert
        rand.i64(0, 255).convert
        255
    )


fn makeQuad(position sf::Vec2f, colour sf::Colour) sf::Quad
    let quad
    quad[0] = (position + (-10.0, -10.0), colour, (0.0, 0.0))
    quad[1] = (position + (10.0, -10.0),  colour, (640.0, 0.0))
    quad[2] = (position + (10.0, 10.0),   colour, (640.0, 640.0))
    quad[3] = (position + (-10.0, -10.0), colour, (0.0, 0.0))
    quad[4] = (position + (10.0, 10.0),   colour, (640.0, 640.0))
    quad[5] = (position + (-10.0, 10.0),  colour, (0.0, 640.0))
    return quad



fn containsBlob(table &Blob.Table, point Vec2) Bool
    for (0, table.len) -> i
        if (point - table.position[i]).length < 10.0
            return true

    return false
        


fn main(io Io, rand Rand, w sf::Window)
    io.stdout.printLn("blobs")
    w.sf::create(1000, 800, "blobs")
    let blobTexture = sf::textureFromFile("blob.png")

    let arena = sf::Rectf( (0.0, 0.0), (500.0, 500.0) )
    data blobs Blob.Table

    for (0, 100)
        let blob:Blob
        blob.position   = rand.vec2( ( arena.sf::min.convert, arena.sf::max.convert ) )
        blob.velocity   = rand.vec2( ( (-1.0, -1.0), (1.0, 1.0) ) )
        blob.blobColour = rand.colour
        blobs.push(blob)

    //io.stdout.printLn(blobs)

    let mousePos = Vec2(0.0, 0.0)

    while w.sf::isOpen()
        let prevNs = time::getTimestampNs()

        while w.sf::pollEvent() -> some(event)
            switch event
                sf::closed(); w.sf::close()
                sf::mouseMove(x, y)
                    mousePos.x = x.convert
                    mousePos.y = y.convert

        for (0, blobs.len) -> i
            //blobs[i].position = blobs[i].position + blobs[i].velocity
            blobs[i].sprite = makeQuad(blobs[i].position.convert, blobs[i].blobColour)

        
        let (width, height) = w.sf::getSize()
        w.sf::setViewFromRect(((0, 0), (width.convert, height.convert)))

        if blobs.containsBlob(mousePos)
            io.stdout.print("contains")

        w.sf::clearWindow(sf::white())
        w.sf::drawQuads(blobs.sprite, &blobTexture)
        w.sf::display()

        let nextNs = time::getTimestampNs()
        let diff = nextNs - prevNs
        sleepNs(16 * 1000 * 1000 - diff)




module test

import std/assert

let passCount = 0

fn test(b bool)
    if b; passCount = passCount + 1
    else; print("test failed")

fn main()
    test(1 + 1 == 2)
    test(34 - 12 == 22)
    test(3 * 4 == 12)

    test([123] == [123])
    test([(1, 2)] == [(1, 2)])
    test([(1, 3)] != [(1, 2)])
    test([(1, "abc")] == [(1, "abc")])
    test([(1, "abd")] != [(1, "abc")])
    test([(1, "abc")] != [(1, "abcd")])
    test([(1, "abc")] != [(1, "abc"), (2, "benis")])
    test([(1, "abc"), (2, "benis")] == [(1, "abc"), (2, "benis")])

    test( (1, 2).0 == 1 )
    test( (23, 43.21).1 == 43.21 )
    test( ('c', 123, false) == ('c', 123, false) )
    test( ('c', 123, false) != ('c', 123, true) )
    type Struct ( a i64, b bool, c (i64, i64)) 
    test( (1, false, (0, 2)):Struct.b == false )

    let x = 1
    if true
        test (x == 1)
        let x = 2
        test (x == 2)
        for [x] [1]
            test (x == 0)
    test (x == 1)

    type ADT { OneBool(bool) | Nothing() | OneTuple(string, bool)}
    let n = Nothing()
    let b = OneBool(true)
    let t = OneTuple("benis", true)
    let t2 = OneTuple("beni3", true)
    if b -> OneBool(bt)
        test(bt)
    else; test(false)
    test(n != b)
    test(t == t)
    test(t != t2)
    if t2 -> OneTuple(s, b)
        test(s == "beni3")
    else; test(false)

    let zx = zero():i64
    test (zx == 0:i64)
    let zxa = zero():[10 (i64, bool)]
    for [i] zxa
        test(zxa[i] == (0, false))

    type AdtMixed { Member(bool) | i64 | MemberI64(i64) }
    let adtMixed = Member(true)
    switch adtMixed
        Member(b); print("member", b)
        i64(n);    print("i64", n)
    test(adtMixed == Member(true))
    adtMixed = AdtMixed(3:i64)
    switch adtMixed
        i64(3); test(true)
        _; test(false)
    let i64(mn) = adtMixed
    test(mn == 3)
    adtMixed = MemberI64(4)
    switch adtMixed
        i64(n); test(false)
        Member(b); test(false)
        MemberI64(n); test(n == 4)

    type OptionalBool { null | bool }
    let ob = OptionalBool(false:bool):OptionalBool
    if ob -> bool(true)
        test(false)
    else if ob -> bool(false)
        test(true)
    ob = null
    if ob -> null
        test(true)
    else; test(false)

    print("tests passed", passCount)



module table

fn aFunc()
    return

fn{T} append(table &T.Table, item T); table.push(item)
fn{T} append(table &T.Table, slice []T); table.push(slice)


fn{T} len(table &T.Table) I64
    let len = 0
    ${ $len = $table->len; }
    return len


fn{T} at(table &T.Table, index I64) &T
    return builtin_table_at(&table, index)


fn{T} push(table &T.Table, item T)
    builtin_table_append(&table)
    table.at(table.len() - 1) = item


fn{T} push(table &T.Table)
    builtin_table_append(&table)


fn{T} pop(table &T.Table) T
    let item = table.at(table.len() - 1) : T
    ${ $table->len--; }
    return item


fn{T} push(table &T.Table, slice []T)
    for slice -> x
        table.push(x)


fn{T} slice(table &T.Table) []T
    return builtin_table_slice(&table)

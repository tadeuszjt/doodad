module table

import std/integer
import std/features


fn{T} set(table &T.Table, slice []T)
    ${ $table->len = 0; }
    table.push(slice)


fn{T} Len::len(table &T.Table) I64
    let len = 0
    ${ $len = $table->len; }
    return len


fn{T} At::at(table &T.Table, index I64) &T
    return builtin_table_at(&table, index)


fn{T} push(table &T.Table, item T)
    builtin_table_append(&table)
    table[table.len - 1] = item


fn{T} push(table &T.Table)
    builtin_table_append(&table)


fn{T} pop(table &T.Table) T
    let item = table[table.len - 1]
    ${ $table->len--; }
    return item


fn{T} push(table &T.Table, slice []T)
    for slice -> x
        table.push(x)


fn{T} slice(table &T.Table, start I64, end I64) []T
    return builtin_table_slice(&table, start, end)

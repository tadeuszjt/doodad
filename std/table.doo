module table

import std/range


fn[T] {t Table[T]} len() I64
    ${ return $t->len; }


fn[T] {t Table[T]} push(elem ()T)
    builtin_table_append(t)
    t.at(t.len() - 1) = elem{}


fn[T] {t Table[T]} push()
    let elem:()T
    builtin_table_append(t)
    t.at(t.len() - 1) = elem{}


fn[T] {t Table[T]} pop() ()T
    data elem ()T
    elem{} = t.at(t.len() - 1)
    ${ $t->len--; }
    return elem


fn[T] {t Table[T]} at(index I64) {}T
    assert(index >= 0 && index < t.len(), "index out of range")
    return builtin_at(t, index)


fn[T] {t Table[T]} range() Range[I64]
    return (0, t.len())

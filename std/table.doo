module table

import std/integer
import std/features
import std/builtin


fn{T} Store::store(table &T.Table, slice []T)
    ${ $table->len = 0; }
    table.push(slice)


fn{T} Len::len(table &T.Table) I64; return builtin::tableLen(&table)


fn{T} For::begin(table &T.Table) I64;         return 0
fn{T} For::end(table &T.Table) I64;           return table.len
fn{T} For::forAt(table &T.Table, idx I64) &T; return table.at(idx)

fn{T} Pattern::sliceLen(table &T.Table) I64;        return table.len
fn{T} Pattern::sliceAt(table &T.Table, idx I64) &T; return table.at(idx)


fn{T} At::at(table &T.Table, index I64) &T
    return builtin::tableAt(&table, index)


fn{T} push(table &T.Table, item T)
    builtin::tableAppend(&table)
    table[table.len - 1] = item


fn{T} push(table &T.Table)
    builtin::tableAppend(&table)


fn{T} pop(table &T.Table) T
    let item = table[table.len - 1]
    ${ $table->len--; }
    return item


fn{T} push(table &T.Table, slice []T)
    for slice -> x
        table.push(x)


fn{T} slice(table &T.Table, start I64, end I64) []T
    return builtin::tableSlice(&table, start, end)

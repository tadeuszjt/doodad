module tuple

import std/store


feature{T, G} first(T) G
feature{T, G} second(T) G
feature{T, G} third(T) G


acquires{A, B} first{ Tuple{A, B}, A } (t&) -> &; return &t.0
acquires{A, B} second{ Tuple{A, B}, B } (t&) -> &; return &t.1


acquires{A, B, C} first{ Tuple{A, B, C}, A } (t&) -> &; return &t.0
acquires{A, B, C} second{ Tuple{A, B, C}, B } (t&) -> &; return &t.1
acquires{A, B, C} third{ Tuple{A, B, C}, C } (t&) -> &; return &t.2


fn{A, B} makeTuple2(a A, b B) Tuple{A, B}
    let tup
    tup.0 = a
    tup.1 = b
    return tup 

fn{A, B, C} makeTuple3(a A, b B, c C) Tuple{A, B, C}
    let tup
    tup.0 = a
    tup.1 = b
    tup.2 = c
    return tup 



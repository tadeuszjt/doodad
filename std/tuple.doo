module tuple

//import std/features
//import std/bool

feature{T, G} first(T) G
feature{T, G} second(T) G
feature{T, G} third(T) G


acquires{A, B} first{ Tuple{A, B}, A } (t&) -> &; return &t.0
acquires{A, B} second{ Tuple{A, B}, B } (t&) -> &; return &t.1


acquires{A, B, C} first{ Tuple{A, B, C}, A } (t&) -> &; return &t.0
acquires{A, B, C} second{ Tuple{A, B, C}, B } (t&) -> &; return &t.1
acquires{A, B, C} third{ Tuple{A, B, C}, C } (t&) -> &; return &t.2



//fn{A, B} For::begin(t &Tuple{A, B}) I64
//    return t.0
//
//fn{A, B} For::end(t &Tuple{A, B}) I64
//    return t.1
//
//fn{A, B} For::forAt(t &Tuple{A, B}, idx I64) I64
//    return idx
//
//
//
//
//fn{A} first(a &Tuple{A}) &A; return &a.0
//
//fn{A, B} first(a &Tuple{A, B}) &A; return &a.0
//fn{A, B} second(a &Tuple{A, B}) &B; return &a.1
//
//fn{A, B, C} first(a &Tuple{A, B, C}) &A; return &a.0
//fn{A, B, C} second(a &Tuple{A, B, C}) &B; return &a.1
//fn{A, B, C} third(a &Tuple{A, B, C}) &C; return &a.2
//
//fn{A, B}    Arithmetic::add(a Tuple{A, B}, b Tuple{A, B}) Tuple{A, B}; return ( a.0 + b.0, a.1 + b.1 )
//fn{A, B, C} Arithmetic::add(a Tuple{A, B, C}, b Tuple{A, B, C}) Tuple{A, B, C}; return ( a.0 + b.0, a.1 + b.1, a.2 + b.2 )
//
//
//fn{A, B} Construct::construct(a A, b B) Tuple{A, B}
//    let x : Tuple{A, B}
//    x.0 = a
//    x.1 = b
//    return x
//
//fn{A, B, C} Construct::construct(a A, b B, c C) Tuple{A, B, C}
//    let x : Tuple{A, B, C}
//    x.0 = a
//    x.1 = b
//    x.2 = c
//    return x
//
//
//fn Store::store(a &Tuple{}, b Tuple{})
//    return
//
//fn{A} Store::store(a &Tuple{A}, b Tuple{A})
//    a.0 = b.0
//
//fn{A, B} Store::store(a &Tuple{A, B}, b Tuple{A, B})
//    a.0 = b.0
//    a.1 = b.1
//
//fn{A, B, C} Store::store(a &Tuple{A, B, C}, b Tuple{A, B, C})
//    a.0 = b.0
//    a.1 = b.1
//    a.2 = b.2
//
//
//
//fn Compare::equal(a Tuple{}, b Tuple{}) Bool; return true
//fn{A} Compare::equal(a Tuple{A}, b Tuple{A}) Bool; return a.0 == b.0
//fn{A, B} Compare::equal(a Tuple{A, B}, b Tuple{A, B}) Bool; return a.0 == b.0 && a.1 == b.1

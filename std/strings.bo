module strings

import chars

fn + (a string, b string) string
    let r = copy(a)
    r <- copy(b)
    return r


fn == (a string, b string) bool
    if len(a) != len(b)
        return false

    for [i] a
        if a[i] != b[i]
            return false

    return true


fn string(b bool)
    if b; return "true"
    else; return "false"


fn toUpper(str string) string
    let r = copy(str)
    for [i] str
        r[i] = chars::toUpper(str[i])
    return r


fn isPrefix(pre string, str string) bool
    if len(pre) > len(str)
        return false

    for [i] pre
        if pre[i] != str[i]
            return false

    return true


fn read(s string) (bool, i64)
    let l = 0
    for [i] s -> c | isSpace(c)
        l = l + 1

    if isPrefix("true",       s[l..]); return (true, l + 4)
    else if isPrefix("false", s[l..]); return (false, l + 5)
    else;                              return (false, 0)





fn read(s string) (i64, i64)
    let l = 0
    for [i] s -> c | isSpace(c)
        l = l + 1

    let mul = 1
    if len(s[l..]) > 0 && s[l] == '-'
        mul = -1
        l = l + 1

    let n = 0
    let success = false

    while isDigit(s[l]) && l < len(s)
        n = n*10 + i64(s[l] - '0')
        l = l + 1
        success = true

    if success; return (n * mul, l)
    else;       return (0, 0)


fn reverse(s string)
    let r = copy(s)
    for [i] r
        r[i] = s[len(s) - 1 - i]

    return r


fn dropSpace(s string) string
    let start = 0
    for [i] s -> c | isSpace(c)
        start = start + 1

    return copy(s[start..])


        
    


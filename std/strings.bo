module strings

import chars

fn + (a string, b string) string
    let r = copy(a)
    r <- copy(b)
    return r


fn == (a string, b string) bool
    if len(a) != len(b)
        return false

    for [i] a
        if a[i] != b[i]
            return false

    return true


fn string(b bool)
    if b; return "true"
    else; return "false"


fn isPrefix(pre string, str string) bool
    if len(pre) > len(str)
        return false

    for [i] pre
        if pre[i] != str[i]
            return false

    return true


fn readInt(s string) (i64, i64)
    let length = 0
    for [i] s | s[i] == ' '
        length = length + 1

    let mul = 1
    if length < len(s) && s[length] == '-'
        mul = -1
        length = length + 1

    let n = 0
    let success = false

    while isDigit(s[length]) && length < len(s)
        n = n*10 + i64(s[length] - '0')
        length = length + 1
        success = true

    if success; return (n * mul, length)
    else;       return (0, 0)


fn reverse(s string)
    let r = copy(s)
    for [i] r
        r[i] = s[len(s) - 1 - i]

    return r


fn dropSpace(s string) string
    let r = ""

    let start = 0
    for [i] s | s[i] == ' '
        start = start + 1

    for [i] | (i + start) < len(s)
        r <- [s[i + start]]

    return r


        
    


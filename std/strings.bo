module strings

import chars

fn + (a string, b string) string
    let r = copy(a)
    r <- copy(b)
    return r


fn == (a string, b string) bool
    if len(a) != len(b)
        return false

    for [i] a
        if a[i] != b[i]
            return false

    return true


fn string(b bool)
    if b; return "true"
    else; return "false"


fn isPrefix(pre string, str string) bool
    if len(pre) > len(str)
        return false

    for [i] pre
        if pre[i] != str[i]
            return false

    return true


fn readInt(s string) (i64, bool)
    let start = 0
    let mul = 1
    if len(s) > 0 && s[0] == '-'
        mul = -1
        start = 1

    let n = 0
    let b = false

    for [i] | isDigit(s[i + start]) && (i + start) < len(s)
        n = n*10 + i64(s[i + start] - '0')
        b = true

    return (n * mul, b)


fn reverse(s string)
    let r = copy(s)
    for [i] r
        r[i] = s[len(s) - 1 - i]

    return r


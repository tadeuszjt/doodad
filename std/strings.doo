module strings
import chars
import io

type Key i64
type String [char]
type Strings [String]


data strings sparse[String]


fn (s String) Append(str string)
    for [i] str; s.push(str[i])


fn (s String) Print()
    print(s)


fn (s String) ReadI64() (i64, i64)
    let i = 0
    while i < len(s) && isSpace(s[i])
        i = i + 1

    data digits [i64]
    while i < len(s) && isDigit(s[i])
        digits.push(readDigit(s[i]))
        i = i + 1

    let n = 0
    let mul = 1
    let j = len(digits) - 1
    while j >= 0
        n = n + digits[j]*mul
        mul = mul * 10
        j = j - 1

    return (n, i)
        
    

module strings
import chars

type String [char]


fn {s String} CompareEqual(s2 string) bool
    if s.len() != s2.len(); return false
    for s[..] -> i
        if s[i] != s2[i]; return false
    return true


fn {s String} Append(str string)
    for str -> c; s.push(c)


fn {s String} Read(start i64, c char) (char, i64)
    if s[..][start] && s[start] == c
        return (c, 1)
    return ('\0', 0)



fn {s String} ReadChar(start i64) (char, i64)
    let spaceCount = 0
    for s[start..] -> i | isSpace(s[i]) || isAlpha(s[i])
        if isAlpha(s[i])
            return (s[i], spaceCount + 1)
        else; spaceCount = spaceCount + 1

    return ('\0', 0)


fn {s String} ReadI64(start i64) (i64, i64)
    let spaceCount = 0
    for s[start..] -> i | isSpace(s[i])
        spaceCount = spaceCount + 1

    let n = 0
    let digitCount = 0
    for s[start+spaceCount..] -> i | isDigit(s[i])
        n = n*10 + i64(s[i] - '0')
        digitCount = digitCount + 1

    if digitCount > 0; return (n, spaceCount + digitCount)
    return (0, 0)
        
    

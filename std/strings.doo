module strings

import std/maybe
import std/char
import std/integer
import std/slice
import std/bool
import std/table
import std/tuple


fn readI64(str []Char) (I64, I64).Maybe
    fn mat(str &[]Char, idx I64) Char.Maybe
        if idx > str.len
            return nothing()
        return just(str[idx])

    let idx = 0

    while str.mat(idx) -> just(c) | isSpace(c)
        idx = idx + 1


    let isMinus = false
    if str.mat(idx) -> just('-')
        isMinus = true
        idx = idx + 1

    let hasDigits = false
    let x = 0
    data digits Char.Table

    while str.mat(idx) -> just(c) | isDigit(c)
        hasDigits = true
        digits.push(str[idx])
        idx = idx + 1

    for digits -> digit
        x = x*10 + I64(digit - '0')

    if !hasDigits
        return nothing()

    if isMinus
        x = -x

    return just((x, idx))




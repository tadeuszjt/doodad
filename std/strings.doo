module strings


fn isAlpha(c Char) Bool
    let r = false
    ${ $r = isalpha($c); }
    return r


fn isDigit(c Char) Bool
    let r = false
    ${ $r = isdigit($c); }
    return r


fn isSpace(c Char) Bool
    let r = false
    ${ $r = isspace($c); }
    return r


//fn isPrefix(pre:String, str:String) bool
//    if len(pre) > len(str); return false
//    for pre[..] -> i
//        if str[i] != pre[i]; return false
//    return true
//
//
//fn {s:String} at(idx:I64) (null | Char)
//    if idx >= 0 && idx < len(s)
//        return conv(s[idx])
//    return null
//
//
//fn readI64(s:String) Maybe((I64, String))
//    while get(s, 0) -> Just(c) | isSpace(c)
//        s = drop(s, 1)
//
//    let isMinus = false
//    if get(s, 0) -> Just('-')
//        isMinus = true
//        s = drop(s, 1)
//
//    let hasDigits = false
//    let x = 0
//    data digits []Char
//    while get(s, 0) -> Just(c) | isDigit(c)
//        hasDigits = true
//        digits.push(c)
//        s = drop(s, 1)
//
//    for digits -> {digit}
//        x = x*10 + conv(digit - '0'):I64
//
//    if !hasDigits
//        return Nothing()
//    if isMinus
//        x = 0 - x
//    return Just((x, s))


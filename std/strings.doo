module strings
import chars

type String [char]


fn {s String} stringEqual(s2 string) bool
    if s.len() != s2.len(); return false
    for s[..] -> i
        if s[i] != s2[i]; return false
    return true


fn {s String} find(c char) (bool, i64)
    for s[..] -> i
        if c == s[i]
            return (true, i)
    return (false, 0)


fn {s String} find(str string) (bool, i64)
    for s[..] -> i
        let matched = 0
        for s[i..] -> j | s[j] == str[matched]
            matched = matched + 1

        if matched == str.len()
            return (true, i)

    return (false, 0)


fn {s String} write(c char)
    s.push(c)


fn {s String} write(b bool)
    if b; s.write("true")
    else; s.write("false")


fn {s String} write(str string)
    for str -> c; s.push(c)


fn {s String} write(n i64)
    if n == 0
        s.push('0')
        return

    if n < 0
        s.push('-')
        n = -n

    data digits [i64]
    while n != 0
        digits.push(n % 10)
        n = n / 10
    while digits.len() > 0
        s.push('0' + char(digits.pop()))


fn {s String} read(start i64) (char, i64)
    let spaceCount = 0
    for s[start..] -> i | isSpace(s[i]) || isAlpha(s[i])
        if isAlpha(s[i])
            return (s[i], spaceCount + 1)
        else; spaceCount = spaceCount + 1

    return ('\0', 0)


fn {s String} read(start i64) (i64, i64)
    let spaceCount = 0
    for s[start..] -> i | isSpace(s[i])
        spaceCount = spaceCount + 1

    let n = 0
    let digitCount = 0
    for s[start+spaceCount..] -> i | isDigit(s[i])
        n = n*10 + i64(s[i] - '0')
        digitCount = digitCount + 1

    if digitCount > 0; return (n, spaceCount + digitCount)
    return (0, 0)
        
    

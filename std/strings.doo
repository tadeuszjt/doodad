module strings

import std/maybe
import std/char
import std/integer
import std/slice


//fn isPrefix(pre:String, str:String) bool
//    if len(pre) > len(str); return false
//    for pre[..] -> i
//        if str[i] != pre[i]; return false
//    return true
//
//
//
//fn readI64(s:String) Maybe((I64, String))
//    while get(s, 0) -> Just(c) | isSpace(c)
//        s = drop(s, 1)
//
//    let isMinus = false
//    if get(s, 0) -> Just('-')
//        isMinus = true
//        s = drop(s, 1)
//
//    let hasDigits = false
//    let x = 0
//    data digits []Char
//    while get(s, 0) -> Just(c) | isDigit(c)
//        hasDigits = true
//        digits.push(c)
//        s = drop(s, 1)
//
//    for digits -> {digit}
//        x = x*10 + conv(digit - '0'):I64
//
//    if !hasDigits
//        return Nothing()
//    if isMinus
//        x = 0 - x
//    return Just((x, s))

fn readI64(string []Char) (I64, I64).Maybe
    let idx = 0
    for string -> c | isSpace(c)
        idx = idx + 1

    if idx >= len(string)
        return conv(Nothing())

    return conv(Nothing())


module binaryTree

import std/maybe
import std/unordered
import std/bool
import std/features
import std/assert

tuple{K, V} Node {
    left  Node{K, V}.Key.Maybe
    right Node{K, V}.Key.Maybe
    key   K
    value V
}

tuple{K, V} Tree {
    nodes Node{K, V}.Unordered
    base  Node{K, V}.Key.Maybe
}


fn{K, V} Len::len(tree &Tree{K, V}) I64
    return tree.nodes.len


fn{K, V} Store::store(a &Node{K, V}, b Node{K, V})
    a.left = b.left
    a.right = b.right
    a.key = b.key
    a.value = b.value


fn{K, V} At::at(t &Tree{K, V}, key K) &V
    switch t.base
        just(current)
            while t.nodes[current].key != key   
                if t.nodes[current].left -> just(left) | key < t.nodes[current].key
                    current = left

                else if t.nodes[current].right -> just(right) | key > t.nodes[current].key
                    current = right

                else
                    assert(false, "error")

            return t.nodes[current].value

fn{K, V} insert(t &Tree{K, V}, key K, value V)
    fn{K, V} insertNode(n &Node{K, V}.Unordered, newNode Node{K, V}.Key, node Node{K, V}.Key)
        let lt = n[newNode].key < n[node].key
        let gt = n[newNode].key > n[node].key

        if      n[node].left  -> just(left)  | lt; n.insertNode(newNode, left)
        else if n[node].right -> just(right) | gt; n.insertNode(newNode, right)
        else if n[node].left  -> x | x.isNothing | lt; n[node].left = just(newNode)
        else if n[node].right -> x | x.isNothing | gt; n[node].right = just(newNode)
        else; assert(false, "key already in tree")

    let nodeKey = t.nodes.insert
    t.nodes[nodeKey].key = key
    t.nodes[nodeKey].value = value

    switch t.base
        x | x.isNothing; t.base = just(nodeKey)
        just(baseNode); t.nodes.insertNode(nodeKey, baseNode)


fn{K, V} delete(tree &Tree{K, V}, key K) 
    fn{K, V} leftMost(nodes &Node{K, V}.Unordered, node Node{K, V}.Key) Node{K, V}.Key
        if nodes[node].left -> just(left)
            return nodes.leftMost(left)
        return node

    fn{K, V} rightMost(nodes &Node{K, V}.Unordered, node Node{K, V}.Key) Node{K, V}.Key
        if nodes[node].right -> just(right)
            return nodes.rightMost(right)
        return node

    fn{K, V} deleteFromNode(n &Node{K, V}.Unordered, node Node{K, V}.Key, key K)
        assert(key != n[node].key, "key cannot match current node")

        if n[node].left -> just(left) | key == n[left].key // deleting node on left

            if n[left].right -> just(leftRight)
                let leftMost     = n.leftMost(leftRight)
                n[leftMost].left = n[left].left
                n[node].left     = just(leftRight)
            else
                n[node].left   = n[left].left

            n.delete(left)

        else if n[node].right -> just(right) | key == n[right].key // deleting from right
            if n[right].left -> just(rightLeft)
                let rightMost      = n.rightMost(rightLeft)
                n[rightMost].right = n[right].right
                n[node].right      = just(rightLeft)
            else; n[node].right    = n[right].right
            n.delete(right)
                
        else if n[node].left -> just(left) | key < n[node].key
            n.deleteFromNode(left, key)
    
        else if n[node].right -> just(right) | key > n[node].key
            n.deleteFromNode(right, key)

        else; assert(false, "invalid key")

    switch tree.base
        just(base)
            if tree.nodes[base].key == key
                if tree.nodes[base].left -> just(left)
                    tree.base = just(left)
                    tree.nodes[tree.nodes.rightMost(left)].right = tree.nodes[base].right

                else if tree.nodes[base].right -> just(right)
                    tree.base = just(right)
                    tree.nodes[tree.nodes.leftMost(right)].left = tree.nodes[base].left

                else
                    tree.base = nothing()

                tree.nodes.delete(base)

        x | x.isNothing
            tree.nodes.deleteFromNode(tree.base.fromJust, key)


fn{K, V} contains(tree &Tree{K, V}, key K) Bool
    fn{K, V} nodeContains(tree &Tree{K, V}, node Node{K, V}.Key, key K) Bool

        if tree.nodes[node].left -> just(left) | key < tree.nodes[node].key
            return tree.nodeContains(left, key)

        if tree.nodes[node].right -> just(right) | key > tree.nodes[node].key
            return tree.nodeContains(right, key)

        return key == tree.nodes[node].key

    switch tree.base
        x | x.isNothing; return false
        just(base); return tree.nodeContains(base, key)

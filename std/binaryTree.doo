module binaryTree

import builtin/all
import std/option
import std/unordered
import std/print

tuple{K, V} Node {
    left  Node{K, V}.unordered::Key.Option,
    right Node{K, V}.unordered::Key.Option,
    key   K,
    value V,
}
derives{K, V} Node{K, V} (copy, destroy)
derives{P, K, V} Node{K, V} (print{P})


tuple{K, V} Tree {
    nodes Node{K, V}.unordered::Unordered,
    base  Node{K, V}.unordered::Key.Option,
}
derives{K, V} Tree{K, V} (copy)


inst{P, K, V} print{P, Tree{K, V}} (p&, tree&)
    p.print(tree.nodes)


inst{K, V} container::len{Tree{K, V}} (tree &)
    return tree.nodes.len


fn{K, V} keys(tree &Tree{K, V}) Slice{K}
    return tree.nodes.unordered::values.key


inst{K, V} container::at{K, V, Tree{K, V}} (t&, key) -> &
    switch t.base
        some(current)
            while t.nodes[current].key != key   
                if t.nodes[current].left -> some(left) | key < t.nodes[current].key
                    current = left

                else if t.nodes[current].right -> some(right) | key > t.nodes[current].key
                    current = right

                else
                    assert(false)

            return t.nodes[current].value


inst{K, V} container::contains{K, Tree{K, V}} (tree &, key)
    switch tree.base
        none()    ; return false
        some(base); return tree.nodeContains(base, key)


fn{K, V} insert(t &Tree{K, V}, key K, value V)
    let nodeKey = t.nodes.insertZero
    t.nodes[nodeKey].key = key
    t.nodes[nodeKey].value = value

    switch t.base
        none()        ; t.base = some(nodeKey)
        some(baseNode); t.nodes.insertNode(nodeKey, baseNode)


fn{K, V} delete(tree &Tree{K, V}, key K) 
    switch tree.base
        some(base) | tree.nodes[base] -> baseNode | baseNode.key == key
            if baseNode.left -> some(left)
                tree.base = some(left)
                tree.nodes[tree.nodes.rightMost(left)].right = baseNode.right

            else if baseNode.right -> some(right)
                tree.base = some(right)
                tree.nodes[tree.nodes.leftMost(right)].left = baseNode.left

            else
                tree.base = none()

            tree.nodes.unordered::delete(base)

        some(base)
            tree.nodes.deleteFromNode(base, key)

        none()
            assert(false)



fn{K, V} leftMost(nodes &Node{K, V}.Unordered, node Node{K, V}.Key) Node{K, V}.Key
    if nodes[node].left -> some(left)
        return nodes.leftMost(left)
    return node


fn{K, V} rightMost(nodes &Node{K, V}.Unordered, node Node{K, V}.Key) Node{K, V}.Key
    if nodes[node].right -> some(right)
        return nodes.rightMost(right)
    return node


fn{K, V} deleteFromNode(n &Node{K, V}.Unordered, node Node{K, V}.Key, key K)
    assert(key != n[node].key)

    if n[node].left -> some(left) | key == n[left].key // deleting node on left

        if n[left].right -> some(leftRight)
            let leftMost     = n.leftMost(leftRight)
            n[leftMost].left = n[left].left
            n[node].left     = some(leftRight)
        else
            n[node].left   = n[left].left

        n.unordered::delete(left)

    else if n[node].right -> some(right) | key == n[right].key // deleting from right
        if n[right].left -> some(rightLeft)
            let rightMost      = n.rightMost(rightLeft)
            n[rightMost].right = n[right].right
            n[node].right      = some(rightLeft)
        else; n[node].right    = n[right].right
        n.unordered::delete(right)
                
    else if n[node].left -> some(left) | key < n[node].key
        n.deleteFromNode(left, key)

    else if n[node].right -> some(right) | key > n[node].key
        n.deleteFromNode(right, key)

    else; assert(false)


fn{K, V} insertNode(n &Node{K, V}.Unordered, newNode Node{K, V}.Key, node Node{K, V}.Key)
    let lt = n[newNode].key < n[node].key
    let gt = n[newNode].key > n[node].key

    if      n[node].left  -> some(left)  | lt; n.insertNode(newNode, left)
    else if n[node].right -> some(right) | gt; n.insertNode(newNode, right)
    else if n[node].left  -> none()      | lt; n[node].left  = some(newNode)
    else if n[node].right -> none()      | gt; n[node].right = some(newNode)
    else; assert(false)



fn{K, V} nodeContains(tree &Tree{K, V}, node Node{K, V}.Key, key K) Bool
    if tree.nodes[node].left -> some(left) | key < tree.nodes[node].key
        return tree.nodeContains(left, key)

    if tree.nodes[node].right -> some(right) | key > tree.nodes[node].key
        return tree.nodeContains(right, key)

    return key == tree.nodes[node].key



module binaryTree

import std/maybe
import std/unordered

type[K, V] Node {
    left  Maybe[unordered::Key[Node[K, V]]]
    right Maybe[Key[Node[K, V]]]
    key   K
    value V
}

type[K, V] Tree (
    nodes Unordered[Node[K, V]]
    base  Maybe[unordered::Key[Node[K, V]]]
)


fn[K, V] {tree Tree[K, V]} length() i64
    return tree.nodes.length()


fn[K, V] {tree Tree[K, V]} get(key ()K) ()V
    switch tree.base
        Just(node)
            while tree.nodes.at(node).key{} != key{}
                if      tree.nodes.at(node).left -> Just(left)   | key{} < tree.nodes.at(node).key{}; node = left
                else if tree.nodes.at(node).right -> Just(right) | key{} > tree.nodes.at(node).key{}; node = right
                else; assert(false, "error")

            data value ()V
            value{} = tree.nodes.at(node).value{}
            return value


fn[K, V] {tree Tree[K, V]} insert(key ()K, value ()V)
    fn[K, V] {tree Tree[K, V]} insertNode(newNode Key[Node[K, V]], node Key[Node[K, V]])
        let lt = tree.nodes.at(newNode).key < tree.nodes.at(node).key
        let gt = tree.nodes.at(newNode).key > tree.nodes.at(node).key
        let {l, r, k, v} = tree.nodes.at(node) in
            if !lt && !gt                ; assert(false, "key already in tree")
            else if l -> Just(left)  | lt; tree.insertNode(newNode, left)
            else if r -> Just(right) | gt; tree.insertNode(newNode, right)
            else if l -> Nothing()   | lt; l = Just(newNode)
            else if r -> Nothing()   | gt; r = Just(newNode)

    let nodeKey = tree.nodes.insert()
    let {_, _, k, v} = tree.nodes.at(nodeKey) in
        k{} = key{}
        v{} = value{}
    switch tree.base
        Nothing(); tree.base = Just(nodeKey)
        Just(baseNode)
            tree.insertNode(nodeKey, baseNode)


fn[K, V] {tree Tree[K, V]} delete(key ()K) 
    fn[K, V] {nodes Unordered[Node[K, V]]} leftMost(node Key[Node[K, V]]) Key[Node[K, V]]
        if nodes.at(node) -> {Just(left), _, _, _}
            return nodes.leftMost(left)
        return node

    fn[K, V] {nodes Unordered[Node[K, V]]} rightMost(node Key[Node[K, V]]) Key[Node[K, V]]
        if nodes.at(node) -> {_, Just(right), _, _}
            return nodes.rightMost(right)
        return node

    fn[K, V] {nodes Unordered[Node[K, V]]} deleteFromNode(node Key[Node[K, V]], key ()K)
        assert(key{} != nodes.at(node).key{}, "key cannot match current node")
        let leftm  = nodes.get(node).left
        let rightm = nodes.get(node).right

        if leftm -> Just(left) | key{} == nodes.at(left).key{} // deleting node on left
            if nodes.get(left).right -> Just(leftRight)
                let leftMost            = nodes.leftMost(leftRight)
                nodes.at(leftMost).left = nodes.at(left).left
                nodes.at(node).left     = Just(leftRight)
            else; nodes.at(node).left = nodes.at(left).left
            nodes.delete(left)

        else if rightm -> Just(right) | key{} == nodes.at(right).key{} // deleting from right
            if nodes.get(right).left -> Just(rightLeft)
                let rightMost             = nodes.rightMost(rightLeft)
                nodes.at(rightMost).right = nodes.at(right).right
                nodes.at(node).right      = Just(rightLeft)
            else; nodes.at(node).right = nodes.at(right).right
            nodes.delete(right)
                
        else if leftm -> Just(left) | key{} < nodes.at(node).key{}
            nodes.deleteFromNode(left, key)
    
        else if rightm -> Just(right) | key{} > nodes.at(node).key{}
            nodes.deleteFromNode(right, key)

        else; assert(false, "invalid key")

    switch tree.base
        Just(base)
            let {nodes} = {tree.nodes} in
                if nodes.at(base).key{} == key{}
                    if nodes.at(base).left -> Just(left)
                        tree.base = Just(left)
                        nodes.at(nodes.rightMost(left)).right = nodes.at(base).right
                    else if nodes.at(base).right -> Just(right)
                        tree.base = Just(right)
                        nodes.at(nodes.leftMost(right)).left = nodes.at(base).left
                    else; tree.base = Nothing()
                    nodes.delete(base)
                else; nodes.deleteFromNode(base, key)


fn[K, V] {tree Tree[K, V]} contains(key ()K) bool
    fn[K, V] {tree Tree[K, V]} nodeContains(node Key[Node[K, V]], key ()K) bool
        let (less, greater, mLeft, mRight)
        let {l, r, k, v} = tree.nodes.at(node) in
            mLeft   = l
            mRight  = r
            less    = key{} < k{}
            greater = key{} > k{}

        if      !less && !greater              ; return true
        else if mLeft  -> Just(left)  | less   ; return tree.nodeContains(left, key)
        else if mRight -> Just(right) | greater; return tree.nodeContains(right, key)
        else                                   ; return false

    switch tree.base
        Nothing();  return false
        Just(base); return tree.nodeContains(base, key)

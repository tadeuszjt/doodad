module binaryTree

import std/maybe
import std/unordered

type[K, V] Node {
    left  Maybe[unordered::Key[Node[K, V]]]
    right Maybe[Key[Node[K, V]]]
    key   K
    value V
}

type[K, V] Tree (
    nodes Unordered[Node[K, V]]
    base  Maybe[unordered::Key[Node[K, V]]]
)


fn[K, V] {tree Tree[K, V]} len() I64
    return tree.nodes.len()


fn[K, V] {tree Tree[K, V]} get(key ()K) ()V
    switch tree.base
        Just(node)
            while tree.nodes.at(node).key{} != key{}
                if      tree.nodes.at(node).left -> Just(left)   | key{} < tree.nodes.at(node).key{}; node = left
                else if tree.nodes.at(node).right -> Just(right) | key{} > tree.nodes.at(node).key{}; node = right
                else; assert(false, "error")

            data value ()V
            value{} = tree.nodes.at(node).value{}
            return value


fn[K, V] {tree Tree[K, V]} insert(key ()K, value ()V)
    fn[K, V] {n Unordered[Node[K, V]]} insertNode(newNode Key[Node[K, V]], node Key[Node[K, V]])
        let lt = n.get(newNode).key < n.get(node).key
        let gt = n.get(newNode).key > n.get(node).key

        if      n.at(node).left -> Just(left)   | lt ; n.insertNode(newNode, left)
        else if n.at(node).right -> Just(right) | gt ; n.insertNode(newNode, right)
        else if n.at(node).left -> Nothing()    | lt ; n.at(node).left = Just(newNode)
        else if n.at(node).right -> Nothing()   | gt ; n.at(node).right = Just(newNode)
        else; assert(false, "key already in tree")

    let nodeKey = tree.nodes.insert()
    let {_, _, k, v} = tree.nodes.at(nodeKey) in
        k{} = key{}
        v{} = value{}
    switch tree.base
        Nothing()     ; tree.base = Just(nodeKey)
        Just(baseNode); tree.nodes.insertNode(nodeKey, baseNode)


fn[K, V] {tree Tree[K, V]} delete(key ()K) 
    fn[K, V] {nodes Unordered[Node[K, V]]} leftMost(node Key[Node[K, V]]) Key[Node[K, V]]
        if nodes.at(node).left -> Just(left)
            return nodes.leftMost(left)
        return node

    fn[K, V] {nodes Unordered[Node[K, V]]} rightMost(node Key[Node[K, V]]) Key[Node[K, V]]
        if nodes.at(node).right -> Just(right)
            return nodes.rightMost(right)
        return node

    fn[K, V] {n Unordered[Node[K, V]]} deleteFromNode(node Key[Node[K, V]], key ()K)
        assert(key{} != n.at(node).key{}, "key cannot match current node")
        let leftm  = n.get(node).left
        let rightm = n.get(node).right

        if leftm -> Just(left) | key{} == n.at(left).key{} // deleting node on left
            if n.get(left).right -> Just(leftRight)
                let leftMost        = n.leftMost(leftRight)
                n.at(leftMost).left = n.get(left).left
                n.at(node).left     = Just(leftRight)
            else; n.at(node).left   = n.get(left).left
            n.delete(left)

        else if rightm -> Just(right) | key{} == n.at(right).key{} // deleting from right
            if n.get(right).left -> Just(rightLeft)
                let rightMost         = n.rightMost(rightLeft)
                n.at(rightMost).right = n.get(right).right
                n.at(node).right      = Just(rightLeft)
            else; n.at(node).right    = n.get(right).right
            n.delete(right)
                
        else if leftm -> Just(left) | key{} < n.at(node).key{}
            n.deleteFromNode(left, key)
    
        else if rightm -> Just(right) | key{} > n.at(node).key{}
            n.deleteFromNode(right, key)

        else; assert(false, "invalid key")

    switch tree.base
        Just(base)
            if tree.nodes.at(base).key{} == key{}
                if tree.nodes.at(base).left -> Just(left)
                    tree.base = Just(left)
                    tree.nodes.at(tree.nodes.rightMost(left)).right = tree.nodes.get(base).right
                else if tree.nodes.at(base).right -> Just(right)
                    tree.base = Just(right)
                    tree.nodes.at(tree.nodes.leftMost(right)).left = tree.nodes.get(base).left
                else; tree.base = Nothing()
                tree.nodes.delete(base)
            else; tree.nodes.deleteFromNode(base, key)


fn[K, V] {tree Tree[K, V]} contains(key ()K) Bool
    fn[K, V] {tree Tree[K, V]} nodeContains(node Key[Node[K, V]], key ()K) Bool
        let (less, greater, mLeft, mRight)
        let {l, r, k, v} = tree.nodes.at(node) in
            mLeft   = l
            mRight  = r
            less    = key{} < k{}
            greater = key{} > k{}

        if      !less && !greater              ; return true
        else if mLeft  -> Just(left)  | less   ; return tree.nodeContains(left, key)
        else if mRight -> Just(right) | greater; return tree.nodeContains(right, key)
        else                                   ; return false

    switch tree.base
        Nothing();  return false
        Just(base); return tree.nodeContains(base, key)

module integer

import std/bool

fn set(a &I64, b I64); ${ *$a = $b; }

fn construct(a I64) I64; return a

fn construct(a F64) I64
    let b : I64
    ${ $b = $a; }
    return b

fn construct(c Char) I64
    let n = 0
    ${ $n = $c; }
    return n


fn add(a I64, b I64) I64
    let r : I64
    ${ $r = $a + $b; }
    return r

fn subtract(a I64, b I64) I64
    let r : I64
    ${ $r = $a - $b; }
    return r


fn subtract(a I64) I64
    let r : I64
    ${ $r = - $a; }
    return r

fn times(a I64, b I64) I64
    let r : I64
    ${ $r = $a * $b; }
    return r

fn divide(a I64, b I64) I64
    let r : I64
    ${ $r = $a / $b; }
    return r

fn modulo(a I64, b I64) I64
    let r : I64
    ${ $r = $a % $b; }
    return r

fn less(a I64, b I64) Bool
    let r : Bool
    ${ $r = $a < $b; }
    return r

fn greater(a I64, b I64) Bool
    let r : Bool
    ${ $r = $a > $b; }
    return r

fn greaterEqual(a I64, b I64) Bool
    let r : Bool
    ${ $r = $a >= $b; }
    return r

fn equal(a I64, b I64) Bool
    let r : Bool
    ${ $r = $a == $b; }
    return r


module map

import std/maybe
import std/binaryTree

type[K, V] Map (tree : Tree(K, V))


fn[K, V] {m:Map(K, V)} insert(key:()K, value:()V)
    if m.tree.contains(key)
        m.tree.delete(key)
    m.tree.insert(key, value)

fn[K, V] {m:Map(K, V)} find(key:()K) Maybe(()V)
    if m.tree.contains(key); return Just(m.tree.get(key))
    else;                    return Nothing()

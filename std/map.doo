module map

import std/maybe
import std/binaryTree

type[K, V] Map (Tree[K, V])

fn[K, V] tree(m &Map[K, V]) &Tree[K, V] 


fn[K, V] insert(m &Map[K, V], key K, value V)
    if m.tree.contains(key)
        m.tree.delete(key)
    m.tree.insert(key, value)


//fn[K, V] {m Map[K, V]} contains(key ()K) Bool
//    return m.tree.contains(key)
//
//
//fn[K, V] {m Map[K, V]} delete(key ()K)
//    m.tree.delete(key)

module map

import std/maybe
import std/binaryTree
import std/features

tuple{K, V} Map {
    tree Tree{K, V}
}


fn{K, V} Len::len(m &Map{K, V}) I64
    return m.tree.len


fn{K, V} At::at(m &Map{K, V}, key K) &V
    let true = m.contains(key)
    return m.tree[key]


fn{K, V} insert(m &Map{K, V}, key K, value V)
    if m.tree.contains(key)
        m.tree.delete(key)
    m.tree.insert(key, value)


fn{K, V} contains(m &Map{K, V}, key K) Bool
    return m.tree.contains(key)

fn{K, V} delete(m &Map{K, V}, key K)
    m.tree.delete(key)

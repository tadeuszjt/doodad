module map

import std/maybe
import std/table


type[K, V] Map []{keys:K, values:V}


fn[K, V] {m:Map(K, V)} insert(key:()K, value:()V)
    for m[..] -> i
        if m.keys[i] == key{}
            m.values[i] = value{}
            return
    
    m++
    m.keys[len(m) - 1]   = key{}
    m.values[len(m) - 1] = value{}


fn[K, V] {m:Map(K, V)} find(key:()K) Maybe(()V)
    for m[..] -> i
        if m.keys[i] == key{}
            return Just( conv(m.values[i]) )
    return Nothing()

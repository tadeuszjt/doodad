module map

import std/maybe


type[K, V] Map [K, V]

fn[K, V] {m:Map(K, V)} insert(key:K, value:V)
    for m[..] -> i | m[i] -> (k, v)
        if k == key
            m[i] = (k, value)
            return
    m += ([key], [value])


fn[K, V] {m:Map(K, V)} find(key:K) Maybe(V)
    for m -> (k, v)
        if k == key
            return conv(v)
    return null

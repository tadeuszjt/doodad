module sum

fn{A, B} Construct::construct(a A) Sum{A, B}; return conv(a)
fn{A, B} Construct::construct(a B) Sum{A, B}; return conv(a)

fn{A, B, C} Construct::construct(a A) Sum{A, B, C}; return conv(a)
fn{A, B, C} Construct::construct(a B) Sum{A, B, C}; return conv(a)
fn{A, B, C} Construct::construct(a C) Sum{A, B, C}; return conv(a)

fn{A, B, C, D} Construct::construct(a A) Sum{A, B, C, D}; return conv(a)
fn{A, B, C, D} Construct::construct(a B) Sum{A, B, C, D}; return conv(a)
fn{A, B, C, D} Construct::construct(a C) Sum{A, B, C, D}; return conv(a)
fn{A, B, C, D} Construct::construct(a D) Sum{A, B, C, D}; return conv(a)



fn{A, B, C} Store::store(a &Sum{A, B, C}, b Sum{A, B, C})
    ${ memcpy($a, &$b, sizeof($b)); }

fn{A, B} Store::store(a &Sum{A, B}, b Sum{A, B})
    ${ memcpy($a, &$b, sizeof($b)); }

module sum

import std/features
import std/tuple


fn{A, B} Store::store(a &Sum{A, B}, b Sum{A, B})
    let en = b.builtin_sum_enum
    a.builtin_sum_reset(en)
    switch en
        0; a.0 = b.0
        1; a.1 = b.1


fn{A, B, C} Store::store(a &Sum{A, B, C}, b Sum{A, B, C})
    let en = b.builtin_sum_enum
    a.builtin_sum_reset(en)
    switch en
        0; a.0 = b.0
        1; a.1 = b.1
        2; a.2 = b.2


fn{A, B} Compare::equal(a Sum{A, B}, b Sum{A, B}) Bool
    let enA = builtin_sum_enum(a)
    let enB = builtin_sum_enum(b)
    if enA != enB
        return false

    switch enA
        0; return Compare::equal(a.0, b.0)
        1; return Compare::equal(a.1, b.1)


fn{A, B, C} Compare::equal(a Sum{A, B, C}, b Sum{A, B, C}) Bool
    let enA = builtin_sum_enum(a)
    let enB = builtin_sum_enum(b)
    if enA != enB
        return false

    switch enA
        0; return Compare::equal(a.0, b.0)
        1; return Compare::equal(a.1, b.1)
        2; return Compare::equal(a.2, b.2)
    

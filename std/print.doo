module print

import builtin/all


func{P, T} print(P, T)
func{P, T} printLn(P, T)


inst print{ Char.Table, Char } (t&, c)
    t.push(c)


inst{T} print{ T, Char.Slice } (t&, s)
    for s -> c
        t.print(c)


inst{P} printLn{ P, Char.Slice } (p&, s)
    p.print(s)
    p.print('\n')

inst{P} printLn{ P, I64 } (p&, n)
    p.print(n)
    p.print('\n')

inst{T} print{ T, U8 }  (p&, n); p.print(convert(n) : I64)
inst{T} print{ T, I32 } (p&, n); p.print(convert(n) : I64)


inst{P} print{P, F64} (p&, f)
    let len = 0
    let array : Array{64, Char}
    ${
        char str[64] = {0};
        sprintf(str, "%g", $f);
        for (int i = 0; str[i] != '\0'; i++) {
            $array.arr[i] = str[i];
            $len++;
        }
    }

    for (0, len) -> i
        p.print(array[i])


inst{T} print{ T, I64 } (t&, n)
    if n < 0
        t.print('-')
        n = 0 - n
    else if n == 0
        t.print('0')
        return

    data digits Char.Table

    while n != 0
        digits.push( '0' + convert(n % 10) )
        n = n / 10

    for (0, digits.len) -> idx
        t.print(digits[digits.len - 1 - idx])


inst{T} print{ T, F32 } (p&, n)
    let str : Array{ 32, Char } 
    ${ sprintf( $str.arr, "%g", $n ); }
    for str -> c
        p.print(c)


inst{T} print{ T, Bool } (t&, b)
    if b
        t.print("true")
    else
        t.print("false")


inst{T, G} print{ T, G.Table } (t&, g&)
    t.print('[')

    for (0, g.len) -> idx
        t.print(g[idx])
        if idx < (g.len - 1)
            t.print(", ")

    t.print(']')


inst{P, S, T} printLn{P, Array{S, T}} (p&, array)
    p.print(array)
    p.print('\n')


inst{P, S, T} print{ P, Array{S, T} } (p&, array)
    p.print('[')

    for (0, array.len) -> idx
        p.print(array[idx])
        if idx < (array.len - 1)
            p.print(", ")

    p.print(']')


inst{P, A, B} printLn{P, Tuple{A, B}} (p&, t)
    p.print(t)
    p.print('\n')
inst{P, A, B} print{ P, Tuple{A, B} } (a&, b)
    a.print('(')
    a.print( b.builtinField{0, A, Tuple{A, B}} )
    a.print(", ")
    a.print( b.1 )
    a.print(')')


inst{P, A, B, C} printLn{P, Tuple{A, B, C}} (p&, t)
    p.print(t)
    p.print('\n')
inst{P, A, B, C} print{ P, Tuple{A, B, C} } (a&, b)
    a.print('(')
    a.print( b.0 )
    a.print(", ")
    a.print( b.tuplePattern{B, 3, 1, Tuple{A, B, C}} )
    a.print(", ")
    a.print( b.2 )
    a.print(')')


inst{P, A, B, C, D} print{ P, Tuple{A, B, C, D} } (a&, b)
    a.print('(')
    a.print( b.0 )
    a.print(", ")
    a.print( b.1 )
    a.print(", ")
    a.print( b.2  )
    a.print(", ")
    a.print( b.3  )
    a.print(')')

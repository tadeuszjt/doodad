module sfml

import std/colours
import std/maybe

include <SFML/Graphics.h>
link csfml-graphics
link csfml-window
link csfml-system


type Vec2f (x F32, y F32)

type Rectf (min Vec2f, max Vec2f)

type Vertex (position Vec2f, colour Colour, texCoords Vec2f)

type Window I64

type Event
    None()
    Closed()


fn {w Window} create()
    ${
        sfVideoMode mode = {640, 480, 32};
        sfRenderWindow *window = sfRenderWindow_create(mode, "benis", sfClose | sfResize, NULL);
        assert(window != NULL);
        *$w = (int64_t)(window);
    }


fn {w Window} close()
    ${ sfRenderWindow_close((sfRenderWindow*)(*$w)); }


fn {w Window} destroy()
    ${ sfRenderWindow_close((sfRenderWindow*)(*$w)); }


fn {w Window} getSize() (I64, I64)
    let x = 0
    let y = 0
    ${
        sfVector2u vec = sfRenderWindow_getSize((sfRenderWindow*)(*$w));
        $x = vec.x;
        $y = vec.y;
    }
    return (x, y)


fn {w Window} clearWindow(colour Colour)
    ${
        sfColor color = {$colour.m0, $colour.m1, $colour.m2, $colour.m3};
        sfRenderWindow_clear((sfRenderWindow*)(*$w), color);
    }


fn {w Window} display()
    ${ sfRenderWindow_display((sfRenderWindow*)(*$w)); }


fn {w Window} isOpen() Bool
    let isOpen = false
    ${ $isOpen = sfRenderWindow_isOpen((sfRenderWindow*)(*$w)); }
    return isOpen


fn {w Window} pollEvent() Maybe[Event]
    let continue = false
    let event:Event
    ${
        sfEvent event;
        $continue = sfRenderWindow_pollEvent((sfRenderWindow*)(*$w), &event);
        if (event.type == sfEvtClosed) {
            $event.en = 1;
        }
    }
    if continue
        return Just(event)
    return Nothing()


fn {w Window, vertices Table[Vertex]} drawPrimitives()
    ${
        sfRenderWindow_drawPrimitives(
            (sfRenderWindow*)*$w,
            (const sfVertex *)$vertices->r0,
            $vertices->len,
            sfTriangles,
            NULL
        );
    }

fn {w Window} setViewFromRect(rect Rectf)
    let (l, t, r, b) = (rect.min.x, rect.min.y, rect.max.x, rect.max.y)
    ${
        sfFloatRect rect = {$l, $t, $r, $b};
        sfView *view = sfView_createFromRect(rect);
        sfRenderWindow_setView((sfRenderWindow*)(*$w), view);
    }

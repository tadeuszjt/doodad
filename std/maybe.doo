module maybe

type Nothing Tuple{}

type{T} Maybe Sum{
    Nothing,
    T,
}


fn construct() Nothing
    let n : Nothing
    return n


fn{T} construct(x T)   T.Maybe; return conv(x)
fn{T} just(m &T.Maybe) &T     ; return &m.1


fn{T} set(a &T.Maybe, b T.Maybe)
    ${ memcpy($a, &$b, sizeof($b)); }


fn{T} isJust(m &T.Maybe) Bool
    if m -> T(_)
        return true
    return false

fn{T} isNone(m &T.Maybe) Bool
    if m -> T(_)
        return false
    return true

module maybe

type Nothing Tuple{}

type{T} Maybe Sum{
    Nothing,
    T,
}


fn Construct::construct() Nothing
    let n : Nothing
    return n


fn{T} Construct::construct(x T)   T.Maybe; return conv(x)
fn{T} just(x T)        T.Maybe; return conv(x)
fn{T} nothing()        T.Maybe; return conv(Nothing())


fn Store::store(a &Nothing, b Nothing)
    return

fn{T} Store::store(a &T.Maybe, b T.Maybe)
    ${ memcpy($a, &$b, sizeof($b)); }


fn{T} isJust(m &T.Maybe) Bool; return builtin_sum_enum(&m) == 1
fn{T} isNothing(m &T.Maybe) Bool; return builtin_sum_enum(&m) == 0
fn{T} fromJust(m &T.Maybe) &T
    return &m.1


module builtin

// memory
fn{T} builtinStore(a &T, b T); ${ *$a = $b; }

// types
fn{T, G} pretend(a &T) G; ${}


// arithmetic
fn{T} builtinAdd(a T, b T) T; ${ return $a + $b; }

fn{T} builtinSubtract(a T, b T) T; ${ return $a - $b; }
fn{T} builtinMultiply(a T, b T) T; ${ return $a * $b; }
fn{T} builtinDivide(a T, b T) T; ${ return $a / $b; }
fn{T} builtinModulo(a T, b T) T; ${ return $a % $b; }


// boolean
fn{T} builtinEqual(a T, b T)       Bool; ${ return $a == $b; }
fn{T} builtinLessThan(a T, b T)    Bool; ${ return $a < $b; }
fn{T} builtinGreaterThan(a T, b T) Bool; ${ return $a > $b; }

fn{T} builtinAnd(a T, b T) T; ${ return $a && $b; }
fn{T} builtinOr(a T, b T)  T; ${ return $a || $b; }
fn{T} builtinNot(a T)      T; ${ return !$a; }


// container
fn{T} builtinTableLen(a &T.Table) I64;      ${}
fn{T} builtinTableAppend(a &T.Table);       ${}
fn{T} builtinTableAt(a &T.Table, b I64) &T; ${}

fn{T, S} builtinArrayLen(a &Array{S, T}) I64; ${}
fn{T, S} builtinArrayAt(a &Array{S, T}, idx I64) &T; ${}

fn{T} builtinSliceLen(a &T.Slice) I64; ${}
fn{T} builtinSliceAt(a &T.Slice, b I64) &T; ${}


// sum
fn{T} builtinSumEnum(t &T) I64; ${}
fn{T} builtinSumReset(t &T, en I64); ${}

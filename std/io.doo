module io

import strings
import_c stdio.h

type FileKey i64
type FilePtr i64

type OpenFile (name String, ptr FilePtr)

type Io (
    openFiles [OpenFile]
)


fn {io Io} openFile(fileName string)
    data fileNameStr String 
    fileNameStr.write(fileName)

    for io.openFiles[..] -> i
        if io.openFiles[i].name == fileNameStr
            print("openFile: file already open", fileNameStr)
            return


    let fp = c::fopen(fileName.unsafe_ptr(), "a+".unsafe_ptr())
    let ptr = FilePtr(i64(fp))

    let i = io.openFiles.push()
    io.openFiles[i].name.write(fileName)
    io.openFiles[i].ptr = ptr


fn {io Io} closeFile(fileName string)
    data fileNameStr String 
    fileNameStr.write(fileName)

    for io.openFiles[..] -> i
        if io.openFiles[i].name == fileNameStr
            c::fclose(unsafe_ptr_from_int(io.openFiles[i].ptr))
            io.openFiles.delete(i)
            return

    print("closeFile: file not found:", fileName)



fn {io Io} read() char
    return char(c::getchar())


fn {io Io} read(key FileKey) char
    return char(fgetc(unsafe_ptr_from_int(key)))


fn {io Io, line String} readLn(key FileKey) bool
    while true
        switch io.read(key):char
            x | x == -1; return false
            '\n'; return true
            '\0'; return true
            c;    line.write(c)


fn {io Io} write(c char)
    c::putchar(i32(c))


fn {io Io} write(key FileKey, c char)
    c::fputc(i32(c), unsafe_ptr_from_int(key))


fn {io Io} write(s string)
    for s -> c
        io.write(c)


fn {io Io} write(key FileKey, s string)
    io.write(s)


fn {io Io, line String} writeLn(key FileKey)
    for line -> c
        io.write(key, c)
    io.write(key, '\n')


fn {io Io, line String} writeLn()
    for line -> c
        io.write(c)
    io.write('\n')


fn {io Io} writeLn(s string)
    io.write(s)
    io.write('\n')


fn {io Io} writeLn(key FileKey, s string)
    io.write(key, s)
    io.write(key, '\n')



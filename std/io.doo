module io

import std/builtin
import std/store
import std/print


type StdOut Tuple{}
type StdIn  Tuple{}

tuple Io {
    stdout StdOut
    stdin  StdIn
}


aquires print{ StdOut, Char } (stdout&, c)
    ${ putchar($c); }


//fn getChar(stdin &StdIn) Char
//    let c : Char
//    ${ $c = fgetc(stdin); }
//    return c
//
//
//fn getLine(stdin &StdIn, line &Char.Table) Bool
//    while true
//        switch stdin.getChar
//            '\n'          ; return true
//            x | x == eof(); return false
//            x             ; line.push(x)
//    
//
//
//fn {io Io} openFile(fileName String)
//    assert(!io.files.contains(fileName), fileName + " already open")
//    let ptr = 0
//    ${
//        FILE *fp = fopen($fileName, "w+");
//        assert(fp != NULL);
//        $ptr = (int64_t)(fp);
//    }
//    io.files.insert(fileName, ptr)
//
//
//fn {io Io} closeFile(fileName String)
//    assert(io.files.contains(fileName), fileName + " is not open")
//    let Just(ptr) = io.files.find(fileName)
//    ${ fclose((FILE*)$ptr); }
//    io.files.delete(fileName)
//
//
//fn {io Io} fPutStr(fileName String, str String)
//    assert(io.files.contains(fileName), fileName + " is not open")
//    let Just(ptr) = io.files.find(fileName)
//    ${ fprintf((FILE*)$ptr, "%s", $str); }
//
//
//fn {io Io} fPutStrLn(fileName String, str String)
//    assert(io.files.contains(fileName), fileName + " is not open")
//    let Just(ptr) = io.files.find(fileName)
//    ${ fprintf((FILE*)$ptr, "%s\n", $str); }
//
//
//fn {io Io} putStrLn(s String)
//    ${ printf("%s\n", $s); }
//
//
//fn {io Io} putStr(s String)
//    ${ printf("%s", $s); }



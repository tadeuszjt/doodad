module set

import builtin/all
import std/print
import std/io


type{T} Set T.Table

derives{T} Set{T} (copy, container::len, container::at{I64, T}, forAt{T}, forEnd, slice{T},
    compare, equal, destroy)
derives{P, T} Set{T} (print{P})


fn{T} sortSet(set &T.Set)
    while true
        let changed = false

        for (0, set.len - 1) -> i
            if set[i] > set[i + 1]
                let tmp = set[i]
                set[i] = set[i + 1]
                set[i + 1] = tmp
                changed = true

        if !changed
            return


inst{T} makeSlice{T, Set{T}} (slice)
    let set
    for slice -> elem
        set.insert(elem)

    return set


inst{T} contains{T, Set{T}} (set, elem)
    if set.len == 0; return false
    if elem < set[0]; return false
    if elem > set[set.len - 1]; return false

    for (0, set.len) -> i
        if set[i] == elem
            return true
    return false


fn{T} insert(set &T.Set, elem T)
    if set.len == 0
        (set.pretend : T.Table).push(elem)
    else if elem > set[set.len - 1]
        (set.pretend : T.Table).push(elem)
    else if !set.contains(elem)
        (set.pretend : T.Table).push(elem)
        set.sortSet


fn{T} delete(set &T.Set, elem T)
    if set.len == 0
        return
    if elem < set[0]
        return
    if elem > set[set.len - 1]
        return

    for (0, set.len) -> i
        if set[i] == elem
            set[i] = set[set.len - 1]
            (set.pretend : T.Table).pop
            set.sortSet
            return


inst{T} arithmetic::add{Set{T}} (a, b)
    let c = a
    for b[..] -> e
        c.insert(e)
    return c


inst{T} arithmetic::subtract{Set{T}} (a, b)
    let c = a
    for b -> elem
        c.delete(elem)
    return c

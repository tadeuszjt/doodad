module for

import std/container
import std/convert


feature{T}    forBegin(T) I64
feature{T}    forEnd(T) I64
feature{T, V} forAt( T{V}, I64 ) V

acquires{T} forBegin{ T.Slice } (s&);         return 0
acquires{T} forEnd{ T.Slice } (s&);           return s.len
acquires{T} forAt{ Slice, T } (s&, idx) -> &; return s.at(idx)

acquires forBegin{ Tuple{I64, I64} } (t);      return t.0
acquires forEnd{   Tuple{I64, I64} } (t);      return t.1
acquires forAt{    Tuple{I64}, I64 } (t, idx); return idx


acquires{T} forBegin{ T.Table } (s&);         return 0
acquires{T} forEnd{ T.Table } (s&);           return s.len
acquires{T} forAt{ Table, T } (s&, idx) -> &; return s[idx]


acquires{T, S} forBegin{ Array{S, T} } (a&);        return 0
acquires{T, S} forEnd{ Array{S, T} }   (a&);        return a.len
acquires{T, S} forAt{ Array{S}, T } (a&, idx) -> &; return a[idx]

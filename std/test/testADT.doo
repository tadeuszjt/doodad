module testAdt 


fn testEnum()
    type Type { Enum0() | Enum1() | Enum2() }
    let x = Enum1()
    switch x 
        Enum0(); let true = false
        Enum1(); let true = true
        Enum2(); let true = false


fn testTypes() 
    type Type { i64 | bool | f32 } 
    let i = Type(3)
    switch i 
        i64(n); let 3 = n
    switch Type(false) 
        bool(false);


fn testOneArg()
    type IntType i32
    type Type { Enum0() | Arg(IntType) }
    let x = Arg(4)
    switch x
        Enum0(); let true = false 
        Arg(n) ; let 4:IntType = n


fn testTwoArgs() 
    type A { bool | (i64, f64) }
    type B { Args(A, bool) }

    let x = Args(A(true), false)


fn testNull() 
    let x = conv('x'):{ null | char }
    switch x 
        null; let true = false
        char(c); let 'x' = c


fn testTuples() 
    type Lexeme { LexNull() | LexInt(i64) }
    type LexResult (Lexeme, i64)
    let x =  conv(LexResult(LexNull(), 12)):{ null | LexResult }
    switch x 
        LexResult(LexNull(), 12);


fn testAdt()
    testEnum()
    testTypes()
    testOneArg()
    testTwoArgs()
    testTuples()
    print("testAdt passed")

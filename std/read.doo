module read

import std/option
import std/boolean
import std/compare
import std/container
import std/option
import std/tuple
import std/store
import std/builtin
import std/arithmetic
import std/char
import std/assert
import std/for
import std/convert


feature{R, T} read(R, I64) Tuple{T, I64}.Option


acquires read{ Char.Table, Char } (r&, idx)
    if idx < 0 || idx > r.len
        return none()
    return some( (r[idx], 1) )


acquires{R} read{ R, I64 } (r&, start)
    let idx = start

    while r.read(idx) -> some(c, n) | isSpace(c)
        idx = idx + n

    let isMinus = false

    if r.read(idx) -> some('-', n)
        idx = idx + n
        isMinus = true

    data digits Char.Table

    while r.read(idx) -> some(c, n) | isDigit(c)
        idx = idx + n
        digits.push(c)

    if digits.len == 0
        return none()

    let num = 0
    for digits -> digit
        num = num * 10 + convert(digit - '0')

    if isMinus
        num = -num
        
    return some( (num, idx - start) )

module stack

import builtin/all
import std/print


tuple{S, T} Stack {
    length I64,
    array Array{S, T}
}
derives{S, T} Stack{S, T} (builtin::copy, builtin::destroy)


inst{S, T} makeSlice{T, Stack{S, T}} (slice)
    let stack
    for (0, slice.len) -> i
        stack.push(slice[i])
    return stack


inst{S, T} slice{T, Stack{S, T}} (stack&, start, end)
    return stack.array[start..min(stack.len, end)]


inst{S, T} len{Stack{S, T}} (s&)
    return s.length


inst{S, T} at{I64, T, Stack{S, T}} (s&, idx) -> &
    assert(idx >= 0 && idx < s.len)
    return s.array[idx]


inst{S, T} compare::equal{Stack{S, T}} (a, b)
    return compare(a, b) == eq()


inst{S, T} compare::compare{Stack{S, T}} (a, b)
    return compare(a[..], b[..])


inst{S, T, P} print::print{P, Stack{S, T}} (p&, stack)
    p.print("Stack[")

    for (0, stack.len) -> i
        p.print(stack[i])
        if i < (stack.len - 1)
            p.print(", ")
        
    p.print(']')


inst{S, T} forEnd{Stack{S, T}} (s)
    return s.len


inst{S, T} forAt{T, Stack{S, T}} (s&, idx) -> &
    return s[idx]
    

inst{S, T} container::push{T, Stack{S, T}} (s&, elem)
    assert(s.length < s.array.len)
    s.array[s.length] = elem
    s.length = s.length + 1


inst{S, T} container::pop{T, Stack{S, T}} (s&)
    assert(s.length > 0)
    s.length = s.length - 1
    return s.array[s.length]



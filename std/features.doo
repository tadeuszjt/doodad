module features

feature Arithmetic
    fn{T} add(a T, b T) T
    fn{T} subtract(a T, b T) T
    fn{T} times(a T, b T) T
    fn{T} divide(a T, b T) T
    fn{T} modulo(a T, b T) T


feature Boolean
    fn{T} and(a T, b T) Bool
    fn{T} or(a T, b T) Bool
    fn{T} not(a T) T


feature Compare
    fn{T} greater(a T, b T) Bool
    fn{T} less(a T, b T) Bool
    fn{T} equal(a T, b T) Bool


feature Len
    fn{T} len(a &T) I64


feature At
    fn{T, K, V} at(a &T, i K) &V


feature Construct
    fn{T, A}       construct(a A) T
    fn{T, A, B}    construct(a A, b B) T
    fn{T, A, B, C} construct(a A, b B, c C) T


feature Store
    fn{T, G} store(a &T, b G)


feature For
    fn{T} begin(t &T) I64
    fn{T} end(t &T) I64
    fn{T, G} at(t &T, idx I64) &G

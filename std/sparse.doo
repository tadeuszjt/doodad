module sparse

import std/table


type[T] Key I64

type[T] Sparse (values Table[T], empty Table[Key[T]])


fn[T] {s Sparse[T]} len() I64
    return s.values.len() - s.empty.len()


fn[T] {s Sparse[T]} at(key Key[T]) {}T
    return builtin_at(s.values, key)


fn[T] {s Sparse[T]} insert(value ()T) Key[T]
    if s.empty.len() > 0
        let key = s.empty.pop()
        builtin_at(s.values, key) = value{}
        return key

    s.values.push(value)
    return conv(s.values.len() - 1)


fn[T] {s Sparse[T]} insert() Key[T]
    let value:()T
    if s.empty.len() > 0
        let key = s.empty.pop()
        builtin_at(s.values, key) = value{}
        return key

    s.values.push(value)
    return conv(s.values.len() - 1)


fn[T] {s Sparse[T]} delete(key Key[T])
    if key == conv(s.values.len() - 1)
        s.values.pop()
    else
        s.empty.push(key)


fn[T] {s Sparse[T]} get(key Key[T]) ()T
    data elem ()T
    elem{} = builtin_at(s.values, key)
    return elem


fn[T] {s Sparse[T]} replace(key Key[T], elem ()T)
    builtin_at(s.values, key) = elem{}

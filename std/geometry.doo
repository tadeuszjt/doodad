module geometry

import builtin/all
import std/maths
import std/print
import std/maths
import std/rand

tuple Vec2 {
    x F64,
    y F64
}

tuple Rect {
    min Vec2,
    max Vec2
}

type Mat3 Array{3, Array{3, F64}}

type Mat4 Array{4, Array{4, F64}}


derives Vec2    (copy, destroy, add, subtract, multiply, make2{F64, F64}, rand::uniform)
derives{P} Vec2 (print{P})
derives{T} Vec2 (convert{Tuple{T, T}})


derives Rect (copy, destroy, make2{Vec2, Vec2}, rand::uniform)
derives Mat3 (copy, destroy, add, subtract, at{I64, Array{3, F64}}, makeSlice{Array{3, F64}})
derives Mat4 (copy, destroy, add, subtract, at{I64, Array{4, F64}}, makeSlice{Array{4, F64}})

func{T} transpose(T) T

func{T} numRows(T) I64
func{T} numCols(T) I64


inst numRows{Mat3} (mat3); return 3
inst numRows{Mat4} (mat4); return 4
inst numCols{Mat3} (mat3); return 3
inst numCols{Mat4} (mat4); return 4


inst multiply{Mat3} (a, b)
    let mat3

    for (0, mat3.numRows) -> r
        mat3[r][0] = a[r][0]*b[0][0] + a[r][1]*b[1][0] + a[r][2]*b[2][0]
        mat3[r][1] = a[r][0]*b[0][1] + a[r][1]*b[1][1] + a[r][2]*b[2][1]
        mat3[r][2] = a[r][0]*b[0][2] + a[r][1]*b[1][2] + a[r][2]*b[2][2]

    return mat3


inst multiply{Mat4} (a, b)
    let mat4

    for (0, mat4.numRows) -> r
        mat4[r][0] = a[r][0]*b[0][0] + a[r][1]*b[1][0] + a[r][2]*b[2][0] + a[r][3]*b[3][0]
        mat4[r][1] = a[r][0]*b[0][1] + a[r][1]*b[1][1] + a[r][2]*b[2][1] + a[r][3]*b[3][1]
        mat4[r][2] = a[r][0]*b[0][2] + a[r][1]*b[1][2] + a[r][2]*b[2][2] + a[r][3]*b[3][2]
        mat4[r][3] = a[r][0]*b[0][3] + a[r][1]*b[1][3] + a[r][2]*b[2][3] + a[r][3]*b[3][3]

    return mat4


inst transpose{Mat3} (a)
    let b
    for (0, b.numRows) -> r
        b[r][0] = a[0][r]
        b[r][1] = a[1][r]
        b[r][2] = a[2][r]
    return b


fn length(v Vec2) F64
    return maths::sqrt(v.x*v.x + v.y*v.y)


fn rotate(v Vec2, r F64) Vec2
    return mat3Rotation(r).transformVec2(v, 1.0)


fn containsVec2(r Rect, v Vec2) Bool
    return v.x >= r.min.x && v.y >= r.min.y && v.x < r.max.x && v.y < r.max.y


fn mat3Identity() Mat3
    return [
        [1.0, 0.0, 0.0],
        [0.0, 1.0, 0.0],
        [0.0, 0.0, 1.0],
    ]


fn mat4Identity() Mat4
    return [
        [1.0, 0.0, 0.0, 0.0],
        [0.0, 1.0, 0.0, 0.0],
        [0.0, 0.0, 1.0, 0.0],
        [0.0, 0.0, 0.0, 1.0],
    ]


fn mat3Scalar(scale Vec2) Mat3
    return [
        [scale.x, 0.0,     0.0],
        [0.0,     scale.y, 0.0],
        [0.0,     0.0,     1.0],
    ]


fn mat3Rotation(theta F64) Mat3
    let c = maths::cos(theta)
    let s = maths::sin(theta)

    return [
        [c,   -s,  0.0],
        [s,   c,   0.0],
        [0.0, 0.0, 1.0],
    ]


fn mat3Translation(v Vec2) Mat3
    return [
        [1.0, 0.0, v.x],
        [0.0, 1.0, v.y],
        [0.0, 0.0, 1.0],
    ]


fn transformVec2(m &Mat3, v Vec2, w F64) Vec2
    return (
        m[0][0]*v.x + m[0][1]*v.y + m[0][2]*w,
        m[1][0]*v.x + m[1][1]*v.y + m[1][2]*w
    )


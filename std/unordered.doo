module unordered

import std/sparse
import std/container
import std/store
import std/assert
import std/tuple
import std/builtin
import std/arithmetic


type{T} Key I64


tuple{T} Entry {
    key   I64.Key
    value T
}


tuple{T} Unordered {
    indices I64.Sparse
    values T.Entry.Table
}


acquires{T} store{ Key{T} } (a&, b)
    (a.pretend:I64).store( b.pretend:I64 )


acquires{T} store{ Entry{T} } (a&, b)
    a.key = b.key
    a.value = b.value


acquires{T} len{ T.Unordered } (u&)
    return u.values.len


fn{T} insertZero(u &T.Unordered) T.Key
    let key = u.indices.sparse::insert(u.values.len)

    u.values.grow
    u.values[u.values.len - 1].key   = key.pretend:Key{I64}

    return key.pretend


fn{T} insert(u &T.Unordered, elem T) T.Key
    let key = u.indices.sparse::insert(u.values.len)

    u.values.grow
    u.values[u.values.len - 1].key   = key.pretend:Key{I64}
    u.values[u.values.len - 1].value = elem

    return key.pretend


acquires{T} index{ Unordered, T } (u&, idx) -> &
    return u.values[idx].value


acquires{T} at{ Unordered, T.Key, T} (u&, key) -> &
    let index = u.indices[key.pretend:sparse::Key{I64}]
    return &u.values[index].value


fn{T} delete(u &T.Unordered, key T.Key)
    let end    = u.values.len - 1
    let endKey = u.values[end].key
    let index  = u.indices.at(key.pretend:sparse::Key{I64})

    u.values[index] = u.values[end]

    u.indices.at(endKey.pretend:sparse::Key{I64}) = index
    u.indices.sparse::delete(key.pretend)
    u.values.pop
